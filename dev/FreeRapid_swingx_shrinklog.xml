<?xml version="1.0" encoding="UTF-8"?>
<yshrink version="0.1">
    <!-- parsing C:\develope\freerapid\dev\swingx.jar -->
    <entrypoints>
        <class name="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$MagnifyingPanel"/>
        <method signature="void setMagPoint(java.awt.geom.Point2D)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$MagnifyingPanel"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$MagnifyingPanel"/>
        <class name="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void removeItemListener(java.awt.event.ItemListener)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void addActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void removeActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void setCallback(java.lang.String)" class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void addItemListener(java.awt.event.ItemListener)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="java.awt.event.ActionListener[] getActionListeners()"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="java.awt.event.ItemListener[] getItemListeners()"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void registerCallback(java.lang.Object,java.lang.String)"
                class="org.jdesktop.swingx.action.BoundAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.BoundAction"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$4"/>
        <method signature="void run()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$4"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$3"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$3"/>
        <class name="org.jdesktop.swingx.plaf.MonthViewUI"/>
        <method signature="java.lang.String[] getDaysOfTheWeek()" class="org.jdesktop.swingx.plaf.MonthViewUI"/>
        <method signature="java.util.Date getDayAtLocation(int,int)" class="org.jdesktop.swingx.plaf.MonthViewUI"/>
        <method signature="java.util.Date getLastDisplayedDay()" class="org.jdesktop.swingx.plaf.MonthViewUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.MonthViewUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$EditorCancelAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicDatePickerUI,javax.swing.JFormattedTextField)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$EditorCancelAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$EditorCancelAction"/>
        <method signature="void uninstall()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$EditorCancelAction"/>
        <field name="TEXT_CANCEL_KEY" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$EditorCancelAction"/>
        <class name="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.awt.Color getDescriptionForeground()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="org.jdesktop.swingx.JXHeader$IconPosition getIconPosition()"
                class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.awt.Font getDescriptionFont()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setTitleForeground(java.awt.Color)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.HeaderUI)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setDescriptionFont(java.awt.Font)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setDescriptionForeground(java.awt.Color)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.lang.String getDescription()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.awt.Font getTitleFont()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="javax.swing.plaf.PanelUI getUI()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.awt.Color getTitleForeground()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setTitle(java.lang.String)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setIconPosition(org.jdesktop.swingx.JXHeader$IconPosition)"
                class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setDescription(java.lang.String)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setTitleFont(java.awt.Font)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="org.jdesktop.swingx.plaf.HeaderUI getUI()" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.JXHeader"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXHeader"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXHeader"/>
        <class name="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="java.awt.Color getTitleForeground()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.TitledPanelUI)"
                class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setTitle(java.lang.String)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setTitlePainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.awt.Container)"
                class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setTitleForeground(java.awt.Color)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setLeftDecoration(javax.swing.JComponent)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="org.jdesktop.swingx.plaf.TitledPanelUI getUI()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="java.awt.Container getContentContainer()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="javax.swing.JComponent getRightDecoration()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="javax.swing.JComponent getLeftDecoration()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setContentContainer(java.awt.Container)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setTitleFont(java.awt.Font)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void setRightDecoration(javax.swing.JComponent)" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getTitlePainter()"
                class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="java.awt.Font getTitleFont()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <method signature="javax.swing.plaf.PanelUI getUI()" class="org.jdesktop.swingx.JXTitledPanel"/>
        <field name="RIGHT_DECORATION" class="org.jdesktop.swingx.JXTitledPanel"/>
        <field name="LEFT_DECORATION" class="org.jdesktop.swingx.JXTitledPanel"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXTitledPanel"/>
        <class name="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void setUnselectableDates(java.util.SortedSet)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="java.util.SortedSet getUnselectableDates()"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void addSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void removeSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void &lt;init&gt;(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode getSelectionMode()"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void setSelectionMode(org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void setSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="java.util.Date getFirstSelectionDate()"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="java.util.Date getLastSelectionDate()"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="java.util.SortedSet getSelection()"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="boolean isUnselectableDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="boolean isSelected(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="boolean isSelectionEmpty()" class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="java.util.Date getNormalizedDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.DefaultDateSelectionModel"/>
        <class name="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String getMatchRule()"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="boolean isAutoDetect()" class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String createStartsAnchoredRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String createContainedRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String getDefaultMatchRule()"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="void setMatchRule(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String createEndAnchoredRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String createRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.lang.String createEqualsRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="java.util.List getMatchRules()"
                class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <field name="matchRule" class="org.jdesktop.swingx.search.PatternModel$RegexCreator"/>
        <class name="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotSeven()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotThree()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotTwo()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotOne()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotFour()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOrLater(int)" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotSixUpdateN()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotSix()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="boolean isOneDotFive()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.JVM"/>
        <method signature="org.jdesktop.swingx.util.JVM current()" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_7" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_3" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_4" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_5" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_6" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_6N" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_0" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_1" class="org.jdesktop.swingx.util.JVM"/>
        <field name="JDK1_2" class="org.jdesktop.swingx.util.JVM"/>
        <class name="org.jdesktop.swingx.JXTipOfTheDay$1"/>
        <method signature="boolean isShowingOnStartup()" class="org.jdesktop.swingx.JXTipOfTheDay$1"/>
        <method signature="void setShowingOnStartup(boolean)" class="org.jdesktop.swingx.JXTipOfTheDay$1"/>
        <class name="org.jdesktop.swingx.JXLoginPane$NullLoginService"/>
        <method signature="boolean authenticate(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.JXLoginPane$NullLoginService"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.JXLoginPane$NullLoginService"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.JXLoginPane$NullLoginService"/>
        <class name="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="javax.swing.JComponent createRendererComponent()"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void format(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="boolean getValueAsBoolean(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="boolean isBorderPainted()" class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void configureState(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void setBorderPainted(boolean)" class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <method signature="javax.swing.AbstractButton createRendererComponent()"
                class="org.jdesktop.swingx.renderer.CheckBoxProvider"/>
        <class name="org.jdesktop.swingx.plaf.LookAndFeelUtils"/>
        <method signature="java.lang.Object getUIOfType(javax.swing.plaf.ComponentUI,java.lang.Class)"
                class="org.jdesktop.swingx.plaf.LookAndFeelUtils"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.LookAndFeelUtils"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void uninstallDefaults(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void installListeners(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void setLeftDecoration(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="javax.swing.JLabel createAndConfigureCaption(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="javax.swing.JComponent getRightDecoration()"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="javax.swing.JComponent getLeftDecoration()"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void paint(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void uninstallListeners(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void uninstallComponents(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void installDefaults(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="java.awt.Container getTitleBar()" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void setRightDecoration(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="org.jdesktop.swingx.JXPanel createAndConfigureTopPanel(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void installComponents(org.jdesktop.swingx.JXTitledPanel)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="java.awt.Insets getCaptionInsets()"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void installProperty(javax.swing.JComponent,java.lang.String,java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <field name="left" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <field name="titleChangeListener" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <field name="caption" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <field name="topPanel" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <field name="right" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI"/>
        <class name="org.jdesktop.swingx.auth.PasswordStore"/>
        <method signature="boolean set(java.lang.String,java.lang.String,char[])"
                class="org.jdesktop.swingx.auth.PasswordStore"/>
        <method signature="void removeUserPassword(java.lang.String)" class="org.jdesktop.swingx.auth.PasswordStore"/>
        <method signature="char[] get(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.auth.PasswordStore"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.PasswordStore"/>
        <class name="org.jdesktop.swingx.JXGraph$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="org.jdesktop.swingx.JXGraph$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader createCalendarHeader()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader getHeaderComponent()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="void uninstall(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="void install(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent getHeaderComponent()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent createCalendarHeader()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="void installNavigationActions()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler"/>
        <class name="org.jdesktop.swingx.plaf.nimbus.NimbusLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.nimbus.NimbusLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="java.awt.Paint getPaint()" class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void setPosition(org.jdesktop.swingx.painter.GlossPainter$GlossPosition)"
                class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,org.jdesktop.swingx.painter.GlossPainter$GlossPosition)"
                class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void setPaint(java.awt.Paint)" class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="org.jdesktop.swingx.painter.GlossPainter$GlossPosition getPosition()"
                class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.painter.GlossPainter$GlossPosition)"
                class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.GlossPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.GlossPainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler"/>
        <method signature="javax.swing.JComponent prepareRenderingComponent(org.jdesktop.swingx.JXMonthView,java.util.Calendar,org.jdesktop.swingx.plaf.basic.CalendarState)"
                class="org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler"/>
        <method signature="void setLocale(java.util.Locale)"
                class="org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler"/>
        <class name="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void setSortable(boolean)" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="boolean isSortable()" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void toggleSortOrder(int)" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void setStringValueProvider(org.jdesktop.swingx.sort.StringValueProvider)"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="boolean isSortable(int)" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="javax.swing.SortOrder getSortOrder(int)"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void setSortOrderCycle(javax.swing.SortOrder[])"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="org.jdesktop.swingx.sort.StringValueProvider getStringValueProvider()"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="javax.swing.SortOrder[] getSortOrderCycle()"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void resetSortOrders()" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void &lt;init&gt;(javax.swing.table.TableModel)"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void setSortOrder(int,javax.swing.SortOrder)"
                class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.sort.TableSortController"/>
        <method signature="void setSortable(int,boolean)" class="org.jdesktop.swingx.sort.TableSortController"/>
        <class name="org.jdesktop.swingx.treetable.TreeTableCellEditor$TreeTableTextField"/>
        <method signature="void reshape(int,int,int,int)"
                class="org.jdesktop.swingx.treetable.TreeTableCellEditor$TreeTableTextField"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI"/>
        <method signature="void installComponents()" class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTipOfTheDay)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite derive(org.jdesktop.swingx.graphics.BlendComposite$BlendingMode)"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="float getAlpha()" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="java.awt.CompositeContext createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode getMode()"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite derive(float)"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite getInstance(org.jdesktop.swingx.graphics.BlendComposite$BlendingMode)"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite getInstance(org.jdesktop.swingx.graphics.BlendComposite$BlendingMode,float)"
                class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="SoftLight" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Darken" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="ColorDodge" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Subtract" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Multiply" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Lighten" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="SoftBurn" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Blue" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Stamp" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Add" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Average" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Luminosity" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Glow" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="ColorBurn" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Screen" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Red" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="InverseColorBurn" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Exclusion" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Overlay" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Saturation" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Color" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Reflect" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Difference" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="SoftDodge" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Heat" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Green" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="InverseColorDodge" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="HardLight" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Freeze" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Hue" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <field name="Negation" class="org.jdesktop.swingx.graphics.BlendComposite"/>
        <class name="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI$GlossyPaneBorder"/>
        <method signature="void paintTitleBackground(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI$GlossyPaneBorder"/>
        <method signature="void paintExpandedControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI$GlossyPaneBorder"/>
        <method signature="boolean isMouseOverBorder()"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI$GlossyPaneBorder"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI$XPPaneBorder"/>
        <method signature="void paintTitleBackground(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI$XPPaneBorder"/>
        <method signature="void paintExpandedControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI$XPPaneBorder"/>
        <method signature="boolean isMouseOverBorder()"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI$XPPaneBorder"/>
        <class name="org.jdesktop.swingx.JXLoginPane$RemovableKeyEventDispatcher$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXLoginPane$RemovableKeyEventDispatcher$1"/>
        <class name="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <method signature="void add(java.lang.Class,java.util.EventListener)"
                class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <method signature="java.lang.Object[] getListenerList()"
                class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <method signature="java.util.EventListener[] getListeners(java.lang.Class)"
                class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <method signature="void remove(java.lang.Class,java.util.EventListener)"
                class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <field name="classes" class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <field name="weakReferences" class="org.jdesktop.swingx.event.WeakEventListenerList"/>
        <class name="org.jdesktop.beans.AbstractBean"/>
        <method signature="void fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="java.beans.PropertyChangeListener[] getPropertyChangeListeners()"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void removeVetoableChangeListener(java.beans.VetoableChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="java.lang.Object clone()" class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void fireVetoableChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void &lt;init&gt;(java.beans.PropertyChangeSupport,java.beans.VetoableChangeSupport)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="boolean hasVetoableChangeListeners(java.lang.String)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="java.beans.VetoableChangeListener[] getVetoableChangeListeners(java.lang.String)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="java.beans.VetoableChangeListener[] getVetoableChangeListeners()"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void firePropertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="boolean hasPropertyChangeListeners(java.lang.String)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void addVetoableChangeListener(java.beans.VetoableChangeListener)"
                class="org.jdesktop.beans.AbstractBean"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.beans.AbstractBean"/>
        <class name="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="java.awt.geom.Rectangle2D getBounds2D()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean contains(double,double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="java.awt.Rectangle getBounds()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)"
                class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="double getX()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)"
                class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean contains(double,double,double,double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="double getY()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="double getOuterRadius()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean contains(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean intersects(double,double,double,double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean contains(java.awt.geom.Point2D)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="boolean intersects(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void &lt;init&gt;(double,double,double,double,int)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void setInnerRadius(double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void setY(double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void setX(double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void setOuterRadius(double)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="void setBranchesCount(int)" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="double getInnerRadius()" class="org.jdesktop.swingx.geom.Star2D"/>
        <method signature="int getBranchesCount()" class="org.jdesktop.swingx.geom.Star2D"/>
        <class name="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.String,int)"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="java.util.regex.Pattern getPattern()"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="int getTestColumn()" class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern,int,int)"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="int getHighlightColumn()" class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.String,int,int)"
                class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <field name="ALL" class="org.jdesktop.swingx.decorator.PatternPredicate"/>
        <class name="org.jdesktop.swingx.JXHyperlink$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXHyperlink$1"/>
        <class name="org.jdesktop.swingx.JXTable$Actions"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXTable$Actions"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction$2"/>
        <class name="org.jdesktop.swingx.renderer.IconValue"/>
        <method signature="javax.swing.Icon getIcon(java.lang.Object)" class="org.jdesktop.swingx.renderer.IconValue"/>
        <field name="NULL_ICON" class="org.jdesktop.swingx.renderer.IconValue"/>
        <class name="org.jdesktop.swingx.JXDatePicker$TodayPanel$1"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXDatePicker$TodayPanel$1"/>
        <class name="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <method signature="java.lang.String getUserName()" class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <method signature="void setUserName(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <method signature="void setUserNames(java.lang.String[])"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
        <class name="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="boolean canHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="javax.swing.event.ChangeListener[] getChangeListeners()"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void addChangeListener(javax.swing.event.ChangeListener)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void removeChangeListener(javax.swing.event.ChangeListener)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="org.jdesktop.swingx.decorator.HighlightPredicate getHighlightPredicate()"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void fireStateChanged()" class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="boolean areEqual(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void setHighlightPredicate(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <field name="listenerList" class="org.jdesktop.swingx.decorator.AbstractHighlighter"/>
        <class name="org.jdesktop.swingx.plaf.macosx.MacOSXLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.macosx.MacOSXLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="void paint(java.awt.Graphics,java.awt.Shape)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="int getEndOffset()" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="float getMaximumSpan(int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="javax.swing.text.Document getDocument()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="int viewToModel(float,float,java.awt.Shape,javax.swing.text.Position$Bias[])"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="javax.swing.text.View getView(int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="javax.swing.text.AttributeSet getAttributes()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="int getStartOffset()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="int getViewCount()" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="float getPreferredSpan(int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="java.awt.Container getContainer()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="javax.swing.text.Element getElement()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="void preferenceChanged(javax.swing.text.View,boolean,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="java.awt.Shape modelToView(int,java.awt.Shape,javax.swing.text.Position$Bias)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="float getMinimumSpan(int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="void setSize(float,float)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="void setParent(javax.swing.text.View)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="java.awt.Shape modelToView(int,javax.swing.text.Position$Bias,int,javax.swing.text.Position$Bias,java.awt.Shape)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="javax.swing.text.ViewFactory getViewFactory()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <method signature="float getAlignment(int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$Renderer"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction$1"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction$1"/>
        <class name="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <method signature="void addLinuxDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TitledPanelAddon"/>
        <class name="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void remove(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="boolean isEditable(int)" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void setAllowsChildren(boolean)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="java.lang.String toString()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="int getIndex(javax.swing.tree.TreeNode)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode getParent()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void setValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void add(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode getChildAt(int)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="javax.swing.tree.TreeNode getParent()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="javax.swing.tree.TreeNode getChildAt(int)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="java.lang.Object getUserObject()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="java.util.List createChildrenList()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="java.util.Enumeration children()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="int getChildCount()" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="boolean isLeaf()" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode,int)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void setUserObject(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="boolean getAllowsChildren()"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void removeFromParent()" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void remove(int)" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;(java.lang.Object,boolean)"
                class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <field name="userObject" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <field name="allowsChildren" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <field name="children" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <field name="parent" class="org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode"/>
        <class name="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue,int)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider createDefaultComponentProvider()"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <field name="cellContext" class="org.jdesktop.swingx.renderer.DefaultListRenderer"/>
        <class name="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="java.awt.Dimension maximumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="void layoutContainer(java.awt.Container)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="void setLayoutManager(java.awt.LayoutManager2)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXRootPane)"
                class="org.jdesktop.swingx.JXRootPane$XRootLayout"/>
        <class name="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.rollover.TreeRolloverController createLinkController()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(java.lang.Object[])" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void removeNotify()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="java.lang.String getStringAt(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.search.Searchable getSearchable()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setClosedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setSelectionForeground(java.awt.Color)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void doFind()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setModel(javax.swing.tree.TreeModel)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int)"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setLeafIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setExpandedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setSelectionBackground(java.awt.Color)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setOpenIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(java.util.Vector)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setCellRenderer(javax.swing.tree.TreeCellRenderer)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void updateRendererEditorUI()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.tree.TreeCellRenderer getCellRenderer()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.event.ChangeListener getHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="java.awt.Color getSelectionBackground()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setOverwriteRendererIcons(boolean)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.tree.TreeCellRenderer createDefaultCellRenderer()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="boolean isRolloverEnabled()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(java.util.Hashtable)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void startEditingAtPath(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void updateHighlighterUI()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.tree.TreeCellRenderer getWrappedCellRenderer()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="int[] getSelectionRows()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void analyseFocus()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(javax.swing.tree.TreeModel)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setRolloverEnabled(boolean)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(javax.swing.tree.TreeNode)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="java.lang.String getStringAt(int)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.event.TreeModelListener createTreeModelListener()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="java.awt.Color getSelectionForeground()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="boolean isOverwriteRendererIcons()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void &lt;init&gt;(javax.swing.tree.TreeNode,boolean)" class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.event.ChangeListener createHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="javax.swing.tree.TreePath[] getSelectionPaths()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void collapseAll()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.rollover.TreeRolloverController getLinkController()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.JXTree"/>
        <method signature="void expandAll()" class="org.jdesktop.swingx.JXTree"/>
        <method signature="void setCollapsedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree"/>
        <field name="compoundHighlighter" class="org.jdesktop.swingx.JXTree"/>
        <field name="dataAdapter" class="org.jdesktop.swingx.JXTree"/>
        <class name="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter$ColorMemory"/>
        <method signature="void &lt;init&gt;(java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter$ColorMemory"/>
        <class name="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$1"/>
        <method signature="void keyReleased(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$1"/>
        <class name="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$2"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$2"/>
        <class name="org.jdesktop.swingx.event.CompoundFocusListener$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.event.CompoundFocusListener$1"/>
        <class name="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.TargetableAction createTargetableAction(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.CompositeAction createCompositeAction(java.lang.String,java.lang.String,java.lang.String,boolean)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.TargetableAction createTargetableAction(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.BoundAction createBoundAction(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="void decorateAction(javax.swing.AbstractAction,java.lang.String,java.lang.String,javax.swing.Icon,javax.swing.Icon,javax.swing.KeyStroke)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.CompositeAction createCompositeAction(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.BoundAction createBoundAction(java.lang.String,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.BoundAction createBoundAction(java.lang.String,java.lang.String,java.lang.String,boolean)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.CompositeAction createCompositeAction(java.lang.String,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.ServerAction createServerAction(java.lang.String,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.TargetableAction createTargetableAction(java.lang.String,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.ActionFactory"/>
        <method signature="org.jdesktop.swingx.action.TargetableAction createTargetableAction(java.lang.String,java.lang.String,java.lang.String,boolean)"
                class="org.jdesktop.swingx.action.ActionFactory"/>
        <class name="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <method signature="boolean isResetSortOrderGesture(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <method signature="boolean isToggleSortOrderGesture(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <method signature="boolean isSortOrderGesture(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <method signature="boolean isResetModifier(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer"/>
        <class name="org.jdesktop.swingx.auth.LoginService$1$3"/>
        <method signature="void run()" class="org.jdesktop.swingx.auth.LoginService$1$3"/>
        <class name="org.jdesktop.swingx.auth.LoginService$1$4"/>
        <method signature="void run()" class="org.jdesktop.swingx.auth.LoginService$1$4"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicTrackRenderer"/>
        <method signature="javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicTrackRenderer"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicTrackRenderer"/>
        <class name="org.jdesktop.swingx.auth.LoginService$1$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.auth.LoginService$1$1"/>
        <class name="org.jdesktop.swingx.decorator.CompoundHighlighter$1"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter$1"/>
        <class name="org.jdesktop.swingx.auth.LoginAdapter"/>
        <method signature="void loginCanceled(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginAdapter"/>
        <method signature="void loginStarted(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginAdapter"/>
        <method signature="void loginSucceeded(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginAdapter"/>
        <method signature="void loginFailed(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginAdapter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.LoginAdapter"/>
        <class name="org.jdesktop.swingx.auth.LoginService$1$2"/>
        <method signature="void run()" class="org.jdesktop.swingx.auth.LoginService$1$2"/>
        <class name="org.jdesktop.swingx.JXButton$DefaultForegroundPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,org.jdesktop.swingx.JXButton,int,int)"
                class="org.jdesktop.swingx.JXButton$DefaultForegroundPainter"/>
        <method signature="boolean shouldUseCache()" class="org.jdesktop.swingx.JXButton$DefaultForegroundPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.JXButton$DefaultForegroundPainter"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode valueOf(java.lang.String)"
                class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode[] values()"
                class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="REFLECT" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="GREEN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="INVERSE_COLOR_DODGE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="OVERLAY" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SCREEN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="LIGHTEN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SUBTRACT" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="COLOR" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SATURATION" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="RED" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SOFT_BURN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="HEAT" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="BLUE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="COLOR_DODGE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="HARD_LIGHT" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="STAMP" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="DARKEN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="NEGATION" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="MULTIPLY" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="LUMINOSITY" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="AVERAGE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="INVERSE_COLOR_BURN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SOFT_LIGHT" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="HUE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="COLOR_BURN" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="SOFT_DODGE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="FREEZE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="DIFFERENCE" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="EXCLUSION" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="GLOW" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <field name="ADD" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingMode"/>
        <class name="org.jdesktop.swingx.JXEditorPane$CaretHandler"/>
        <method signature="void caretUpdate(javax.swing.event.CaretEvent)"
                class="org.jdesktop.swingx.JXEditorPane$CaretHandler"/>
        <class name="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor$1"/>
        <class name="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor$2"/>
        <method signature="void hyperlinkUpdate(javax.swing.event.HyperlinkEvent)"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor$2"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI"/>
        <method signature="javax.swing.border.Border createPaneBorder()"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI"/>
        <class name="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="int getDisplayedMnemonicIndex()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setAnimated(boolean)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setDisplayedMnemonicIndex(int)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="boolean isSpecial()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.TaskPaneUI)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setMnemonic(int)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setSpecial(boolean)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.awt.Container getValidatingContainer()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.lang.String paramString()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void removeAll()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.awt.Container getContentPane()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="int getMnemonic()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setTitle(java.lang.String)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void remove(java.awt.Component)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="boolean isScrollOnExpand()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setLayout(java.awt.LayoutManager)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setScrollOnExpand(boolean)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void setCollapsed(boolean)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="boolean isCollapsed()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void remove(int)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="java.awt.Component add(javax.swing.Action)" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void addImpl(java.awt.Component,java.lang.Object,int)"
                class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="boolean isAnimated()" class="org.jdesktop.swingx.JXTaskPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="ANIMATED_CHANGED_KEY" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="ICON_CHANGED_KEY" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="SPECIAL_CHANGED_KEY" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="SCROLL_ON_EXPAND_CHANGED_KEY" class="org.jdesktop.swingx.JXTaskPane"/>
        <field name="TITLE_CHANGED_KEY" class="org.jdesktop.swingx.JXTaskPane"/>
        <class name="org.jdesktop.swingx.JXLoginPane$CancelAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$CancelAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXLoginPane$CancelAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXLoginPane$CancelAction"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$StopListener"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXGradientChooser)"
                class="org.jdesktop.swingx.JXGradientChooser$StopListener"/>
        <method signature="void thumbSelected(int)" class="org.jdesktop.swingx.JXGradientChooser$StopListener"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$StopListener"/>
        <method signature="void thumbMoved(int,float)" class="org.jdesktop.swingx.JXGradientChooser$StopListener"/>
        <class name="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="int getChildButtonCount()" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="javax.swing.AbstractButton getChildButton(java.lang.Object)"
                class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void &lt;init&gt;(java.lang.Object[])" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void setLayoutAxis(int)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void addActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void fireActionEvent(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void removeActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="javax.swing.AbstractButton getSelectedButton()" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void add(java.lang.Object)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void setSelectedValue(java.lang.Object)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void setValues(java.lang.Object[])" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="java.awt.event.ActionListener[] getActionListeners()"
                class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="javax.swing.AbstractButton getChildButton(int)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void setEnabled(boolean)" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="org.jdesktop.swingx.JXRadioGroup create(java.lang.Object[])"
                class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="java.lang.Object getSelectedValue()" class="org.jdesktop.swingx.JXRadioGroup"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXRadioGroup"/>
        <class name="org.jdesktop.swingx.plaf.motif.MotifLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.motif.MotifLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="java.lang.Object getUserObject()" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="boolean isEditable(int)" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="java.util.Enumeration children()" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="void setUserObject(java.lang.Object)" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode getChildAt(int)"
                class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode getParent()"
                class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="void setValueAt(java.lang.Object,int)" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <method signature="java.lang.Object getValueAt(int)" class="org.jdesktop.swingx.treetable.TreeTableNode"/>
        <class name="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <method signature="org.jdesktop.swingx.painter.ImagePainter$ScaleType valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <method signature="org.jdesktop.swingx.painter.ImagePainter$ScaleType[] values()"
                class="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <field name="InsideFit" class="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <field name="OutsideFit" class="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <field name="Distort" class="org.jdesktop.swingx.painter.ImagePainter$ScaleType"/>
        <class name="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix"/>
        <method signature="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix install(javax.swing.JComboBox)"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix"/>
        <method signature="void uninstall()"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer"/>
        <method signature="java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer"/>
        <method signature="void paint(java.awt.Graphics)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$ClippedTreeCellRenderer"/>
        <class name="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="void remove(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode,int)"
                class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="java.util.Enumeration children()"
                class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="void removeFromParent()" class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <method signature="void remove(int)" class="org.jdesktop.swingx.treetable.MutableTreeTableNode"/>
        <class name="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isPlastic()" class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void initialize(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void &lt;init&gt;(java.lang.String)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isWindows(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isMotif(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addNimbusDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isMetal(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addMotifDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isNimbus(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void addLinuxDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isLinux(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="void uninitialize(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isSynth()" class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <method signature="boolean isMac(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.AbstractComponentAddon"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$DefaultEditor"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicDatePickerUI,javax.swing.JFormattedTextField$AbstractFormatter)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$DefaultEditor"/>
        <method signature="java.awt.Dimension getPreferredSize()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$DefaultEditor"/>
        <class name="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void repaint(java.awt.Rectangle)" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void repaint()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void paintComponentWithPainter(java.awt.Graphics2D)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void firePropertyChange(java.lang.String,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void revalidate()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void invalidate()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void validate()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void setToolTipText(java.lang.String)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <method signature="void repaint(long,int,int,int,int)"
                class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <field name="painter" class="org.jdesktop.swingx.renderer.JXRendererHyperlink"/>
        <class name="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setCornerSize(int)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShowBottomShadow(boolean)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="java.awt.Color getShadowColor()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="boolean isShowTopShadow()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShowRightShadow(boolean)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShowLeftShadow(boolean)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="boolean isBorderOpaque()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShowTopShadow(boolean)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="boolean isShowLeftShadow()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void &lt;init&gt;(java.awt.Color,int,float,int,boolean,boolean,boolean,boolean)"
                class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShadowColor(java.awt.Color)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="int getShadowSize()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShadowOpacity(float)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="boolean isShowBottomShadow()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="java.awt.Insets getBorderInsets(java.awt.Component)"
                class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void setShadowSize(int)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void &lt;init&gt;(java.awt.Color,int)" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="boolean isShowRightShadow()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="int getCornerSize()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <method signature="float getShadowOpacity()" class="org.jdesktop.swingx.border.DropShadowBorder"/>
        <class name="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setMonthText(java.lang.String)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setSpinnerFocusable(boolean)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setActions(javax.swing.Action,javax.swing.Action,javax.swing.SpinnerModel)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setBackground(java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setArrowsSurroundMonth(boolean)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void setFont(java.awt.Font)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader"/>
        <class name="org.jdesktop.swingx.table.DefaultTableColumnModelExt$VisibilityListener"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt$VisibilityListener"/>
        <class name="org.jdesktop.swingx.JXImagePanel$1"/>
        <method signature="void done()" class="org.jdesktop.swingx.JXImagePanel$1"/>
        <class name="org.jdesktop.swingx.JXImagePanel$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void focusLost(java.awt.event.FocusEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void valueChanged(org.jdesktop.swingx.event.DateSelectionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void focusGained(java.awt.event.FocusEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <method signature="void layoutContainer(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$Handler"/>
        <class name="org.jdesktop.swingx.renderer.IconValues$1"/>
        <method signature="javax.swing.Icon getIcon(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.IconValues$1"/>
        <class name="org.jdesktop.swingx.renderer.IconValues$3"/>
        <method signature="javax.swing.Icon getIcon(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.IconValues$3"/>
        <class name="org.jdesktop.swingx.renderer.IconValues$2"/>
        <method signature="javax.swing.Icon getIcon(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.IconValues$2"/>
        <class name="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter"/>
        <method signature="void applyBackground(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter"/>
        <method signature="void applyForeground(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter"/>
        <method signature="java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter"/>
        <class name="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findExtendedMatch(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXList)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void moveMatchMarker()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="javax.swing.JComponent getTarget()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void moveMatchByHighlighter()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="org.jdesktop.swingx.JXList getTarget()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void moveMatchBySelection()" class="org.jdesktop.swingx.search.ListSearchable"/>
        <method signature="void findMatchAndUpdateState(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.ListSearchable"/>
        <field name="list" class="org.jdesktop.swingx.search.ListSearchable"/>
        <class name="org.jdesktop.swingx.JXTable$BooleanEditor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTable$BooleanEditor"/>
        <class name="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <method signature="int getIconWidth()" class="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <method signature="int getIconHeight()" class="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
                class="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <method signature="void main(java.lang.String[])" class="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.icon.ColumnControlIcon"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXColorSelectionButton$1"/>
        <class name="org.jdesktop.swingx.sort.RowFilters$RegexFilter"/>
        <method signature="boolean include(javax.swing.RowFilter$Entry,int)"
                class="org.jdesktop.swingx.sort.RowFilters$RegexFilter"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXColorSelectionButton$2"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton$3"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXColorSelectionButton$3"/>
        <class name="org.jdesktop.swingx.painter.Painter"/>
        <method signature="void paint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.Painter"/>
        <class name="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void saveUserNames()" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="java.lang.String[] getUserNames()" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void removeUserName(java.lang.String)" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="boolean containsUserName(java.lang.String)" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void loadUserNames()" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void setUserNames(java.lang.String[])" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <method signature="void addUserName(java.lang.String)" class="org.jdesktop.swingx.auth.UserNameStore"/>
        <class name="org.jdesktop.swingx.multislider.ThumbDataListener"/>
        <method signature="void positionChanged(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.multislider.ThumbDataListener"/>
        <method signature="void valueChanged(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.multislider.ThumbDataListener"/>
        <method signature="void thumbRemoved(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.multislider.ThumbDataListener"/>
        <method signature="void thumbAdded(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.multislider.ThumbDataListener"/>
        <class name="org.jdesktop.swingx.table.NumberEditorExt"/>
        <method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
                class="org.jdesktop.swingx.table.NumberEditorExt"/>
        <method signature="java.lang.Object getCellEditorValue()" class="org.jdesktop.swingx.table.NumberEditorExt"/>
        <method signature="void &lt;init&gt;(java.text.NumberFormat)"
                class="org.jdesktop.swingx.table.NumberEditorExt"/>
        <method signature="boolean stopCellEditing()" class="org.jdesktop.swingx.table.NumberEditorExt"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.NumberEditorExt"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicDocument"/>
        <class name="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildrenAdded(javax.swing.tree.TreePath,int[],java.lang.Object[])"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireNewRoot()" class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildChanged(javax.swing.tree.TreePath,int,java.lang.Object)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void removeTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildAdded(javax.swing.tree.TreePath,int,java.lang.Object)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildrenChanged(javax.swing.tree.TreePath,int[],java.lang.Object[])"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void firePathLeafStateChanged(javax.swing.tree.TreePath)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void firePathChanged(javax.swing.tree.TreePath)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void addTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireTreeStructureChanged(javax.swing.tree.TreePath)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void &lt;init&gt;(javax.swing.tree.TreeModel)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildrenRemoved(javax.swing.tree.TreePath,int[],java.lang.Object[])"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="javax.swing.event.TreeModelListener[] getTreeModelListeners()"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <method signature="void fireChildRemoved(javax.swing.tree.TreePath,int,java.lang.Object)"
                class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <field name="listeners" class="org.jdesktop.swingx.tree.TreeModelSupport"/>
        <class name="org.jdesktop.swingx.plaf.BusyLabelAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.BusyLabelAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.BusyLabelAddon"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void setExpandedState(javax.swing.tree.TreePath,boolean)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="boolean shouldApplyDropHack()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void paint(java.awt.Graphics)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void scrollRectToVisible(java.awt.Rectangle)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void setRowHeight(int)" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void setToolTipText(java.lang.String)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void setBounds(int,int,int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="java.beans.PropertyChangeListener createRolloverListener()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void bind(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.treetable.TreeTableModel)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <field name="visibleRow" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <field name="highlightBorder" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <field name="treeTable" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
        <class name="org.jdesktop.swingx.JXRadioGroup$ActionSelectionListener"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXRadioGroup$ActionSelectionListener"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXRadioGroup$ActionSelectionListener"/>
        <class name="org.jdesktop.swingx.JXEditorPane$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXEditorPane$1"/>
        <class name="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isTestable(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.String getString()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int getRowCount()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.String getString(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.Object getValue()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.Object getFilteredValueAt(int,int)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int getDepth()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int getColumnIndex(java.lang.Object)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isHierarchical()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int viewToModel(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.Object getColumnIdentifierAt(int)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.Object getValue(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.String getFilteredStringAt(int,int)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="void refresh()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isExpanded()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.String getColumnName(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.String getStringAt(int,int)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean isLeaf()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="int modelToView(int)" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="boolean hasFocus()" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <method signature="void &lt;init&gt;(javax.swing.JComponent)"
                class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <field name="target" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <field name="column" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <field name="DEFAULT_COLUMN_IDENTIFIER" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <field name="row" class="org.jdesktop.swingx.decorator.ComponentAdapter"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsStatusBarUI"/>
        <method signature="java.awt.Insets getSeparatorInsets(java.awt.Insets)"
                class="org.jdesktop.swingx.plaf.windows.WindowsStatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsStatusBarUI"/>
        <method signature="void paintBackground(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.windows.WindowsStatusBarUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsStatusBarUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$DetailsClickEvent"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$DetailsClickEvent"/>
        <class name="org.jdesktop.swingx.plaf.TipOfTheDayUI"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice)"
                class="org.jdesktop.swingx.plaf.TipOfTheDayUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TipOfTheDayUI"/>
        <class name="org.jdesktop.swingx.AbstractPatternPanel$3"/>
        <method signature="void insertUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.AbstractPatternPanel$3"/>
        <method signature="void changedUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.AbstractPatternPanel$3"/>
        <method signature="void removeUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.AbstractPatternPanel$3"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChevronIcon"/>
        <method signature="void &lt;init&gt;(boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChevronIcon"/>
        <method signature="int getIconWidth()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChevronIcon"/>
        <method signature="int getIconHeight()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChevronIcon"/>
        <method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChevronIcon"/>
        <class name="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long startOfDayInMillis(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getStartOfMonth(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long previousDay(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="java.util.Date startOfDay(java.util.Date)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="int getDayOfWeek(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getPreviousMonth(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="boolean isFirstOfYear(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long addDays(long,int)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long previousWeek(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="java.util.Date nextDay(java.util.Date)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getNextMonth(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="int getDaysDiff(long,long,boolean)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="boolean isFirstOfMonth(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getPreviousDay(long,int)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="java.util.Date endOfDay(java.util.Date)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long nextWeek(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long nextDay(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="int getDaysDiff(long,long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getNextDay(long,int)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long endOfDayInMillis(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <method signature="long getEndOfMonth(long)" class="org.jdesktop.swingx.calendar.DateUtils"/>
        <class name="org.jdesktop.swingx.AbstractPatternPanel$4"/>
        <method signature="java.awt.Dimension getMaximumSize()" class="org.jdesktop.swingx.AbstractPatternPanel$4"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI"/>
        <method signature="javax.swing.border.Border createPaneBorder()"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI"/>
        <method signature="void update(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTaskPaneUI"/>
        <class name="org.jdesktop.swingx.AbstractPatternPanel$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.AbstractPatternPanel$1"/>
        <class name="org.jdesktop.swingx.AbstractPatternPanel$2"/>
        <method signature="void run()" class="org.jdesktop.swingx.AbstractPatternPanel$2"/>
        <class name="org.jdesktop.swingx.color.GradientTrackRenderer"/>
        <method signature="javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider)"
                class="org.jdesktop.swingx.color.GradientTrackRenderer"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.color.GradientTrackRenderer"/>
        <method signature="void paint(java.awt.Graphics)" class="org.jdesktop.swingx.color.GradientTrackRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.color.GradientTrackRenderer"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$AndHighlightPredicate"/>
        <method signature="org.jdesktop.swingx.decorator.HighlightPredicate[] getHighlightPredicates()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$AndHighlightPredicate"/>
        <method signature="void &lt;init&gt;(java.util.Collection)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$AndHighlightPredicate"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate[])"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$AndHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$AndHighlightPredicate"/>
        <class name="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.String getFilteredStringAt(int,int)"
                class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.String getString()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isExpanded()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.String getStringAt(int,int)" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="org.jdesktop.swingx.JXTree getTree()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isLeaf()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.Object getValue()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="java.lang.Object getFilteredValueAt(int,int)"
                class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="int getDepth()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean hasFocus()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="boolean isHierarchical()" class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree)"
                class="org.jdesktop.swingx.JXTree$TreeAdapter"/>
        <class name="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="boolean isEditable(int)" class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;(java.lang.Object,boolean)"
                class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="void setValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="java.lang.Object getValueAt(int)"
                class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.DefaultMutableTreeTableNode"/>
        <class name="org.jdesktop.swingx.plaf.TaskPaneContainerUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TaskPaneContainerUI"/>
        <class name="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="java.lang.Object getSelectedItem()" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="java.lang.Object getElementAt(int)" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="void &lt;init&gt;(java.util.List)" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <field name="UPDATE" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <field name="selected" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <field name="data" class="org.jdesktop.swingx.combobox.ListComboBoxModel"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void removeAll()"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void addVisibilityActionItems(java.util.List)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="javax.swing.JPopupMenu getPopupMenu()"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void addItem(javax.swing.JMenuItem)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void addItems(java.util.List)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void addAdditionalActionItems(java.util.List)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void toggleVisibility(javax.swing.JComponent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void applyComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void addSeparator()"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void updateUI()"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.table.ColumnControlButton)"
                class="org.jdesktop.swingx.table.ColumnControlButton$DefaultColumnControlPopup"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane$AccessibleMultiSplitPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXMultiSplitPane)"
                class="org.jdesktop.swingx.JXMultiSplitPane$AccessibleMultiSplitPane"/>
        <method signature="javax.accessibility.AccessibleRole getAccessibleRole()"
                class="org.jdesktop.swingx.JXMultiSplitPane$AccessibleMultiSplitPane"/>
        <class name="org.jdesktop.swingx.JXGraph$ResetHandler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXGraph$ResetHandler"/>
        <class name="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void &lt;init&gt;(javax.swing.table.TableColumnModel)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="java.lang.String getToolTipText(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer getSortGestureRecognizer()"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="org.jdesktop.swingx.JXTable getXTable()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="java.awt.Dimension getPreferredSize(java.awt.Dimension)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void setDraggedDistance(int)" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void columnPropertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="java.lang.String getColumnToolTipText(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void setSortGestureRecognizer(org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void uninstallHeaderListener()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="int getMinimumHeight(int)" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void setTable(javax.swing.JTable)" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="javax.swing.table.TableColumn getDraggedColumn()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void installHeaderListener()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="javax.swing.table.TableCellRenderer getCellRenderer(int)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer createSortGestureRecognizer()"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTableHeader"/>
        <method signature="boolean isColumnEvent(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTableHeader"/>
        <class name="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="void addPassword(java.lang.String,java.lang.String,char[])"
                class="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="void removePassword(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="java.lang.String getPassword(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="void &lt;init&gt;(char[],java.io.InputStream)" class="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="void store(java.io.OutputStream)" class="org.jdesktop.swingx.auth.KeyChain"/>
        <method signature="void main(java.lang.String[])" class="org.jdesktop.swingx.auth.KeyChain"/>
        <class name="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$ScreenGeometry"/>
        <method signature="java.awt.Insets getScreenInsets()"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$ScreenGeometry"/>
        <method signature="java.awt.Rectangle getScreenSize()"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$ScreenGeometry"/>
        <method signature="java.awt.Rectangle getScreenBounds()"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$ScreenGeometry"/>
        <method signature="void &lt;init&gt;(javax.swing.JComponent)"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$ScreenGeometry"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$BasicHyperlinkListener"/>
        <method signature="void &lt;init&gt;(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$BasicHyperlinkListener"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$BasicHyperlinkListener"/>
        <class name="org.jdesktop.swingx.rollover.TreeRolloverProducer"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.TreeRolloverProducer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.TreeRolloverProducer"/>
        <method signature="void updateRolloverPoint(javax.swing.JComponent,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.TreeRolloverProducer"/>
        <class name="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void applyBackground(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="java.awt.Color getSelectedBackground()"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void applyForeground(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void setBackground(java.awt.Color)" class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void setSelectedBackground(java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="java.awt.Color getBackground()" class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="java.awt.Color getSelectedForeground()"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="java.awt.Color getForeground()" class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void setForeground(java.awt.Color)" class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void setSelectedForeground(java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.ColorHighlighter"/>
        <class name="org.jdesktop.swingx.auth.SimpleLoginService"/>
        <method signature="boolean authenticate(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.auth.SimpleLoginService"/>
        <method signature="void &lt;init&gt;(java.util.Map)" class="org.jdesktop.swingx.auth.SimpleLoginService"/>
        <class name="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$SaveMode[] values()"
                class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$SaveMode valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <field name="BOTH" class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <field name="USER_NAME" class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <field name="PASSWORD" class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <field name="NONE" class="org.jdesktop.swingx.JXLoginPane$SaveMode"/>
        <class name="org.jdesktop.swingx.rollover.ListRolloverController"/>
        <method signature="java.awt.Point getFocusedCell()"
                class="org.jdesktop.swingx.rollover.ListRolloverController"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverRenderer getRolloverRenderer(java.awt.Point,boolean)"
                class="org.jdesktop.swingx.rollover.ListRolloverController"/>
        <method signature="void rollover(java.awt.Point,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.ListRolloverController"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.ListRolloverController"/>
        <class name="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <method signature="int getValue()" class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <method signature="org.jdesktop.swingx.JXLabel$TextAlignment valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <method signature="org.jdesktop.swingx.JXLabel$TextAlignment[] values()"
                class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <field name="RIGHT" class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <field name="JUSTIFY" class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <field name="LEFT" class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <field name="CENTER" class="org.jdesktop.swingx.JXLabel$TextAlignment"/>
        <class name="org.jdesktop.swingx.JXMultiThumbSlider$ThumbComp"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbComp"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbComp"/>
        <method signature="void setSelected(boolean)" class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbComp"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXMultiThumbSlider)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbComp"/>
        <class name="org.jdesktop.swingx.JXEditorPane$SloppyHTMLEditorKit"/>
        <method signature="void read(java.io.Reader,javax.swing.text.Document,int)"
                class="org.jdesktop.swingx.JXEditorPane$SloppyHTMLEditorKit"/>
        <class name="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="javax.swing.JInternalFrame getErrorInternalFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="void configureDetailsButton(boolean)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="javax.swing.JFrame getErrorFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="void reinit()" class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="javax.swing.JDialog getErrorDialog(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="java.awt.LayoutManager createDetailPanelLayout()"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="java.awt.LayoutManager createErrorPaneLayout()"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="void configureReportAction(org.jdesktop.swingx.action.AbstractActionExt)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="int getDetailsHeight()" class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXErrorPaneUI"/>
        <class name="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="int getWindingRule()" class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="void &lt;init&gt;(java.awt.geom.AffineTransform,org.jdesktop.swingx.geom.Morphing2D$Geometry,org.jdesktop.swingx.geom.Morphing2D$Geometry,double)"
                class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="int currentSegment(double[])" class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="void next()" class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="boolean isDone()" class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <method signature="int currentSegment(float[])" class="org.jdesktop.swingx.geom.Morphing2D$Iterator"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteKeyAdapter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="void uninstallDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="java.awt.LayoutManager createDefaultLayout()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <field name="taskPane" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI"/>
        <class name="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void repaint(java.awt.Rectangle)" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void repaint()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void paintComponentWithPainter(java.awt.Graphics2D)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void firePropertyChange(java.lang.String,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void revalidate()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void invalidate()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void validate()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="boolean isOpaque()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void setToolTipText(java.lang.String)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <method signature="void repaint(long,int,int,int,int)" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <field name="painter" class="org.jdesktop.swingx.renderer.JRendererCheckBox"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$BasicDatePickerPopup"/>
        <method signature="void updateLinkPanel(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$BasicDatePickerPopup"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicDatePickerUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$BasicDatePickerPopup"/>
        <class name="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="org.jdesktop.swingx.plaf.TaskPaneContainerUI getUI()"
                class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="void remove(org.jdesktop.swingx.JXTaskPane)"
                class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="boolean getScrollableTracksViewportHeight()"
                class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.TaskPaneContainerUI)"
                class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="javax.swing.plaf.PanelUI getUI()" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="boolean getScrollableTracksViewportWidth()" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <method signature="void add(org.jdesktop.swingx.JXTaskPane)" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXTaskPaneContainer"/>
        <class name="org.jdesktop.swingx.auth.LoginListener"/>
        <method signature="void loginCanceled(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginListener"/>
        <method signature="void loginSucceeded(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginListener"/>
        <method signature="void loginStarted(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginListener"/>
        <method signature="void loginFailed(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.auth.LoginListener"/>
        <class name="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="java.awt.Paint getPaint()" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void setStripeWidth(double)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void setAngle(double)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void setPaint(java.awt.Paint)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,double,double,double)"
                class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void &lt;init&gt;(double)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,double)"
                class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="double getAngle()" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void setSpacing(double)" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="double getStripeWidth()" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <method signature="double getSpacing()" class="org.jdesktop.swingx.painter.PinstripePainter"/>
        <class name="org.jdesktop.swingx.painter.effects.GlowPathEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.GlowPathEffect"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="void selectAll()" class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="java.awt.Component getEditorComponent()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="void setItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="void addActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="java.lang.Object getItem()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="void removeActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.ComboBoxEditor,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteComboBoxEditor"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$ColSplit"/>
        <method signature="boolean isRowLayout()" class="org.jdesktop.swingx.MultiSplitLayout$ColSplit"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$ColSplit"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.MultiSplitLayout$Node[])"
                class="org.jdesktop.swingx.MultiSplitLayout$ColSplit"/>
        <class name="org.jdesktop.swingx.plaf.TipOfTheDayAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TipOfTheDayAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TipOfTheDayAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TipOfTheDayAddon"/>
        <class name="org.jdesktop.swingx.JXLabel$BasicViewFactory"/>
        <method signature="javax.swing.text.View create(javax.swing.text.Element)"
                class="org.jdesktop.swingx.JXLabel$BasicViewFactory"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$3"/>
        <method signature="void windowClosed(java.awt.event.WindowEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$3"/>
        <class name="org.jdesktop.swingx.JXTree$CellEditorRemover"/>
        <method signature="void release()" class="org.jdesktop.swingx.JXTree$CellEditorRemover"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTree$CellEditorRemover"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree)"
                class="org.jdesktop.swingx.JXTree$CellEditorRemover"/>
        <method signature="void updateKeyboardFocusManager()" class="org.jdesktop.swingx.JXTree$CellEditorRemover"/>
        <class name="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="int getGap()" class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void removeLayoutComponent(java.awt.Component)" class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void setGap(int)" class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.VerticalLayout"/>
        <method signature="void layoutContainer(java.awt.Container)" class="org.jdesktop.swingx.VerticalLayout"/>
        <class name="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior"/>
        <method signature="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior[] values()"
                class="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior"/>
        <method signature="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior"/>
        <field name="FILL" class="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior"/>
        <field name="FIXED" class="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior"/>
        <class name="org.jdesktop.swingx.tips.TipOfTheDayModel"/>
        <method signature="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip getTipAt(int)"
                class="org.jdesktop.swingx.tips.TipOfTheDayModel"/>
        <method signature="int getTipCount()" class="org.jdesktop.swingx.tips.TipOfTheDayModel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void valueChanged(org.jdesktop.swingx.event.DateSelectionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <method signature="void layoutContainer(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$Handler"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$1"/>
        <class name="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findExtendedMatch(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void moveMatchMarker()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="javax.swing.JComponent getTarget()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void moveMatchByHighlighter()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="org.jdesktop.swingx.JXTree getTarget()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void moveMatchBySelection()" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <method signature="void findMatchAndUpdateState(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.TreeSearchable"/>
        <field name="tree" class="org.jdesktop.swingx.search.TreeSearchable"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="int getLength()" class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void render(java.lang.Runnable)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="java.lang.Object getProperty(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="java.lang.String getText(int,int)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void getText(int,int,javax.swing.text.Segment)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Document createDefaultDocument()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Element getDefaultRootElement()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void insertString(int,java.lang.String,javax.swing.text.AttributeSet)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Position getEndPosition()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void removeUndoableEditListener(javax.swing.event.UndoableEditListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void addUndoableEditListener(javax.swing.event.UndoableEditListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void remove(int,int)" class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void addDocumentListener(javax.swing.event.DocumentListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void putProperty(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean,org.jdesktop.swingx.autocomplete.ObjectToStringConverter,javax.swing.text.Document)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Element[] getRootElements()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="boolean isStrictMatching()" class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="void removeDocumentListener(javax.swing.event.DocumentListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Position getStartPosition()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <method signature="javax.swing.text.Position createPosition(int)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <field name="strictMatching" class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <field name="delegate" class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.text.JTextComponent,java.util.List,boolean,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.text.JTextComponent,java.util.List,boolean)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.JList,javax.swing.text.JTextComponent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.JList,javax.swing.text.JTextComponent,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.JComboBox,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.text.JTextComponent,org.jdesktop.swingx.autocomplete.AutoCompleteDocument,org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <method signature="void decorate(javax.swing.JComboBox)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator"/>
        <class name="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment[] values()"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <field name="RIGHT" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <field name="LEFT" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <field name="CENTER" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$3"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$3"/>
        <class name="org.jdesktop.swingx.JXEditorPane$UndoHandler"/>
        <method signature="void undoableEditHappened(javax.swing.event.UndoableEditEvent)"
                class="org.jdesktop.swingx.JXEditorPane$UndoHandler"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$2"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$2"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$1"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$1"/>
        <class name="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void addLinuxDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TaskPaneAddon"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$6"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$6"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$5"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$5"/>
        <class name="org.jdesktop.swingx.renderer.StringValues$4"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValues$4"/>
        <class name="org.jdesktop.swingx.event.TableColumnModelExtListener"/>
        <method signature="void columnPropertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.event.TableColumnModelExtListener"/>
        <class name="org.jdesktop.swingx.JXButton$DefaultBackgroundPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,org.jdesktop.swingx.JXButton,int,int)"
                class="org.jdesktop.swingx.JXButton$DefaultBackgroundPainter"/>
        <method signature="boolean shouldUseCache()" class="org.jdesktop.swingx.JXButton$DefaultBackgroundPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.JXButton$DefaultBackgroundPainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI$LocaleHandler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI$LocaleHandler"/>
        <class name="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="java.awt.Insets getInsets()" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="boolean isFillVertical()" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="boolean isFillHorizontal()" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void setInsets(java.awt.Insets)" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void setFillVertical(boolean)" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void setVerticalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void setHorizontalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment)"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void setFillHorizontal(boolean)" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="java.awt.Rectangle calculateLayout(int,int,int,int)"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.AbstractLayoutPainter"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$RowGroupHighlightPredicate"/>
        <method signature="void &lt;init&gt;(int)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$RowGroupHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$RowGroupHighlightPredicate"/>
        <method signature="int getLinesPerGroup()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$RowGroupHighlightPredicate"/>
        <class name="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void setColumnClass(java.lang.Class,int)"
                class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void setStringValue(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void clearColumnStringValues()" class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue getStringValue(java.lang.Class)"
                class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue getStringValue(int,int)"
                class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void setColumnClasses(java.util.Map)" class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void setStringValue(org.jdesktop.swingx.renderer.StringValue,java.lang.Class)"
                class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.sort.StringValueRegistry"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$2"/>
        <class name="org.jdesktop.swingx.icon.EmptyIcon"/>
        <method signature="int getIconWidth()" class="org.jdesktop.swingx.icon.EmptyIcon"/>
        <method signature="int getIconHeight()" class="org.jdesktop.swingx.icon.EmptyIcon"/>
        <method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
                class="org.jdesktop.swingx.icon.EmptyIcon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.icon.EmptyIcon"/>
        <method signature="void &lt;init&gt;(int,int)" class="org.jdesktop.swingx.icon.EmptyIcon"/>
        <class name="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void repaint(java.awt.Rectangle)" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void repaint()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void paintComponentWithPainter(java.awt.Graphics2D)"
                class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void firePropertyChange(java.lang.String,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void revalidate()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void invalidate()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void validate()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="boolean isOpaque()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void setToolTipText(java.lang.String)" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <method signature="void repaint(long,int,int,int,int)" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <field name="painter" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsClassicLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void setURI(java.net.URI)" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="java.net.URI getURI()" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void &lt;init&gt;(java.net.URI)" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void &lt;init&gt;(java.net.URL)" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.OpenBrowserAction"/>
        <class name="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintTop(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintLeft(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="javax.swing.Icon[] getTileIcons()" class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(int,int,int,int,java.awt.Color)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintRight(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="javax.swing.Icon getDefaultIcon()" class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(int,int,int,int,javax.swing.Icon[])"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintTopLeft(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(java.awt.Insets,javax.swing.Icon)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paint(javax.swing.Icon,java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintBottomRight(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintBottomLeft(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintTopRight(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void paintBottom(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(int,int,int,int,javax.swing.Icon)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <method signature="void &lt;init&gt;(java.awt.Insets,java.awt.Color)"
                class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <field name="tileIcons" class="org.jdesktop.swingx.border.MatteBorderExt"/>
        <class name="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.UIColorHighlighterAddon"/>
        <class name="org.jdesktop.swingx.JXMultiThumbSlider$MultiThumbMouseListener"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$MultiThumbMouseListener"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$MultiThumbMouseListener"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$MultiThumbMouseListener"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void uninstallComponentDefaults(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="org.jdesktop.swingx.painter.Painter createBackgroundPainter()"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void installComponentDefaults(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void installListeners(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void onPropertyChange(org.jdesktop.swingx.JXHeader,java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void uninstallDefaults(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void installComponents(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void installDefaults(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void uninstallListeners(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <method signature="void uninstallComponents(org.jdesktop.swingx.JXHeader)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <field name="descriptionPane" class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <field name="imagePanel" class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <field name="titleLabel" class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="void invalidateLayout(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="float getLayoutAlignmentX(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="float getLayoutAlignmentY(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="void addLayoutComponent(java.awt.Component,java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="java.awt.Dimension maximumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <method signature="void layoutContainer(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$1"/>
        <class name="org.jdesktop.swingx.auth.LoginService$1"/>
        <method signature="java.lang.Boolean doInBackground()" class="org.jdesktop.swingx.auth.LoginService$1"/>
        <method signature="java.lang.Object doInBackground()" class="org.jdesktop.swingx.auth.LoginService$1"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$7"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$7"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$3"/>
        <method signature="void treeStructureChanged(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$3"/>
        <method signature="void treeNodesChanged(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$3"/>
        <method signature="void treeNodesInserted(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$3"/>
        <method signature="void treeNodesRemoved(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$3"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$4"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$4"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$5"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$5"/>
        <class name="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void dismiss()" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void showOnGlassPane(java.awt.Container,java.awt.Component,int,int,int)"
                class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void &lt;init&gt;(float)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void paint(java.awt.Graphics)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void showOnGlassPane(java.awt.Container,int,int)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void setAlpha(float)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="boolean isDismissOnClick()" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void setDismissOnClick(boolean)" class="org.jdesktop.swingx.JXGlassBox"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXGlassBox"/>
        <class name="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor$Handler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor$Handler"/>
        <method signature="void keyPressed(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor$Handler"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$6"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$6"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.JInternalFrame getErrorInternalFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="java.awt.Dimension calculatePreferredSize()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void configureDetailsButton(boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="java.awt.LayoutManager createErrorPaneLayout()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="java.lang.String getDetailsAsHTML(org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="int getDetailsHeight()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.Icon getDefaultErrorIcon()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void uninstallDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void reinit()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.JFrame getErrorFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.JDialog getErrorDialog(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="java.awt.LayoutManager createDetailPanelLayout()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void configureReportAction(org.jdesktop.swingx.action.AbstractActionExt)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void uninstallComponents()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void installComponents()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.Icon getDefaultWarningIcon()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="errorMessage" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="detailsPanel" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="CLASS_NAME" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="detailButton" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="closeButton" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="detailsScrollPane" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="detailListener" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="pane" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="iconLabel" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="reportButton" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="errorScrollPane" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="details" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="copyToClipboardListener" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="errorPaneListener" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <field name="copyToClipboardButton" class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI"/>
        <class name="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)"
                class="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="java.awt.RenderingHints getRenderingHints()"
                class="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)"
                class="org.jdesktop.swingx.image.AbstractFilter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.image.AbstractFilter"/>
        <class name="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setCellRenderer(javax.swing.ListCellRenderer)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(java.lang.Object[])" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.ListCellRenderer getWrappedCellRenderer()" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.search.Searchable getSearchable()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void doFind()" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.ListCellRenderer createDefaultCellRenderer()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int)"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="int convertIndexToView(int)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setModel(javax.swing.ListModel)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(java.util.Vector)" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="java.lang.Object getElementAt(int)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setFilterEnabled(boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void toggleSortOrder()" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.rollover.ListRolloverController getLinkController()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.event.ChangeListener getHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.ListModel getWrappedModel()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setComparator(java.util.Comparator)" class="org.jdesktop.swingx.JXList"/>
        <method signature="boolean isRolloverEnabled()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(javax.swing.ListModel,boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="int convertIndexToModel(int)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(javax.swing.ListModel)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void updateHighlighterUI()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(java.lang.Object[],boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void updateSortAfterComparatorChange()" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.rollover.ListRolloverController createLinkController()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void setRolloverEnabled(boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setSelectionModel(javax.swing.ListSelectionModel)" class="org.jdesktop.swingx.JXList"/>
        <method signature="java.lang.String getStringAt(int)" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.ListCellRenderer getCellRenderer()" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.SortOrder getSortOrder()" class="org.jdesktop.swingx.JXList"/>
        <method signature="boolean isFilterEnabled()" class="org.jdesktop.swingx.JXList"/>
        <method signature="javax.swing.event.ChangeListener createHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void &lt;init&gt;(java.util.Vector,boolean)" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.sort.SortController getSortController()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="int getElementCount()" class="org.jdesktop.swingx.JXList"/>
        <method signature="void resetSortOrder()" class="org.jdesktop.swingx.JXList"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="void setSortOrder(javax.swing.SortOrder)" class="org.jdesktop.swingx.JXList"/>
        <method signature="void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.JXList"/>
        <method signature="java.util.Comparator getComparator()" class="org.jdesktop.swingx.JXList"/>
        <field name="compoundHighlighter" class="org.jdesktop.swingx.JXList"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXList"/>
        <field name="dataAdapter" class="org.jdesktop.swingx.JXList"/>
        <field name="EXECUTE_BUTTON_ACTIONCOMMAND" class="org.jdesktop.swingx.JXList"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="java.awt.Component createAction(javax.swing.Action)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void ensureVisible()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="java.awt.Dimension getPreferredSize(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="javax.swing.border.Border createContentPaneBorder()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="javax.swing.border.Border createPaneBorder()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="int getTitleHeight(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="int getRoundHeight()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void configure(org.jdesktop.swingx.JXHyperlink)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="java.beans.PropertyChangeListener createPropertyListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void installKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="boolean isInBorder(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="javax.swing.event.MouseInputListener createMouseInputListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="propertyListener" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="mouseListener" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="titleHeight" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="roundHeight" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="mouseOver" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <field name="group" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI"/>
        <class name="org.jdesktop.swingx.plaf.UIManagerExt$UIDefaultsExt"/>
        <method signature="void removeResourceBundle(java.lang.String)"
                class="org.jdesktop.swingx.plaf.UIManagerExt$UIDefaultsExt"/>
        <method signature="void addResourceBundle(java.lang.String)"
                class="org.jdesktop.swingx.plaf.UIManagerExt$UIDefaultsExt"/>
        <class name="org.jdesktop.swingx.image.ColorTintFilter"/>
        <method signature="java.awt.Color getMixColor()" class="org.jdesktop.swingx.image.ColorTintFilter"/>
        <method signature="float getMixValue()" class="org.jdesktop.swingx.image.ColorTintFilter"/>
        <method signature="java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.ColorTintFilter"/>
        <method signature="void &lt;init&gt;(java.awt.Color,float)" class="org.jdesktop.swingx.image.ColorTintFilter"/>
        <class name="org.jdesktop.swingx.plaf.XListAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.XListAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.XListAddon"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsHyperlinkUI"/>
        <method signature="void paintButtonPressed(java.awt.Graphics,javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.windows.WindowsHyperlinkUI"/>
        <method signature="void installDefaults(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.windows.WindowsHyperlinkUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsHyperlinkUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsHyperlinkUI"/>
        <class name="org.jdesktop.swingx.table.LabelProperties$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.LabelProperties$1"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$AnimationParams"/>
        <method signature="void &lt;init&gt;(int,int,float,float)"
                class="org.jdesktop.swingx.JXCollapsiblePane$AnimationParams"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI$2"/>
        <class name="org.jdesktop.swingx.renderer.DefaultListRenderer$1"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.DefaultListRenderer$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarState valueOf(java.lang.String)"
                class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarState[] values()"
                class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="TRAILING" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="IN_MONTH" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="DAY_OF_WEEK" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="TODAY" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="LEADING" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="TITLE" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <field name="WEEK_OF_YEAR" class="org.jdesktop.swingx.plaf.basic.CalendarState"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI$1"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.plaf.basic.BasicTitledPanelUI$1"/>
        <class name="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setComparator(java.util.Comparator)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="java.lang.String getToolTipText()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void copyClientPropertiesFrom(org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setPrototypeValue(java.lang.Object)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setToolTipText(java.lang.String)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void &lt;init&gt;(int,int)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setSortable(boolean)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="boolean isSortable()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="java.lang.Object getPrototypeValue()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="java.lang.Object getClientProperty(java.lang.Object)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setTitle(java.lang.String)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="javax.swing.event.ChangeListener createHighlighterChangeListener()"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void &lt;init&gt;(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void putClientProperty(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void copyFrom(org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="java.util.Comparator getComparator()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="boolean getResizable()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="javax.swing.event.ChangeListener getHighlighterChangeListener()"
                class="org.jdesktop.swingx.table.TableColumnExt"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="visible" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="compoundHighlighter" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="sortable" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="prototypeValue" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="comparator" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="editable" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <field name="clientProperties" class="org.jdesktop.swingx.table.TableColumnExt"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$2"/>
        <method signature="void ancestorResized(java.awt.event.HierarchyEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$2"/>
        <class name="org.jdesktop.swingx.painter.effects.InnerShadowPathEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.InnerShadowPathEffect"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$1"/>
        <class name="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <method signature="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment[] values()"
                class="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <field name="BOTTOM" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <field name="TOP" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <field name="CENTER" class="org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment"/>
        <class name="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void setLayout(java.awt.LayoutManager)" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void setStatusBar(org.jdesktop.swingx.JXStatusBar)" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="org.jdesktop.swingx.JXStatusBar getStatusBar()" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void setJMenuBar(javax.swing.JMenuBar)" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void setCancelButton(javax.swing.JButton)" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void setToolBar(javax.swing.JToolBar)" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="java.awt.Container createContentPane()" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="javax.swing.JButton getCancelButton()" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="java.awt.LayoutManager createRootLayout()" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXRootPane"/>
        <method signature="javax.swing.JToolBar getToolBar()" class="org.jdesktop.swingx.JXRootPane"/>
        <field name="statusBar" class="org.jdesktop.swingx.JXRootPane"/>
        <class name="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="java.lang.Object getSelectedItem()"
                class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="int getItemCount()" class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="java.lang.Object getItem(int)" class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="javax.swing.text.JTextComponent getTextComponent()"
                class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <method signature="void &lt;init&gt;(javax.swing.JComboBox)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxAdaptor"/>
        <class name="org.jdesktop.swingx.multislider.TrackRenderer"/>
        <method signature="javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider)"
                class="org.jdesktop.swingx.multislider.TrackRenderer"/>
        <class name="org.jdesktop.swingx.plaf.linux.LinuxLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.linux.LinuxLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="java.beans.PropertyChangeListener getColumnListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="void releaseColumn()"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="boolean canControlColumn()"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="java.beans.PropertyChangeListener createPropertyChangeListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="boolean isEnabled()"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.table.ColumnControlButton,javax.swing.table.TableColumn)"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <method signature="void setSelected(boolean)"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction"/>
        <class name="org.jdesktop.swingx.plaf.ErrorPaneAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.ErrorPaneAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.ErrorPaneAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.ErrorPaneAddon"/>
        <class name="org.jdesktop.swingx.painter.MattePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jdesktop.swingx.painter.MattePainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.MattePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.MattePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.MattePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,boolean)" class="org.jdesktop.swingx.painter.MattePainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void home(boolean)" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="org.jdesktop.swingx.event.DateSelectionListener createMonthViewSelectionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFormatsFromTimeZone(java.util.TimeZone)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateLocale()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.event.MouseMotionListener createMouseMotionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromValueChanged(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.beans.PropertyChangeListener createPropertyChangeListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="javax.swing.JFormattedTextField createEditor()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateLinkDate()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void hidePopup()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallLinkPanelKeyboardActions(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$TogglePopupAction createTogglePopupAction()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void toggleShowPopup()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromMonthViewChanged(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromEditorChanged(javax.swing.JFormattedTextField,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.util.Date getSelectableDate(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromEditableChanged()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.beans.PropertyChangeListener createEditorPropertyListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installLinkPanelKeyboardActions()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.event.FocusListener createFocusListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateEditorListeners(javax.swing.JFormattedTextField)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installComponents()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.Dimension getMinimumSize(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateTimeZone(java.util.TimeZone)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromSelectionModelChanged(org.jdesktop.swingx.calendar.DateSelectionModel)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.event.ActionListener createMonthViewActionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.beans.PropertyChangeListener createMonthViewPropertyListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="javax.swing.JButton createPopupButton()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromDateChanged()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.event.ActionListener createEditorActionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateSelectionModelListeners(org.jdesktop.swingx.calendar.DateSelectionModel)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.LayoutManager createLayoutManager()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.Dimension getPreferredSize(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateLinkPanel(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="int getBaseline(int,int)" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateFromSelectionChanged(org.jdesktop.swingx.event.DateSelectionEvent$EventType,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void commit()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void updateMonthViewListeners(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallComponents()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="java.awt.event.MouseListener createMouseListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void cancel()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="void installKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="boolean isPopupVisible()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <field name="mouseListener" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <field name="datePicker" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <field name="propertyChangeListener" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <field name="mouseMotionListener" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI"/>
        <class name="org.jdesktop.swingx.JXLoginPane$CapsOnTest"/>
        <method signature="void clean()" class="org.jdesktop.swingx.JXLoginPane$CapsOnTest"/>
        <method signature="void runTest()" class="org.jdesktop.swingx.JXLoginPane$CapsOnTest"/>
        <class name="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
                class="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <method signature="java.lang.Object getCellEditorValue()" class="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.JTextField)"
                class="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <method signature="boolean stopCellEditing()" class="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTable$GenericEditor"/>
        <class name="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader$1"/>
        <method signature="java.awt.Dimension getMaximumSize()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader$1"/>
        <class name="org.jdesktop.swingx.plaf.metal.MetalStatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.metal.MetalStatusBarUI"/>
        <method signature="void paintBackground(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.metal.MetalStatusBarUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.metal.MetalStatusBarUI"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$AddThumbAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXGradientChooser)"
                class="org.jdesktop.swingx.JXGradientChooser$AddThumbAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$AddThumbAction"/>
        <class name="org.jdesktop.swingx.sort.TableSortController$1"/>
        <class name="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXList)"
                class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)"
                class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="javax.swing.ListCellRenderer getDelegateRenderer()"
                class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXList,javax.swing.ListCellRenderer)"
                class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="void setDelegateRenderer(javax.swing.ListCellRenderer)"
                class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXList$DelegatingRenderer"/>
        <class name="org.jdesktop.swingx.JXLabel"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void repaint()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="boolean isPaintBorderInsets()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="int getOccupiedWidth()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="org.jdesktop.swingx.JXLabel$TextAlignment getTextAlignment()"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="double getTextRotation()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setForegroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon,int)"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="boolean isOpaque()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void reshape(int,int,int,int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getBackgroundPainter()"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void repaint(long)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void repaint(long,int,int,int,int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="org.jdesktop.swingx.JXLabel$MultiLineSupport getMultiLineSupport()"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="int getHeight()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getForegroundPainter()"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void repaint(int,int,int,int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;(java.lang.String,int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="int getWidth()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="boolean isLineWrap()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setTextRotation(double)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon,int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setMaxLineSpan(int)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setLineWrap(boolean)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setTextAlignment(org.jdesktop.swingx.JXLabel$TextAlignment)"
                class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void setPaintBorderInsets(boolean)" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="int getMaxLineSpan()" class="org.jdesktop.swingx.JXLabel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXLabel"/>
        <field name="INVERTED" class="org.jdesktop.swingx.JXLabel"/>
        <field name="painted" class="org.jdesktop.swingx.JXLabel"/>
        <field name="VERTICAL_LEFT" class="org.jdesktop.swingx.JXLabel"/>
        <field name="NORMAL" class="org.jdesktop.swingx.JXLabel"/>
        <field name="VERTICAL_RIGHT" class="org.jdesktop.swingx.JXLabel"/>
        <class name="org.jdesktop.swingx.plaf.DatePickerUI"/>
        <method signature="int getBaseline(int,int)" class="org.jdesktop.swingx.plaf.DatePickerUI"/>
        <method signature="java.util.Date getSelectableDate(java.util.Date)"
                class="org.jdesktop.swingx.plaf.DatePickerUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.DatePickerUI"/>
        <class name="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="void installContext(javax.swing.JTree,java.lang.Object,int,int,boolean,boolean,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="java.awt.Color getSelectionForeground()"
                class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.Icon getOpenIcon()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.Icon getClosedIcon()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.JTree getComponent()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.JComponent getComponent()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.border.Border getFocusBorder()"
                class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="java.lang.String getUIPrefix()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.tree.TreePath getTreePath()"
                class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="java.awt.Color getSelectionBackground()"
                class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <method signature="javax.swing.Icon getLeafIcon()" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <field name="leafIcon" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <field name="closedIcon" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <field name="openIcon" class="org.jdesktop.swingx.renderer.TreeCellContext"/>
        <class name="org.jdesktop.swingx.renderer.StringValue"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.StringValue"/>
        <class name="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
        <method signature="java.lang.Object getSelectedItem()"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
        <method signature="java.lang.Object getElementAt(int)"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$11"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$11"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$12"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$12"/>
        <class name="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isWindows2003()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isUsingWindowsVisualStyles()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isWindowsVista()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isMacOSX()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isLinux()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isWindows()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="java.lang.String getWindowsVisualStyle()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.OS"/>
        <method signature="boolean isWindowsXP()" class="org.jdesktop.swingx.util.OS"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$10"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$10"/>
        <class name="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="javax.swing.table.TableCellRenderer getCellRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void configureTableColumn(javax.swing.table.TableModel,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="int getRowCount(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="int calcPrototypeWidth(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt createTableColumn(int)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void setInstance(org.jdesktop.swingx.table.ColumnFactory)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="int calcHeaderWidth(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="org.jdesktop.swingx.table.ColumnFactory getInstance()"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void configureColumnWidths(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="javax.swing.table.TableCellRenderer getHeaderRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="int getPreferredScrollableViewportWidth(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="int getDefaultPackMargin()" class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt createAndConfigureTableColumn(javax.swing.table.TableModel,int)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void packColumn(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt,int,int)"
                class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void setDefaultPackMargin(int)" class="org.jdesktop.swingx.table.ColumnFactory"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.ColumnFactory"/>
        <class name="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="boolean isUserInARole(java.lang.String[])" class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="boolean isUserInRoles(java.lang.String[])" class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="java.lang.String[] getRoles()" class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="boolean isUserInRole(java.lang.String)" class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.auth.UserPermissions"/>
        <method signature="org.jdesktop.swingx.auth.UserPermissions getInstance()"
                class="org.jdesktop.swingx.auth.UserPermissions"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$TypeHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$TypeHighlightPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.Class)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$TypeHighlightPredicate"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$TypeHighlightPredicate"/>
        <method signature="java.lang.Class getType()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$TypeHighlightPredicate"/>
        <class name="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <method signature="java.text.Format getFormat()" class="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <method signature="void &lt;init&gt;(java.text.Format)" class="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <field name="format" class="org.jdesktop.swingx.renderer.FormatStringValue"/>
        <class name="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setLinkDay(java.util.Date,java.lang.String)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.text.DateFormat[] getFormats()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="javax.swing.JPanel getLinkPanel()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setDate(java.util.Date)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setFormats(java.text.DateFormat[])" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setLinkFormat(java.text.MessageFormat)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.util.EventListener[] getListeners(java.lang.Class)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setFormats(java.lang.String[])" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setLinkPanel(javax.swing.JPanel)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void &lt;init&gt;(java.util.Date)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void &lt;init&gt;(java.util.Date,java.util.Locale)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.util.Date getLinkDay()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void commitEdit()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void &lt;init&gt;(java.util.Locale)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void addActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void updateTimeZone(java.util.TimeZone,java.util.TimeZone)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.text.MessageFormat getLinkFormat()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void cancelEdit()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void fireActionPerformed(java.lang.String)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setEditor(javax.swing.JFormattedTextField)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.util.Date getDate()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="javax.swing.JFormattedTextField getEditor()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.DatePickerUI)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="org.jdesktop.swingx.JXMonthView getMonthView()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="boolean isEditValid()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.awt.Font getFont()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="boolean isLightWeightPopupEnabled()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="int getBaseline(int,int)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void removeActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setTimeZone(java.util.TimeZone)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setLightWeightPopupEnabled(boolean)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="java.util.TimeZone getTimeZone()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setMonthView(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="org.jdesktop.swingx.plaf.DatePickerUI getUI()" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.JXDatePicker"/>
        <method signature="void setLinkDay(java.util.Date)" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="EDITOR" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="HOME_COMMIT_KEY" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="lightWeightPopupEnabled" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="COMMIT_KEY" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="MONTH_VIEW" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="LINK_PANEL" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="CANCEL_KEY" class="org.jdesktop.swingx.JXDatePicker"/>
        <field name="HOME_NAVIGATE_KEY" class="org.jdesktop.swingx.JXDatePicker"/>
        <class name="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel$1"/>
        <method signature="void keyReleased(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel$1"/>
        <class name="org.jdesktop.swingx.plaf.LookAndFeelAddons$1"/>
        <class name="org.jdesktop.swingx.plaf.StatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.StatusBarUI"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="java.beans.PropertyChangeListener createTablePropertyChangeListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTable,javax.swing.Icon)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void populatePopup()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="java.util.List getColumnVisibilityActions()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="org.jdesktop.swingx.table.ColumnControlPopup getColumnControlPopup()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="javax.swing.event.TableColumnModelListener getColumnModelListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void updateFromColumnModelChange(javax.swing.table.TableColumnModel)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void createVisibilityActions()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void applyComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void togglePopup()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void addVisibilityActionItems()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void updateButtonUI()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="java.util.List getColumnControlActionKeys()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="java.util.List getAdditionalActions()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="java.beans.PropertyChangeListener getTablePropertyChangeListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void updateActionUI()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void updateFromTableEnabledChanged()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="boolean canControl()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void addAdditionalActionItems()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="boolean isColumnControlActionKey(java.lang.Object)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void clearColumnVisibilityActions()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="void clearAll()" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="org.jdesktop.swingx.table.ColumnControlPopup createColumnControlPopup()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction createColumnVisibilityAction(javax.swing.table.TableColumn)"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <method signature="javax.swing.event.TableColumnModelListener createColumnModelListener()"
                class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <field name="popup" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <field name="COLUMN_CONTROL_BUTTON_MARGIN_KEY" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <field name="COLUMN_CONTROL_BUTTON_ICON_KEY" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <field name="COLUMN_CONTROL_MARKER" class="org.jdesktop.swingx.table.ColumnControlButton"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$2"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$ChangeLocationListener"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$ChangeLocationListener"/>
        <class name="org.jdesktop.swingx.JXRootPane$1"/>
        <method signature="void removeAll()" class="org.jdesktop.swingx.JXRootPane$1"/>
        <method signature="void remove(int)" class="org.jdesktop.swingx.JXRootPane$1"/>
        <method signature="void addImpl(java.awt.Component,java.lang.Object,int)"
                class="org.jdesktop.swingx.JXRootPane$1"/>
        <class name="org.jdesktop.swingx.multislider.DefaultMultiThumbModel$1"/>
        <method signature="int compare(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel$1"/>
        <method signature="int compare(org.jdesktop.swingx.multislider.Thumb,org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel$1"/>
        <class name="org.jdesktop.swingx.JXRootPane$2"/>
        <method signature="void addLayoutComponent(java.awt.Component,java.lang.Object)"
                class="org.jdesktop.swingx.JXRootPane$2"/>
        <class name="org.jdesktop.swingx.JXRootPane$3"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.JXRootPane$3"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXRootPane$3"/>
        <class name="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI"/>
        <method signature="javax.swing.border.Border createPaneBorder()"
                class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI"/>
        <class name="org.jdesktop.swingx.JXTable$2"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="org.jdesktop.swingx.JXTable$2"/>
        <class name="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Date startOfDay(java.util.Date)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setLocale(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void adjustDatesToTimeZone(java.util.TimeZone)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setFirstDayOfWeek(int)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Locale getLocale()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setLowerBound(java.util.Date)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void fireValueChanged(org.jdesktop.swingx.event.DateSelectionEvent$EventType)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setUpperBound(java.util.Date)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setAdjusting(boolean)" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void &lt;init&gt;(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Date getUpperBound()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setTimeZone(java.util.TimeZone)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Date getLowerBound()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void removeDateSelectionListener(org.jdesktop.swingx.event.DateSelectionListener)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="boolean isSameDay(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.List getDateSelectionListeners()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.TimeZone getTimeZone()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="int getMinimalDaysInFirstWeek()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Date endOfDay(java.util.Date)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void addDateSelectionListener(org.jdesktop.swingx.event.DateSelectionListener)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="java.util.Calendar getCalendar()"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void setMinimalDaysInFirstWeek(int)"
                class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="int getFirstDayOfWeek()" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <method signature="boolean isAdjusting()" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="lowerBound" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="EMPTY_DATES" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="locale" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="adjusting" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="upperBound" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="listenerMap" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <field name="calendar" class="org.jdesktop.swingx.calendar.AbstractDateSelectionModel"/>
        <class name="org.jdesktop.swingx.table.DatePickerCellEditor$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor$1"/>
        <class name="org.jdesktop.swingx.JXTable$1"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.JXTable$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXTable$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$CloseAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$CloseAction"/>
        <class name="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.lang.String[] wrapStringToArray(java.lang.String,int,java.text.BreakIterator,boolean)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="int getOperatingSystem()" class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.awt.Rectangle getUsableScreenBounds()" class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="boolean isWindows()" class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.lang.String keyToString(javax.swing.KeyStroke)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.awt.Rectangle getUsableScreenBounds(java.awt.GraphicsConfiguration)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="boolean isUnix()" class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="boolean isLargeFrameIcons()" class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.lang.Object[] toObjectArray(java.lang.Object)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="javax.swing.KeyStroke stringToKey(java.lang.String)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="java.lang.Object toPrimitiveArray(java.lang.Object[])"
                class="org.jdesktop.swingx.util.Utilities"/>
        <method signature="javax.swing.KeyStroke[] stringToKeys(java.lang.String)"
                class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WIN98" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_UNIX_MASK" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_OS2" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_AIX" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_SOLARIS" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="TYPICAL_WINDOWS_TASKBAR_HEIGHT" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_SUNOS" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_TRU64" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_HP" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WIN_OTHER" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WINDOWS_MASK" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_MAC" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_VMS" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_IRIX" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WIN95" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_OTHER" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_FREEBSD" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WIN2000" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_LINUX" class="org.jdesktop.swingx.util.Utilities"/>
        <field name="OS_WINNT" class="org.jdesktop.swingx.util.Utilities"/>
        <class name="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="boolean isResizeHandleEnabled()" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.StatusBarUI)" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="void setResizeHandleEnabled(boolean)" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="org.jdesktop.swingx.plaf.StatusBarUI getUI()" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXStatusBar"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXStatusBar"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXStatusBar"/>
        <class name="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="void setValueAt(java.lang.Object,java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="java.lang.String getColumnName(int)" class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="boolean isCellEditable(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="java.lang.Class getColumnClass(int)" class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="java.lang.Object getValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <method signature="int getHierarchicalColumn()" class="org.jdesktop.swingx.treetable.TreeTableModel"/>
        <class name="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void setTarget(org.jdesktop.swingx.action.Targetable)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="boolean doCommand(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="org.jdesktop.swingx.action.Targetable[] getTargets()"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="org.jdesktop.swingx.action.TargetManager getInstance()"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void addTarget(org.jdesktop.swingx.action.Targetable,boolean)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void removeTarget(org.jdesktop.swingx.action.Targetable)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="org.jdesktop.swingx.action.Targetable getTarget()"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void addTarget(org.jdesktop.swingx.action.Targetable)"
                class="org.jdesktop.swingx.action.TargetManager"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.TargetManager"/>
        <class name="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void setInner(boolean)" class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="boolean canHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,javax.swing.border.Border,boolean)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="javax.swing.border.Border getBorder()"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="boolean isInner()" class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;(javax.swing.border.Border)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,javax.swing.border.Border)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,javax.swing.border.Border,boolean,boolean)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="boolean isCompound()" class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void setBorder(javax.swing.border.Border)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <method signature="void setCompound(boolean)" class="org.jdesktop.swingx.decorator.BorderHighlighter"/>
        <class name="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="javax.swing.Icon getLargeDisplayIcon()"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="javax.swing.Icon getSmallDisplayIcon()"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="void main(java.lang.String[])"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="void buildChooser()" class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="java.lang.String getDisplayName()"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="void updateChooser()" class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel"/>
        <class name="org.jdesktop.swingx.JXLoginPane$CapsOnWinListener"/>
        <method signature="void windowOpened(java.awt.event.WindowEvent)"
                class="org.jdesktop.swingx.JXLoginPane$CapsOnWinListener"/>
        <method signature="void windowGainedFocus(java.awt.event.WindowEvent)"
                class="org.jdesktop.swingx.JXLoginPane$CapsOnWinListener"/>
        <method signature="void windowActivated(java.awt.event.WindowEvent)"
                class="org.jdesktop.swingx.JXLoginPane$CapsOnWinListener"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane,org.jdesktop.swingx.JXLoginPane$CapsOnTest)"
                class="org.jdesktop.swingx.JXLoginPane$CapsOnWinListener"/>
        <class name="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getFocusBackground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getDropCellBackground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.lang.String getUIKey(java.lang.String)"
                class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isDropOn()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getFocusForeground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getBackground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getDropCellForeground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="void installState(java.lang.Object,int,int,boolean,boolean,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.lang.Object getValue()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getForeground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.lang.String getUIPrefix()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getSelectionForeground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isExpanded()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="int getColumn()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="javax.swing.border.Border getBorder()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isLeaf()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="int getRow()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="javax.swing.JComponent getComponent()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.lang.Object replaceValue(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="javax.swing.border.Border getFocusBorder()"
                class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="boolean isFocused()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <method signature="java.awt.Color getSelectionBackground()" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="selected" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="component" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="dropOn" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="focused" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="column" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="value" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="noFocusBorder" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="leaf" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="expanded" class="org.jdesktop.swingx.renderer.CellContext"/>
        <field name="row" class="org.jdesktop.swingx.renderer.CellContext"/>
        <class name="org.jdesktop.swingx.search.SearchFactory$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.search.SearchFactory$1"/>
        <class name="org.jdesktop.swingx.table.DefaultTableColumnModelExt$1"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void setChildren(java.util.List)" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void remove(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="java.util.List getChildren()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void setChildren(org.jdesktop.swingx.MultiSplitLayout$Node[])"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void checkDividers(org.jdesktop.swingx.MultiSplitLayout$Split)"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void setName(java.lang.String)" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void restoreDividers(org.jdesktop.swingx.MultiSplitLayout$Split)"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="boolean isRowLayout()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void hide(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node lastWeightedChild()"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void setRowLayout(boolean)" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void replace(org.jdesktop.swingx.MultiSplitLayout$Node,org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.MultiSplitLayout$Node[])"
                class="org.jdesktop.swingx.MultiSplitLayout$Split"/>
        <class name="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="javax.swing.JComboBox getParagraphSelector()" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="boolean doCommand(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void paste()" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void initActions()" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void &lt;init&gt;(java.net.URL)" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void setEditorKit(javax.swing.text.EditorKit)" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="org.jdesktop.swingx.search.Searchable getSearchable()"
                class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="boolean hasCommand(java.lang.Object)" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void applyTag(javax.swing.text.html.HTML$Tag)" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXEditorPane"/>
        <method signature="java.lang.Object[] getCommands()" class="org.jdesktop.swingx.JXEditorPane"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$6"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$6"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane$DefaultDividerPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,org.jdesktop.swingx.MultiSplitLayout$Divider,int,int)"
                class="org.jdesktop.swingx.JXMultiSplitPane$DefaultDividerPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.JXMultiSplitPane$DefaultDividerPainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$7"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$7"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$3"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$3"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$2"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$5"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$5"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$4"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$4"/>
        <class name="org.jdesktop.swingx.sort.StringValueProvider"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue getStringValue(int,int)"
                class="org.jdesktop.swingx.sort.StringValueProvider"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$1"/>
        <method signature="java.lang.String getValueAsString(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler$1"/>
        <class name="org.jdesktop.swingx.plaf.MonthViewAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.MonthViewAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.MonthViewAddon"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$RowSplit"/>
        <method signature="boolean isRowLayout()" class="org.jdesktop.swingx.MultiSplitLayout$RowSplit"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$RowSplit"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.MultiSplitLayout$Node[])"
                class="org.jdesktop.swingx.MultiSplitLayout$RowSplit"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$1"/>
        <class name="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="java.awt.Container getTitleBar()" class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="void setRightDecoration(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="void setLeftDecoration(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="javax.swing.JComponent getRightDecoration()" class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="javax.swing.JComponent getLeftDecoration()" class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TitledPanelUI"/>
        <class name="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <method signature="javax.swing.JInternalFrame getErrorInternalFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <method signature="java.awt.Dimension calculatePreferredSize()" class="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <method signature="javax.swing.JFrame getErrorFrame(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <method signature="javax.swing.JDialog getErrorDialog(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.ErrorPaneUI"/>
        <class name="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.JTree,javax.swing.tree.DefaultTreeCellRenderer,javax.swing.tree.TreeCellEditor)"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="java.awt.Container createContainer()"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.JTree,javax.swing.tree.DefaultTreeCellRenderer)"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void setRenderer(javax.swing.tree.DefaultTreeCellRenderer)"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void applyComponentOrientation()" class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void prepareForEditing()" class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="javax.swing.tree.DefaultTreeCellRenderer getRenderer()"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor"/>
        <class name="org.jdesktop.swingx.JXImageView$ImageTransferable"/>
        <method signature="java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()"
                class="org.jdesktop.swingx.JXImageView$ImageTransferable"/>
        <method signature="java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor)"
                class="org.jdesktop.swingx.JXImageView$ImageTransferable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXImageView,java.awt.Image,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.JXImageView$ImageTransferable"/>
        <method signature="boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)"
                class="org.jdesktop.swingx.JXImageView$ImageTransferable"/>
        <class name="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <method signature="org.jdesktop.swingx.JXFrame$StartPosition[] values()"
                class="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <method signature="org.jdesktop.swingx.JXFrame$StartPosition valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <field name="CenterInParent" class="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <field name="Manual" class="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <field name="CenterInScreen" class="org.jdesktop.swingx.JXFrame$StartPosition"/>
        <class name="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="void setForeground(java.awt.Color)" class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="void setBackground(java.awt.Color)" class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider createDefaultComponentProvider()"
                class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider getComponentProvider()"
                class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <field name="componentController" class="org.jdesktop.swingx.renderer.AbstractRenderer"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$1"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2"/>
        <method signature="void updateRollover(java.awt.event.MouseEvent,java.lang.String,boolean)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2"/>
        <method signature="void updateRolloverPoint(javax.swing.JComponent,java.awt.Point)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer$2"/>
        <class name="org.jdesktop.swingx.plaf.PainterUIResource"/>
        <method signature="void paint(java.awt.Graphics2D,javax.swing.JComponent,int,int)"
                class="org.jdesktop.swingx.plaf.PainterUIResource"/>
        <method signature="void paint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.plaf.PainterUIResource"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.plaf.PainterUIResource"/>
        <class name="org.jdesktop.swingx.calendar.DatePickerFormatter$DatePickerFormatterUIResource"/>
        <method signature="void &lt;init&gt;(java.text.DateFormat[],java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter$DatePickerFormatterUIResource"/>
        <method signature="void &lt;init&gt;(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter$DatePickerFormatterUIResource"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter$DatePickerFormatterUIResource"/>
        <class name="org.jdesktop.swingx.util.WindowUtils$MinSizeComponentListener$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.util.WindowUtils$MinSizeComponentListener$1"/>
        <class name="org.jdesktop.swingx.decorator.UIDependent"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.decorator.UIDependent"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt"/>
        <method signature="boolean isHitDetectionFromProcessMouse()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicMonthViewUI,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="ACCEPT_SELECTION" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="SELECT_DAY_PREVIOUS_WEEK" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="SELECT_NEXT_DAY" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="SELECT_PREVIOUS_DAY" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="SELECT_DAY_NEXT_WEEK" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="ADJUST_SELECTION_NEXT_DAY" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="CANCEL_SELECTION" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="ADJUST_SELECTION_NEXT_WEEK"
               class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="ADJUST_SELECTION_PREVIOUS_DAY"
               class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <field name="ADJUST_SELECTION_PREVIOUS_WEEK"
               class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$KeyboardAction"/>
        <class name="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TaskPaneContainerAddon"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <method signature="boolean isVertical()" class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <method signature="org.jdesktop.swingx.JXCollapsiblePane$Direction[] values()"
                class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <method signature="org.jdesktop.swingx.JXCollapsiblePane$Direction valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <field name="RIGHT" class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <field name="DOWN" class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <field name="UP" class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <field name="LEFT" class="org.jdesktop.swingx.JXCollapsiblePane$Direction"/>
        <class name="org.jdesktop.swingx.action.Targetable"/>
        <method signature="boolean doCommand(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.action.Targetable"/>
        <method signature="java.lang.Object[] getCommands()" class="org.jdesktop.swingx.action.Targetable"/>
        <method signature="boolean hasCommand(java.lang.Object)" class="org.jdesktop.swingx.action.Targetable"/>
        <class name="org.jdesktop.swingx.image.FastBlurFilter"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.image.FastBlurFilter"/>
        <method signature="java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.FastBlurFilter"/>
        <method signature="int getRadius()" class="org.jdesktop.swingx.image.FastBlurFilter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.image.FastBlurFilter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicLookAndFeelAddons"/>
        <method signature="void initialize()" class="org.jdesktop.swingx.plaf.basic.BasicLookAndFeelAddons"/>
        <method signature="void uninitialize()" class="org.jdesktop.swingx.plaf.basic.BasicLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="javax.swing.plaf.BorderUIResource createBorder()"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void uninstallListeners(org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="java.awt.Insets getSeparatorInsets(java.awt.Insets)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="java.awt.LayoutManager createLayout()"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void installDefaults(org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void paintSeparator(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="boolean includeSeparators()" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="java.awt.event.MouseMotionListener createMouseMotionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void paintBackground(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void paint(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void uninstallDefaults(org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="int getSeparatorWidth()" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="java.awt.event.MouseListener createMouseListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="java.beans.PropertyChangeListener createPropertyChangeListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void installListeners(org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <field name="mouseListener" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <field name="AUTO_ADD_SEPARATOR" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <field name="mouseMotionListener" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <field name="statusBar" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <field name="propertyChangeListener" class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI"/>
        <class name="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor"/>
        <method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor"/>
        <method signature="java.lang.Object getCellEditorValue()"
                class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor"/>
        <method signature="boolean stopCellEditing()" class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.JComboBox)"
                class="org.jdesktop.swingx.autocomplete.ComboBoxCellEditor"/>
        <class name="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="int getIndexOfChild(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void setValueAt(java.lang.Object,java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.lang.Object getChild(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void removeTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="int getChildCount(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.lang.String getColumnName(int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="boolean isLeaf(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.lang.Object getValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.io.File getChild(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void addTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.lang.Object getRoot()" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.io.File getRoot()" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="boolean isCellEditable(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="java.lang.Class getColumnClass(int)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="javax.swing.event.TreeModelListener[] getTreeModelListeners()"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="void &lt;init&gt;(java.io.File)"
                class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <method signature="int getHierarchicalColumn()" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <field name="listenerList" class="org.jdesktop.swingx.treetable.SimpleFileSystemModel"/>
        <class name="org.jdesktop.beans.AbstractSerializableBean"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.beans.AbstractSerializableBean"/>
        <method signature="void &lt;init&gt;(java.beans.PropertyChangeSupport,java.beans.VetoableChangeSupport)"
                class="org.jdesktop.beans.AbstractSerializableBean"/>
        <class name="org.jdesktop.swingx.combobox.EnumComboBoxModel"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.combobox.EnumComboBoxModel"/>
        <method signature="void &lt;init&gt;(java.lang.Class)" class="org.jdesktop.swingx.combobox.EnumComboBoxModel"/>
        <class name="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void build()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void bind()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void showFoundMessage()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void initComponents()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void cancel()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void showNotFoundMessage()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void initExecutables()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXFindBar"/>
        <method signature="void addNotify()" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="previousBackgroundColor" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="notFoundForegroundColor" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="notFoundBackgroundColor" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="findNext" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="previousForegroundColor" class="org.jdesktop.swingx.JXFindBar"/>
        <field name="findPrevious" class="org.jdesktop.swingx.JXFindBar"/>
        <class name="org.jdesktop.swingx.decorator.PainterHighlighter$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter$1"/>
        <class name="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <method signature="org.jdesktop.swingx.painter.AbstractAreaPainter$Style[] values()"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <method signature="org.jdesktop.swingx.painter.AbstractAreaPainter$Style valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <field name="BOTH" class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <field name="OUTLINE" class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <field name="FILLED" class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <field name="NONE" class="org.jdesktop.swingx.painter.AbstractAreaPainter$Style"/>
        <class name="org.jdesktop.swingx.renderer.BooleanValue"/>
        <method signature="boolean getBoolean(java.lang.Object)" class="org.jdesktop.swingx.renderer.BooleanValue"/>
        <class name="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="void visit(org.jdesktop.swingx.hyperlink.LinkModel)"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="javax.swing.event.HyperlinkListener createHyperlinkListener()"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="org.jdesktop.swingx.JXEditorPane createDefaultEditorPane()"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="org.jdesktop.swingx.JXEditorPane getOutputComponent()"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="org.jdesktop.swingx.hyperlink.LinkModel getInternalLink()"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="void visitInternal(java.net.URL)"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="javax.swing.event.HyperlinkListener getHyperlinkListener()"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXEditorPane)"
                class="org.jdesktop.swingx.hyperlink.EditorPaneLinkVisitor"/>
        <class name="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <method signature="org.jdesktop.swingx.painter.CapsulePainter$Portion[] values()"
                class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <method signature="org.jdesktop.swingx.painter.CapsulePainter$Portion valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <field name="Right" class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <field name="Bottom" class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <field name="Top" class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <field name="Full" class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <field name="Left" class="org.jdesktop.swingx.painter.CapsulePainter$Portion"/>
        <class name="org.jdesktop.swingx.plaf.MultiThumbSliderUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.MultiThumbSliderUI"/>
        <class name="org.jdesktop.swingx.JXTree$2"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="org.jdesktop.swingx.JXTree$2"/>
        <class name="org.jdesktop.swingx.JXTree$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXTree$1"/>
        <class name="org.jdesktop.swingx.JXTree$3"/>
        <method signature="void editingStopped(javax.swing.event.ChangeEvent)" class="org.jdesktop.swingx.JXTree$3"/>
        <method signature="void editingCanceled(javax.swing.event.ChangeEvent)" class="org.jdesktop.swingx.JXTree$3"/>
        <class name="org.jdesktop.swingx.painter.effects.AreaEffect"/>
        <method signature="void apply(java.awt.Graphics2D,java.awt.Shape,int,int)"
                class="org.jdesktop.swingx.painter.effects.AreaEffect"/>
        <class name="org.jdesktop.swingx.multisplitpane.DefaultSplitPaneModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.multisplitpane.DefaultSplitPaneModel"/>
        <field name="BOTTOM" class="org.jdesktop.swingx.multisplitpane.DefaultSplitPaneModel"/>
        <field name="TOP" class="org.jdesktop.swingx.multisplitpane.DefaultSplitPaneModel"/>
        <field name="LEFT" class="org.jdesktop.swingx.multisplitpane.DefaultSplitPaneModel"/>
        <class name="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.util.regex.Pattern)" class="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.lang.String,int,boolean)" class="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.util.regex.Pattern,int)" class="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.lang.String)" class="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.lang.String,int)" class="org.jdesktop.swingx.search.Searchable"/>
        <method signature="int search(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.Searchable"/>
        <class name="org.jdesktop.swingx.util.WindowUtils$MinSizeComponentListener"/>
        <method signature="void resetSizes(int,int)"
                class="org.jdesktop.swingx.util.WindowUtils$MinSizeComponentListener"/>
        <method signature="void componentResized(java.awt.event.ComponentEvent)"
                class="org.jdesktop.swingx.util.WindowUtils$MinSizeComponentListener"/>
        <class name="org.jdesktop.swingx.error.ErrorReporter"/>
        <method signature="void reportError(org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.error.ErrorReporter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$PreviousTipAction"/>
        <method signature="boolean isEnabled()"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$PreviousTipAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$PreviousTipAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$PreviousTipAction"/>
        <class name="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="org.jdesktop.swingx.painter.AbstractPainter$Interpolation getInterpolation()"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void configureGraphics(java.awt.Graphics2D)"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setDirty(boolean)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setInterpolation(org.jdesktop.swingx.painter.AbstractPainter$Interpolation)"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setFilters(java.awt.image.BufferedImageOp[])"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="java.awt.image.BufferedImageOp[] getFilters()"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void validate(java.lang.Object)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void paint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="boolean isAntialiasing()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="boolean shouldUseCache()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setCacheable(boolean)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="boolean isDirty()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="boolean isCacheable()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void setAntialiasing(boolean)" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <method signature="void clearCache()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
        <class name="org.jdesktop.swingx.decorator.Highlighter"/>
        <method signature="javax.swing.event.ChangeListener[] getChangeListeners()"
                class="org.jdesktop.swingx.decorator.Highlighter"/>
        <method signature="void removeChangeListener(javax.swing.event.ChangeListener)"
                class="org.jdesktop.swingx.decorator.Highlighter"/>
        <method signature="void addChangeListener(javax.swing.event.ChangeListener)"
                class="org.jdesktop.swingx.decorator.Highlighter"/>
        <method signature="java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.Highlighter"/>
        <class name="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper$ListSelectionHandler"/>
        <method signature="void valueChanged(javax.swing.event.ListSelectionEvent)"
                class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper$ListSelectionHandler"/>
        <class name="org.jdesktop.swingx.renderer.IconValues"/>
        <field name="ICON" class="org.jdesktop.swingx.renderer.IconValues"/>
        <field name="FILE_ICON" class="org.jdesktop.swingx.renderer.IconValues"/>
        <field name="NONE" class="org.jdesktop.swingx.renderer.IconValues"/>
        <class name="org.jdesktop.swingx.hyperlink.LinkModelAction$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction$1"/>
        <class name="org.jdesktop.swingx.JXFrame$4"/>
        <class name="org.jdesktop.swingx.JXFrame$1"/>
        <method signature="void eventDispatched(java.awt.AWTEvent)" class="org.jdesktop.swingx.JXFrame$1"/>
        <class name="org.jdesktop.swingx.JXFrame$3"/>
        <method signature="void eventDispatched(java.awt.AWTEvent)" class="org.jdesktop.swingx.JXFrame$3"/>
        <class name="org.jdesktop.swingx.JXFrame$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXFrame$2"/>
        <class name="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="javax.swing.event.ChangeListener createHighlighterChangeListener()"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter,boolean)"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <method signature="javax.swing.event.ChangeListener getHighlighterChangeListener()"
                class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <field name="highlighters" class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <field name="EMPTY_HIGHLIGHTERS" class="org.jdesktop.swingx.decorator.CompoundHighlighter"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$ChangeAlphaListener"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$ChangeAlphaListener"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$ToggleAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXCollapsiblePane)"
                class="org.jdesktop.swingx.JXCollapsiblePane$ToggleAction"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXCollapsiblePane$ToggleAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXCollapsiblePane$ToggleAction"/>
        <method signature="void putValue(java.lang.String,java.lang.Object)"
                class="org.jdesktop.swingx.JXCollapsiblePane$ToggleAction"/>
        <class name="org.jdesktop.swingx.sort.TableSortController$StringValueBasedConverter"/>
        <method signature="java.lang.String toString(javax.swing.table.TableModel,int,int)"
                class="org.jdesktop.swingx.sort.TableSortController$StringValueBasedConverter"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="void setChooser(javax.swing.JColorChooser)"
                class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="void &lt;init&gt;(java.awt.Color)" class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <method signature="javax.swing.JColorChooser getChooser()" class="org.jdesktop.swingx.JXColorSelectionButton"/>
        <class name="org.jdesktop.swingx.JXTreeTable$Actions"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXTreeTable$Actions"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$AnimationListener"/>
        <method signature="void reinit(int,int)" class="org.jdesktop.swingx.JXCollapsiblePane$AnimationListener"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXCollapsiblePane$AnimationListener"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender"/>
        <method signature="org.jdesktop.swingx.graphics.BlendComposite$Blender getBlenderFor(org.jdesktop.swingx.graphics.BlendComposite)"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender"/>
        <method signature="void blend(int[],int[],int[])" class="org.jdesktop.swingx.graphics.BlendComposite$Blender"/>
        <class name="org.jdesktop.swingx.JXTitledSeparator$1"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTitledSeparator$1"/>
        <class name="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <method signature="java.awt.Point getFocusedCell()"
                class="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverRenderer getRolloverRenderer(java.awt.Point,boolean)"
                class="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <method signature="void rollover(java.awt.Point,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <method signature="boolean isClickable(java.awt.Point)"
                class="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.TableRolloverController"/>
        <class name="org.jdesktop.swingx.action.TargetableSupport"/>
        <method signature="boolean doCommand(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.action.TargetableSupport"/>
        <method signature="void &lt;init&gt;(javax.swing.JComponent)"
                class="org.jdesktop.swingx.action.TargetableSupport"/>
        <method signature="boolean hasCommand(java.lang.Object)" class="org.jdesktop.swingx.action.TargetableSupport"/>
        <method signature="java.lang.Object[] getCommands()" class="org.jdesktop.swingx.action.TargetableSupport"/>
        <class name="org.jdesktop.swingx.JXTreeTable$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTreeTable$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <method signature="void uninstallTarget()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <method signature="void installTarget()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <method signature="void updateFromTarget()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$ZoomOutAction"/>
        <class name="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;(double,double,double,double,double,double,double,int,double,int)"
                class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;(java.awt.geom.Point2D,java.awt.geom.Rectangle2D,double,int,double,int)"
                class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isTextPainted()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setTextPainted(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="int getMinorCountY()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="int getMinorCountX()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isOpaque()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMinorCountX(int)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setAxisPainted(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMinorCountY(int)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double xPixelToPosition(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.Color getMajorGridColor()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setEnabled(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.Color getAxisColor()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setupGraphics(java.awt.Graphics2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isGridPainted()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double yPixelToPosition(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double getMajorY()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double getMajorX()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void removeAllPlots()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMinorGridColor(java.awt.Color)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.Color getMinorGridColor()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double yPositionToPixel(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="double xPositionToPixel(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setOrigin(java.awt.geom.Point2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void paintExtra(java.awt.Graphics2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.geom.Rectangle2D getView()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setAxisColor(java.awt.Color)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setView(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void paintBackground(java.awt.Graphics2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;(java.awt.geom.Rectangle2D,double,int,double,int)"
                class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isBackgroundPainted()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setGridPainted(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setInputEnabled(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMajorGridColor(java.awt.Color)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isInputEnabled()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMajorY(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void addPlots(java.awt.Color,org.jdesktop.swingx.JXGraph$Plot[])"
                class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setMajorX(double)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="boolean isAxisPainted()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void resetView()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void &lt;init&gt;(java.awt.geom.Point2D,java.awt.geom.Rectangle2D)"
                class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setBackgroundPainted(boolean)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void setViewAndOrigin(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="java.awt.geom.Point2D getOrigin()" class="org.jdesktop.swingx.JXGraph"/>
        <method signature="void removePlots(org.jdesktop.swingx.JXGraph$Plot[])" class="org.jdesktop.swingx.JXGraph"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane$1"/>
        <class name="org.jdesktop.swingx.JXDatePicker$TodayPanel$TodayAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXDatePicker$TodayPanel$TodayAction"/>
        <class name="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void startOfDay(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isStartOfWeek(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isEndOfWeek(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void startOfMonth(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date endOfWeek(java.util.Calendar,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void endOfWeek(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date startOfDay(java.util.Calendar,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isStartOfDay(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isSameDay(java.util.Calendar,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isStartOfMonth(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void endOfMonth(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date endOfDay(java.util.Calendar,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void startOfWeek(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date getStartOfDST(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date startOfWeek(java.util.Calendar,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isEndOfDay(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void endOfDay(java.util.Calendar)" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean isEndOfMonth(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="java.util.Date getEndOfDST(java.util.Calendar)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <method signature="boolean areEqual(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <field name="THREE_HOURS" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <field name="ONE_HOUR" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <field name="ONE_MINUTE" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <field name="ONE_DAY" class="org.jdesktop.swingx.calendar.CalendarUtils"/>
        <class name="org.jdesktop.swingx.JXMultiThumbSlider$1"/>
        <class name="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createAlternateStriping(java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createSimpleStriping()"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createAlternateStriping()"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createSimpleStriping(java.awt.Color,int)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createAlternateStriping(int)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createSimpleStriping(java.awt.Color)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createAlternateStriping(java.awt.Color,java.awt.Color,int)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter createSimpleStriping(int)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="FLORAL_WHITE" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="LINE_PRINTER" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="QUICKSILVER" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="LEDGER" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="GENERIC_GRAY" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="CLASSIC_LINE_PRINTER" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="BEIGE" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <field name="NOTEPAD" class="org.jdesktop.swingx.decorator.HighlighterFactory"/>
        <class name="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void configureGraphics(java.awt.Graphics2D)"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="boolean isClipPreserved()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void setClipPreserved(boolean)" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.painter.Painter[])"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="java.awt.geom.AffineTransform getTransform()"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void setCheckingDirtyChildPainters(boolean)"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void validate(java.lang.Object)" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void setTransform(java.awt.geom.AffineTransform)"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="boolean shouldUseCache()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="org.jdesktop.swingx.painter.Painter[] getPainters()"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void setPainters(org.jdesktop.swingx.painter.Painter[])"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="boolean isDirty()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void clearLocalCache()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="boolean isCheckingDirtyChildPainters()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <method signature="void clearCache()" class="org.jdesktop.swingx.painter.CompoundPainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$DescriptionPane"/>
        <method signature="org.jdesktop.swingx.JXLabel$MultiLineSupport getMultiLineSupport()"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$DescriptionPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicHeaderUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$DescriptionPane"/>
        <method signature="void paint(java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.basic.BasicHeaderUI$DescriptionPane"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ContentPaneBorder"/>
        <method signature="java.awt.Insets getBorderInsets(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ContentPaneBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ContentPaneBorder"/>
        <method signature="boolean isBorderOpaque()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ContentPaneBorder"/>
        <method signature="void &lt;init&gt;(java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ContentPaneBorder"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton$ActionHandler"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXColorSelectionButton$ActionHandler"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="javax.swing.plaf.BorderUIResource createBorder()"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="int getSeparatorWidth()" class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="void paintSeparator(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="void paintBackground(java.awt.Graphics2D,org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicStatusBarUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame"/>
        <class name="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="void setPixels(java.awt.image.BufferedImage,int,int,int,int,int[])"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createCompatibleTranslucentImage(int,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage toCompatibleImage(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage loadCompatibleImage(java.net.URL)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="int[] getPixels(java.awt.image.BufferedImage,int,int,int,int,int[])"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage loadCompatibleImage(java.io.InputStream)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createThumbnailFast(java.awt.image.BufferedImage,int,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createThumbnail(java.awt.image.BufferedImage,int,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createColorModelCompatibleImage(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createCompatibleImage(int,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.Shape mergeClip(java.awt.Graphics,java.awt.Shape)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createThumbnailFast(java.awt.image.BufferedImage,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage createThumbnail(java.awt.image.BufferedImage,int)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <method signature="java.awt.image.BufferedImage convertToBufferedImage(java.awt.Image)"
                class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
        <class name="org.jdesktop.swingx.JXGraph$ZoomHandler"/>
        <method signature="void mouseWheelMoved(java.awt.event.MouseWheelEvent)"
                class="org.jdesktop.swingx.JXGraph$ZoomHandler"/>
        <class name="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void setUnselectableDates(java.util.SortedSet)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="java.util.SortedSet getUnselectableDates()"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void addSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void removeSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void &lt;init&gt;(java.util.Locale)" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode getSelectionMode()"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void setSelectionMode(org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void setSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="java.util.Date getFirstSelectionDate()"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="java.util.Date getLastSelectionDate()"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="java.util.SortedSet getSelection()" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="boolean isUnselectableDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="boolean isSelected(java.util.Date)" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="boolean isSelectionEmpty()" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="java.util.Date getNormalizedDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.DaySelectionModel"/>
        <class name="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="org.jdesktop.swingx.plaf.ErrorPaneUI getUI()" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="org.jdesktop.swingx.error.ErrorReporter getErrorReporter()"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void setErrorReporter(org.jdesktop.swingx.error.ErrorReporter)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="javax.swing.JInternalFrame createInternalFrame(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showInternalFrame(java.lang.Throwable)" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void setErrorInfo(org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showInternalFrame(java.awt.Component,org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="javax.swing.JFrame createFrame(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showInternalFrame(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showFrame(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="org.jdesktop.swingx.error.ErrorInfo getErrorInfo()" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showDialog(java.awt.Component,org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showFrame(java.awt.Component,org.jdesktop.swingx.error.ErrorInfo)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showDialog(java.awt.Component,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showFrame(java.lang.Throwable)" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void showDialog(java.lang.Throwable)" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.ErrorPaneUI)" class="org.jdesktop.swingx.JXErrorPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXErrorPane"/>
        <field name="REPORT_ACTION_KEY" class="org.jdesktop.swingx.JXErrorPane"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXErrorPane"/>
        <field name="FATAL_ACTION_KEY" class="org.jdesktop.swingx.JXErrorPane"/>
        <class name="org.jdesktop.swingx.treetable.TreeTableCellEditor"/>
        <method signature="boolean isCellEditable(java.util.EventObject)"
                class="org.jdesktop.swingx.treetable.TreeTableCellEditor"/>
        <method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
                class="org.jdesktop.swingx.treetable.TreeTableCellEditor"/>
        <method signature="void &lt;init&gt;(javax.swing.JTree)"
                class="org.jdesktop.swingx.treetable.TreeTableCellEditor"/>
        <method signature="void initEditorOffset(javax.swing.JTable,int,int,boolean)"
                class="org.jdesktop.swingx.treetable.TreeTableCellEditor"/>
        <class name="org.jdesktop.swingx.painter.RectanglePainter$1"/>
        <class name="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void updateRollover(java.awt.event.MouseEvent,java.lang.String,boolean)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void updateClientProperty(javax.swing.JComponent,java.lang.String,boolean)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <method signature="void updateRolloverPoint(javax.swing.JComponent,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <field name="CLICKED_KEY" class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <field name="ROLLOVER_KEY" class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <field name="rollover" class="org.jdesktop.swingx.rollover.RolloverProducer"/>
        <class name="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$Listener"/>
        <method signature="void popupMenuCanceled(javax.swing.event.PopupMenuEvent)"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$Listener"/>
        <method signature="void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent)"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$Listener"/>
        <method signature="void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent)"
                class="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$Listener"/>
        <class name="org.jdesktop.swingx.action.BoundAction$BooleanInvocationHandler"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.action.BoundAction,java.lang.Object,java.lang.String)"
                class="org.jdesktop.swingx.action.BoundAction$BooleanInvocationHandler"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.action.BoundAction$BooleanInvocationHandler"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompletePropertyChangeListener"/>
        <class name="org.jdesktop.swingx.JXImageView$5"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$5"/>
        <class name="org.jdesktop.swingx.JXImageView$6"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$6"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicThumbRenderer"/>
        <method signature="javax.swing.JComponent getThumbRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider,int,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicThumbRenderer"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicThumbRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$BasicThumbRenderer"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="IS_FOLDER" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="BIG_DECIMAL_NEGATIVE" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="EDITABLE" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="HAS_FOCUS" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="EMPTY_INTEGER_ARRAY" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="ALWAYS" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="INTEGER_NEGATIVE" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="ODD" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="EMPTY_OBJECT_ARRAY" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="EVEN" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="ROLLOVER_ROW" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="EMPTY_PREDICATE_ARRAY" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="NEVER" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="IS_LEAF" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <field name="READ_ONLY" class="org.jdesktop.swingx.decorator.HighlightPredicate"/>
        <class name="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$2"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$2"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$2"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$2"/>
        <class name="org.jdesktop.swingx.rollover.ListRolloverProducer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.ListRolloverProducer"/>
        <method signature="void updateRolloverPoint(javax.swing.JComponent,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.ListRolloverProducer"/>
        <class name="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void bind()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void findPrevious()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void initComponents()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void match()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void findNext()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void initExecutables()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void addNotify()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void doFind()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void updateLocaleState(java.util.Locale)" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void build()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void showFoundMessage()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="int doSearch()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void refreshEmptyFromModel()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void showNotFoundMessage()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void init()" class="org.jdesktop.swingx.JXFindPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXFindPanel"/>
        <field name="FIND_PREVIOUS_ACTION_COMMAND" class="org.jdesktop.swingx.JXFindPanel"/>
        <field name="wrapCheck" class="org.jdesktop.swingx.JXFindPanel"/>
        <field name="backCheck" class="org.jdesktop.swingx.JXFindPanel"/>
        <field name="FIND_NEXT_ACTION_COMMAND" class="org.jdesktop.swingx.JXFindPanel"/>
        <field name="searchable" class="org.jdesktop.swingx.JXFindPanel"/>
        <class name="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$3"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$3"/>
        <class name="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureFocusColors(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void setBackground(java.awt.Color)" class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureSizes(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="java.awt.Color getBackground(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureState(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureColors(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureVisuals(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void setForeground(java.awt.Color)" class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="java.awt.Color getForeground(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configureBorder(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <method signature="void configurePainter(javax.swing.JComponent,org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.DefaultVisuals"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$RepaintOnEventListener"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$RepaintOnEventListener"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$RepaintOnEventListener"/>
        <class name="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.color.EyeDropperColorChooserPanel$1"/>
        <class name="org.jdesktop.swingx.autocomplete.ObjectToStringConverter$1"/>
        <class name="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="int getPoints()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Shape getScaledDefaultPoint(int)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Color getHighlightColor()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setTrailLength(int)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setPoints(int)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="boolean isPaintCentered()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setPaintCentered(boolean)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setTrajectory(java.awt.Shape)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Shape getPointShape()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setFrame(int)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="int getTrailLength()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="int getFrame()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="org.jdesktop.swingx.JXBusyLabel$Direction getDirection()"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.geom.Point2D$Float getXY(float,java.awt.geom.Point2D$Float,java.awt.geom.Point2D$Float,java.awt.geom.Point2D$Float)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setBaseColor(java.awt.Color)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setDirection(org.jdesktop.swingx.JXBusyLabel$Direction)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Color getBaseColor()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setHighlightColor(java.awt.Color)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Shape getTrajectory()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void init(java.awt.Shape,java.awt.Shape,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="java.awt.Shape getScaledDefaultTrajectory(int)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Shape)"
                class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void setPointShape(java.awt.Shape)" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.BusyPainter"/>
        <class name="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="org.jdesktop.swingx.JXFindPanel getSharedFindPanel()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void releaseFindBar()" class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void showFindDialog(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void configureSharedFindPanel()" class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void configureSharedFindBar()" class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="boolean isUseFindBar(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void stopSearching()" class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void showFindBar(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="org.jdesktop.swingx.JXFindPanel createFindPanel()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="org.jdesktop.swingx.search.SearchFactory getInstance()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="java.awt.Point hideSharedFindPanel(boolean)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="org.jdesktop.swingx.JXFindBar getSharedFindBar()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void setUseFindBar(boolean)" class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void removeFromParent(javax.swing.JComponent)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void setInstance(org.jdesktop.swingx.search.SearchFactory)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void installFindRemover(java.awt.Container,java.awt.Container)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void showFindInput(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="javax.swing.KeyStroke getSearchAccelerator()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="org.jdesktop.swingx.JXFindBar createFindBar()"
                class="org.jdesktop.swingx.search.SearchFactory"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.SearchFactory"/>
        <field name="lastFindBarTarget" class="org.jdesktop.swingx.search.SearchFactory"/>
        <field name="findBar" class="org.jdesktop.swingx.search.SearchFactory"/>
        <field name="findPanel" class="org.jdesktop.swingx.search.SearchFactory"/>
        <class name="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$1"/>
        <class name="org.jdesktop.swingx.UIAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.UIAction"/>
        <method signature="boolean isEnabled(java.lang.Object)" class="org.jdesktop.swingx.UIAction"/>
        <method signature="java.lang.Object getValue(java.lang.String)" class="org.jdesktop.swingx.UIAction"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.UIAction"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.UIAction"/>
        <method signature="void setEnabled(boolean)" class="org.jdesktop.swingx.UIAction"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.UIAction"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.UIAction"/>
        <method signature="void putValue(java.lang.String,java.lang.Object)" class="org.jdesktop.swingx.UIAction"/>
        <class name="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getMonthStringForeground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionModel(org.jdesktop.swingx.calendar.DateSelectionModel)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionForeground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void cancelSelection()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.EventListener[] getListeners(java.lang.Class)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getFirstDisplayedDay()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setZoomable(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.lang.String getDayOfTheWeek(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getTodayBackground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void &lt;init&gt;(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getDayAtLocation(int,int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel getSelectionModel()"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void removeSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void addActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setFlaggedDates(java.util.Date[])" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isZoomable()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getFirstSelectionDate()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isUnselectableDate(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setComponentInputMapEnabled(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getLastDisplayedDay()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isSelectionEmpty()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getDayForeground(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean hasFlaggedDates()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setUnselectableDates(java.util.Date[])" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void commitSelection()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.SortedSet getFlaggedDates()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setBoxPaddingY(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setFirstDayOfWeek(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setBoxPaddingX(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isComponentInputMapEnabled()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getLastSelectionDate()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.SortedSet getSelection()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isTraversable()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isSelected(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setDaysOfTheWeekForeground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getToday()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setLowerBound(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.lang.String[] getDaysOfTheWeek()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getMonthStringBackground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getSelectionForeground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="org.jdesktop.swingx.plaf.MonthViewUI getUI()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setShowingTrailingDays(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setFirstDisplayedDay(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void clearFlaggedDates()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setTraversable(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getUpperBound()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getLowerBound()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.TimeZone getTimeZone()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getPerDayOfWeekForeground(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getDaysOfTheWeekForeground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void ensureDateVisible(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void removeFlaggedDates(java.util.Date[])" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getFlaggedDayForeground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void addSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void incrementToday()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void removeNotify()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getSelectionDate()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void updateTodayFromCurrentTime()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void addNotify()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void &lt;init&gt;(java.util.Date,org.jdesktop.swingx.calendar.DateSelectionModel,java.util.Locale)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Date getAnchorDate()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Insets getMonthStringInsets()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isShowingWeekNumber()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionBackground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setToday(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setMonthStringInsets(java.awt.Insets)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setDaysOfTheWeek(java.lang.String[])" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void addFlaggedDates(java.util.Date[])" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void &lt;init&gt;(java.util.Locale)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setPreferredRowCount(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isShowingTrailingDays()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionMode(org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setMonthStringBackground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isFlaggedDate(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.awt.Color getSelectionBackground()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void fireActionPerformed(java.lang.String)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="int getPreferredRowCount()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void &lt;init&gt;(java.util.Date,org.jdesktop.swingx.calendar.DateSelectionModel)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="int getPreferredColumnCount()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setShowingWeekNumber(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setShowingLeadingDays(boolean)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.MonthViewUI)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setTodayBackground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void updateDatesAfterTimeZoneChange(java.util.TimeZone)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void cleanupWeekSelectionDates(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setSelectionDate(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="boolean isShowingLeadingDays()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setDayForeground(int,java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="int getBoxPaddingY()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setUpperBound(java.util.Date)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="int getBoxPaddingX()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void removeActionListener(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode getSelectionMode()"
                class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setTimeZone(java.util.TimeZone)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setPreferredColumnCount(int)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setMonthStringForeground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="java.util.Calendar getCalendar()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="int getFirstDayOfWeek()" class="org.jdesktop.swingx.JXMonthView"/>
        <method signature="void setFlaggedDayForeground(java.awt.Color)" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="DAYS_OF_THE_WEEK" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="COMMIT_KEY" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="CANCEL_KEY" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="FLAGGED_DATES" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="modifiedEndDate" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="DAYS_IN_WEEK" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="SELECTION_MODEL" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="MONTHS_IN_YEAR" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="TRAVERSABLE" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="modifiedStartDate" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="BOX_PADDING_Y" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="BOX_PADDING_X" class="org.jdesktop.swingx.JXMonthView"/>
        <field name="_monthStringInsets" class="org.jdesktop.swingx.JXMonthView"/>
        <class name="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color setBrightness(java.awt.Color,float)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color interpolate(java.awt.Color,java.awt.Color,float)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Paint getCheckerPaint()" class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="void tileStretchPaint(java.awt.Graphics,javax.swing.JComponent,java.awt.image.BufferedImage,java.awt.Insets)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color blend(java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.lang.String toHexString(java.awt.Color)" class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Paint getCheckerPaint(java.awt.Color,java.awt.Color,int)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color setSaturation(java.awt.Color,float)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color removeAlpha(java.awt.Color)" class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color setAlpha(java.awt.Color,int)" class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="java.awt.Color computeForeground(java.awt.Color)"
                class="org.jdesktop.swingx.color.ColorUtil"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.color.ColorUtil"/>
        <class name="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI$MetalPaneBorder"/>
        <method signature="void paintExpandedControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI$MetalPaneBorder"/>
        <method signature="boolean isMouseOverBorder()"
                class="org.jdesktop.swingx.plaf.metal.MetalTaskPaneUI$MetalPaneBorder"/>
        <class name="org.jdesktop.swingx.JXGraph$DrawablePlot"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.JXGraph$DrawablePlot"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.JXGraph$DrawablePlot"/>
        <class name="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <method signature="void updateSelectedPathsFromSelectedRows()"
                class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <method signature="void resetRowSelection()"
                class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <method signature="javax.swing.event.ListSelectionListener createListSelectionListener()"
                class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <field name="updatingListSelectionModel"
               class="org.jdesktop.swingx.JXTreeTable$ListToTreeSelectionModelWrapper"/>
        <class name="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="int getEffectiveBlurRadius()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void &lt;init&gt;(float)" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="boolean isBlurEnabled()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void setOpacity(float)" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="float getLength()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="float getOpacity()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void setBlurEnabled(boolean)" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="int getBlurRadius()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="java.awt.image.BufferedImage appendReflection(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void setLength(float)" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="java.awt.image.BufferedImage createReflection(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void setBlurRadius(int)" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <method signature="void &lt;init&gt;(float,float,boolean)"
                class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <field name="OPACITY_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <field name="BLUR_ENABLED_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <field name="LENGTH_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ReflectionRenderer"/>
        <class name="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void forceShowOnStartup(java.util.prefs.Preferences)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void setModel(org.jdesktop.swingx.tips.TipOfTheDayModel)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.tips.TipOfTheDayModel)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="boolean showDialog(java.awt.Component,java.util.prefs.Preferences,boolean)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.TipOfTheDayUI)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="boolean showDialog(java.awt.Component,java.util.prefs.Preferences)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="boolean showDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="boolean showDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice,boolean)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="org.jdesktop.swingx.plaf.TipOfTheDayUI getUI()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void setCurrentTip(int)" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void showDialog(java.awt.Component)" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="int getCurrentTip()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="org.jdesktop.swingx.tips.TipOfTheDayModel getModel()"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void previousTip()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="boolean isShowingOnStartup(java.util.prefs.Preferences)"
                class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void nextTip()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <method signature="javax.swing.plaf.PanelUI getUI()" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <field name="PREFERENCE_KEY" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <field name="CURRENT_TIP_CHANGED_KEY" class="org.jdesktop.swingx.JXTipOfTheDay"/>
        <class name="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void paintBorderGlow(java.awt.Graphics2D,java.awt.Shape,int,int)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void setCenterColor(java.awt.Color)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="java.awt.Color getCenterColor()"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition getBorderPosition()"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void setEdgeColor(java.awt.Color)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void setBorderPosition(org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="java.awt.Color interpolateColor(float,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color,int)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="java.awt.Color getEdgeColor()" class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.NeonBorderEffect"/>
        <class name="org.jdesktop.swingx.JXImagePanel$1$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXImagePanel$1$1"/>
        <class name="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.util.regex.Pattern)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.lang.String,int,boolean)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.lang.String)" class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="boolean isEmpty(java.lang.String)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.lang.String,int)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="int search(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXEditorPane)"
                class="org.jdesktop.swingx.JXEditorPane$DocumentSearchable"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$NextTipAction"/>
        <method signature="boolean isEnabled()"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$NextTipAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$NextTipAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$NextTipAction"/>
        <class name="org.jdesktop.swingx.JXRadioGroup$1"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$CollapsiblePaneContainer"/>
        <method signature="java.awt.Container getValidatingContainer()"
                class="org.jdesktop.swingx.JXCollapsiblePane$CollapsiblePaneContainer"/>
        <class name="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void addAction(java.lang.String)" class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="java.util.List getActionIDs()" class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.action.CompositeAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.CompositeAction"/>
        <class name="org.jdesktop.swingx.JXLoginPane$Status"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status[] values()"
                class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <field name="CANCELLED" class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <field name="SUCCEEDED" class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <field name="FAILED" class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <field name="IN_PROGRESS" class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <field name="NOT_STARTED" class="org.jdesktop.swingx.JXLoginPane$Status"/>
        <class name="org.jdesktop.swingx.JXMultiThumbSlider$ThumbHandler"/>
        <method signature="void positionChanged(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbHandler"/>
        <method signature="void valueChanged(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbHandler"/>
        <method signature="void thumbRemoved(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbHandler"/>
        <method signature="void thumbAdded(org.jdesktop.swingx.multislider.ThumbDataEvent)"
                class="org.jdesktop.swingx.JXMultiThumbSlider$ThumbHandler"/>
        <class name="org.jdesktop.swingx.JXImageView$MoveHandler"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXImageView,org.jdesktop.swingx.JXImageView)"
                class="org.jdesktop.swingx.JXImageView$MoveHandler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImageView$MoveHandler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImageView$MoveHandler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImageView$MoveHandler"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane$DividerPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXMultiSplitPane$DividerPainter"/>
        <class name="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="void &lt;init&gt;(javax.swing.JList,javax.swing.text.JTextComponent,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="java.lang.Object getSelectedItem()" class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="void &lt;init&gt;(javax.swing.JList,javax.swing.text.JTextComponent)"
                class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="int getItemCount()" class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="java.lang.Object getItem(int)" class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="javax.swing.text.JTextComponent getTextComponent()"
                class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <method signature="void valueChanged(javax.swing.event.ListSelectionEvent)"
                class="org.jdesktop.swingx.autocomplete.ListAdaptor"/>
        <class name="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void &lt;init&gt;(java.net.URL)" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="java.awt.Image getImage()" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void setStyle(org.jdesktop.swingx.JXImagePanel$Style)"
                class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void setDefaultImage(java.awt.Image)" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void setImageLoader(java.util.concurrent.Callable)"
                class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="org.jdesktop.swingx.JXImagePanel$Style getStyle()" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXImagePanel"/>
        <method signature="void setImage(java.awt.Image)" class="org.jdesktop.swingx.JXImagePanel"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$WrapperContainer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXCollapsiblePane,java.awt.Container)"
                class="org.jdesktop.swingx.JXCollapsiblePane$WrapperContainer"/>
        <class name="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="void removeTarget(javax.swing.JComponent)"
                class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="void addTarget(javax.swing.JComponent)"
                class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.PainterGlasspane"/>
        <class name="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JPopupMenu createPopup(java.util.List)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JToolBar createToolBar(java.util.List)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JToolBar createToolBar(java.lang.Object[])"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenuItem createMenuItem(javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.AbstractButton createButton(javax.swing.Action,javax.swing.JComponent)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void configureButtonFromExtActionProperties(javax.swing.AbstractButton,javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenu createMenu(java.util.List)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void configureMenuItemFromExtActionProperties(javax.swing.JMenuItem,javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void setActionManager(org.jdesktop.swingx.action.ActionManager)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenuItem createMenuItem(javax.swing.Action,javax.swing.JComponent)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.AbstractButton createButton(java.lang.Object,javax.swing.JComponent)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenuBar createMenuBar(java.util.List)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="org.jdesktop.swingx.action.ActionManager getActionManager()"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenu createMenu(java.lang.Object[])"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void configureButton(javax.swing.JToggleButton,org.jdesktop.swingx.action.AbstractActionExt,javax.swing.ButtonGroup)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JPopupMenu createPopup(java.lang.Object[])"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.action.ActionManager)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void configureSelectableButton(javax.swing.AbstractButton,org.jdesktop.swingx.action.AbstractActionExt,javax.swing.ButtonGroup)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.JMenuBar createMenuBar(java.lang.Object[])"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <method signature="javax.swing.AbstractButton createButton(javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionContainerFactory"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicStatusBarUI$Handler"/>
        <class name="org.jdesktop.swingx.JXEditorPane$ParagraphSelector"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXEditorPane$ParagraphSelector"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXEditorPane)"
                class="org.jdesktop.swingx.JXEditorPane$ParagraphSelector"/>
        <class name="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip"/>
        <method signature="java.lang.Object getTip()" class="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip"/>
        <method signature="java.lang.String getTipName()" class="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip"/>
        <class name="org.jdesktop.swingx.JXTableHeader$1"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$2"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$3"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$3"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$4"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$4"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$1"/>
        <class name="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void &lt;init&gt;(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="boolean isScaleToFit()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="boolean isHorizontalRepeat()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setScaleType(org.jdesktop.swingx.painter.ImagePainter$ScaleType)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="org.jdesktop.swingx.painter.ImagePainter$ScaleType getScaleType()"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void &lt;init&gt;(java.net.URL)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void &lt;init&gt;(java.net.URL,org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment,org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void &lt;init&gt;(java.awt.image.BufferedImage,org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment,org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setVerticalRepeat(boolean)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="double getImageScale()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setHorizontalRepeat(boolean)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setImage(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="boolean isVerticalRepeat()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setScaleToFit(boolean)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setImageScale(double)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="java.awt.image.BufferedImage getImage()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="java.lang.String getImageString()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void setImageString(java.lang.String)" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.ImagePainter"/>
        <class name="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <method signature="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <method signature="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition[] values()"
                class="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <field name="Centered" class="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <field name="Outside" class="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <field name="Inside" class="org.jdesktop.swingx.painter.effects.NeonBorderEffect$BorderPosition"/>
        <class name="org.jdesktop.swingx.painter.AlphaPainter"/>
        <method signature="float getAlpha()" class="org.jdesktop.swingx.painter.AlphaPainter"/>
        <method signature="void setAlpha(float)" class="org.jdesktop.swingx.painter.AlphaPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.AlphaPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.AlphaPainter"/>
        <class name="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.String getFilteredStringAt(int,int)"
                class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="boolean isTestable(int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.String getString()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.String getColumnName(int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="javax.swing.table.TableColumn getColumnByModelIndex(int)"
                class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.String getStringAt(int,int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="int getRowCount()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.Object getValue()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="int modelToView(int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.Object getFilteredValueAt(int,int)"
                class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="org.jdesktop.swingx.JXTable getTable()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="int getColumnIndex(java.lang.Object)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="boolean hasFocus()" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="int viewToModel(int)" class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="java.lang.Object getColumnIdentifierAt(int)"
                class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.JXTable$TableAdapter"/>
        <class name="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean intersects(double,double,double,double)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean contains(java.awt.geom.Point2D)" class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean intersects(java.awt.geom.Rectangle2D)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="java.awt.geom.Rectangle2D getBounds2D()" class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean contains(double,double)" class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="java.awt.Rectangle getBounds()" class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean contains(double,double,double,double)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <method signature="boolean contains(java.awt.geom.Rectangle2D)"
                class="org.jdesktop.swingx.plaf.ShapeUIResource"/>
        <class name="org.jdesktop.swingx.tree.DefaultXTreeCellRenderer"/>
        <method signature="void updateIcons()" class="org.jdesktop.swingx.tree.DefaultXTreeCellRenderer"/>
        <method signature="void updateColors()" class="org.jdesktop.swingx.tree.DefaultXTreeCellRenderer"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.tree.DefaultXTreeCellRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.tree.DefaultXTreeCellRenderer"/>
        <class name="org.jdesktop.swingx.JXLabel$MultiLineSupport$BasicEditorKit"/>
        <method signature="javax.swing.text.Document createDefaultDocument(java.awt.Font,java.awt.Color,org.jdesktop.swingx.JXLabel$TextAlignment,float)"
                class="org.jdesktop.swingx.JXLabel$MultiLineSupport$BasicEditorKit"/>
        <method signature="javax.swing.text.ViewFactory getViewFactory()"
                class="org.jdesktop.swingx.JXLabel$MultiLineSupport$BasicEditorKit"/>
        <class name="org.jdesktop.swingx.tips.TipLoader"/>
        <method signature="org.jdesktop.swingx.tips.TipOfTheDayModel load(java.util.Properties)"
                class="org.jdesktop.swingx.tips.TipLoader"/>
        <class name="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean intersects(org.jdesktop.swingx.calendar.DateSpan)"
                class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="long getStart()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean contains(long)" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean contains(long,long)" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="void &lt;init&gt;(long,long)" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="java.util.Date getStartAsDate()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="org.jdesktop.swingx.calendar.DateSpan add(org.jdesktop.swingx.calendar.DateSpan)"
                class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="java.util.Date getEndAsDate()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="org.jdesktop.swingx.calendar.DateSpan add(long,long)"
                class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="void &lt;init&gt;(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean intersects(long,long)" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="long getEnd()" class="org.jdesktop.swingx.calendar.DateSpan"/>
        <method signature="boolean contains(org.jdesktop.swingx.calendar.DateSpan)"
                class="org.jdesktop.swingx.calendar.DateSpan"/>
        <class name="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="void paint(java.awt.Graphics,java.awt.Shape)" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="int getHeight()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="javax.swing.text.Document getDocument()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="javax.swing.text.View getView(int)" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="javax.swing.text.AttributeSet getAttributes()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="int getWidth()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="int getViewCount()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="float getPreferredSpan(int)" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="java.awt.Container getContainer()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="void preferenceChanged(javax.swing.text.View,boolean,boolean)"
                class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="void updateLayout(javax.swing.event.DocumentEvent$ElementChange,javax.swing.event.DocumentEvent,java.awt.Shape)"
                class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="void setParent(javax.swing.text.View)" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="void setSize(float,float)" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <method signature="javax.swing.text.ViewFactory getViewFactory()" class="org.jdesktop.swingx.JXLabel$Renderer"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI$1"/>
        <class name="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <method signature="java.lang.String createRegEx(java.lang.String)"
                class="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <method signature="boolean isAutoDetect()" class="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <method signature="boolean isEndAnchored()" class="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <method signature="boolean isStartAnchored()"
                class="org.jdesktop.swingx.search.PatternModel$AnchoredSearchMode"/>
        <class name="org.jdesktop.swingx.TranslucentRepaintManager"/>
        <class name="org.jdesktop.swingx.decorator.ShadingColorHighlighter"/>
        <method signature="void applyBackground(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.ShadingColorHighlighter"/>
        <method signature="java.awt.Color computeBackgroundSeed(java.awt.Color)"
                class="org.jdesktop.swingx.decorator.ShadingColorHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.ShadingColorHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.ShadingColorHighlighter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <method signature="void &lt;init&gt;(java.lang.String)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <method signature="void &lt;init&gt;(javax.swing.Action)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <method signature="void setGroup(org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton[])"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <method signature="java.awt.Dimension getPreferredSize()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$EqualSizeJButton"/>
        <class name="org.jdesktop.swingx.JXDialog$1"/>
        <method signature="java.awt.Dimension getMaximumSize()" class="org.jdesktop.swingx.JXDialog$1"/>
        <class name="org.jdesktop.swingx.auth.JAASLoginService"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <method signature="boolean authenticate(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <method signature="javax.security.auth.Subject getSubject()" class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <method signature="javax.security.auth.login.LoginContext getLoginContext()"
                class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <field name="loginContext" class="org.jdesktop.swingx.auth.JAASLoginService"/>
        <class name="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setTitle(java.lang.String)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="int getHorizontalTextPosition()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void &lt;init&gt;(java.lang.String,int)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="java.awt.ComponentOrientation getComponentOrientation()"
                class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setHorizontalTextPosition(int)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setForeground(java.awt.Color)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void &lt;init&gt;(java.lang.String,int,javax.swing.Icon)"
                class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="int getHorizontalAlignment()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void updateTitle()" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <method signature="void setHorizontalAlignment(int)" class="org.jdesktop.swingx.JXTitledSeparator"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicEditorKit"/>
        <method signature="javax.swing.text.html.StyleSheet getStyleSheet()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicEditorKit"/>
        <method signature="javax.swing.text.ViewFactory getViewFactory()"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicEditorKit"/>
        <method signature="javax.swing.text.Document createDefaultDocument(java.awt.Font,java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicEditorKit"/>
        <class name="org.jdesktop.swingx.JXTable"/>
        <method signature="java.lang.String getUIString(java.lang.String)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.TableColumn getColumn(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void columnAdded(javax.swing.event.TableColumnModelEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void columnPropertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void packColumn(int,int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSelectionForeground(java.awt.Color)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean getSortsOnUpdates()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setShowGrid(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateColumnUI(javax.swing.table.TableColumn)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.sort.StringValueRegistry createDefaultStringValueRegistry()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setTerminateEditOnFocusLost(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.TableCellRenderer getCellRenderer(int,int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setValueAt(java.lang.Object,int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void createDefaultEditors()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="int getSelectionMode()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void toggleSortOrder(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.lang.String getStringAt(int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSortsOnUpdates(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.JComponent createDefaultColumnControl()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateHorizontalAction()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(javax.swing.table.TableModel,javax.swing.table.TableColumnModel)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void scrollCellToVisible(int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(javax.swing.table.TableModel,javax.swing.table.TableColumnModel,javax.swing.ListSelectionModel)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean getAutoCreateRowSorter()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setFillsViewportHeight(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void configureEnclosingScrollPane()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.event.ChangeListener getHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnFactory(org.jdesktop.swingx.table.ColumnFactory)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.util.List getColumns(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setAutoCreateRowSorter(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setRowHeightEnabled(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnSequence(java.lang.Object[])" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnMargin(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void removeEditor()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void configureSorterProperties()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void initializeColumnWidths()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isFocusCycleRoot()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isTerminateEditOnFocusLost()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void toggleSortOrder(java.lang.Object)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnControlVisible(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isUpdate(javax.swing.event.TableModelEvent)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void createDefaultRenderers()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(java.lang.Object[][],java.lang.Object[])"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void configureColumnControl()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void scrollRowToVisible(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean editCellAt(int,int,java.util.EventObject)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(java.util.Vector,java.util.Vector)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void columnSelectionChanged(javax.swing.event.ListSelectionEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isDataChanged(javax.swing.event.TableModelEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.table.ColumnFactory getColumnFactory()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSearchable(org.jdesktop.swingx.search.Searchable)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateLocaleActionState(java.lang.String,java.util.Locale)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void unconfigureColumnControl()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setHorizontalScrollEnabled(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void transferFocus()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void unconfigureEnclosingScrollPane()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.TableColumnModel createDefaultColumnModel()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void createDefaultColumnsFromModel()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void transferFocusBackward()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.rollover.TableRolloverController createLinkController()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isSortable(java.lang.Object)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.RowSorter createDefaultRowSorter()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.JTableHeader createDefaultTableHeader()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isHorizontalScrollEnabled()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void initializeColumnPreferredWidth(javax.swing.table.TableColumn)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.JComponent getColumnControl()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void removeNotify()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.search.Searchable getSearchable()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setRowSorter(javax.swing.RowSorter)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setRowHeight(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean getScrollableTracksViewportWidth()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void doFind()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.SortOrder getSortOrder(java.lang.Object)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isRowHeightEnabled()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSelectionBackground(java.awt.Color)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.TableColumn getSortedColumn()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setAutoResizeMode(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int,int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.util.List getColumns()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void columnMarginChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateColumnControlUI()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="int getVisibleRowCount()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.SortOrder getSortOrder(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isAutoStartEditOnKeyStroke()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void scrollColumnToVisible(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setVisibleColumnCount(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.table.TableCellRenderer getNewDefaultRenderer(java.lang.Class)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void resetDefaultTableCellRendererColors(java.awt.Component,int,int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isColumnControlVisible()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void &lt;init&gt;(javax.swing.table.TableModel)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void packTable(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="int getColumnCount(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.awt.Dimension getPreferredScrollableViewportSize()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateRowHeightUI(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isRolloverEnabled()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void packSelected()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setAutoStartEditOnKeyStroke(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void packColumn(int,int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSortOrder(java.lang.Object,javax.swing.SortOrder)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setGridColor(java.awt.Color)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnModel(javax.swing.table.TableColumnModel)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateHighlighterUI()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void updateLocaleState(java.util.Locale)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setRolloverEnabled(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setVisibleRowCount(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean getAutoCreateColumnsFromModel()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSortable(boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isSortable()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isSortable(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setColumnControl(javax.swing.JComponent)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="javax.swing.event.ChangeListener createHighlighterChangeListener()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.awt.Component prepareEditor(javax.swing.table.TableCellEditor,int,int)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.rollover.TableRolloverController getLinkController()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="java.lang.String getUIString(java.lang.String,java.util.Locale)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.sort.SortController getSortController()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void resetSortOrder()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void doLayout()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void tableChanged(javax.swing.event.TableModelEvent)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setPreferredScrollableViewportSize(java.awt.Dimension)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="int getVisibleColumnCount()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="boolean isStructureChanged(javax.swing.event.TableModelEvent)"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])"
                class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setShowGrid(boolean,boolean)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="int rowAtPoint(java.awt.Point)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void adjustComponentOrientation(java.awt.Component)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void packAll()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="int getColumnMargin()" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void adminSetRowHeight(int)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setSortOrder(int,javax.swing.SortOrder)" class="org.jdesktop.swingx.JXTable"/>
        <method signature="void setModel(javax.swing.table.TableModel)" class="org.jdesktop.swingx.JXTable"/>
        <field name="HORIZONTALSCROLL_ACTION_COMMAND" class="org.jdesktop.swingx.JXTable"/>
        <field name="FOCUS_PREVIOUS_COMPONENT" class="org.jdesktop.swingx.JXTable"/>
        <field name="compoundHighlighter" class="org.jdesktop.swingx.JXTable"/>
        <field name="dataAdapter" class="org.jdesktop.swingx.JXTable"/>
        <field name="PACKSELECTED_ACTION_COMMAND" class="org.jdesktop.swingx.JXTable"/>
        <field name="PACKALL_ACTION_COMMAND" class="org.jdesktop.swingx.JXTable"/>
        <field name="editorRemover" class="org.jdesktop.swingx.JXTable"/>
        <field name="USE_DTCR_COLORMEMORY_HACK" class="org.jdesktop.swingx.JXTable"/>
        <field name="UIPREFIX" class="org.jdesktop.swingx.JXTable"/>
        <field name="FOCUS_NEXT_COMPONENT" class="org.jdesktop.swingx.JXTable"/>
        <field name="MATCH_HIGHLIGHTER" class="org.jdesktop.swingx.JXTable"/>
        <field name="resetDefaultTableCellRendererHighlighter" class="org.jdesktop.swingx.JXTable"/>
        <field name="isXTableRowHeightSet" class="org.jdesktop.swingx.JXTable"/>
        <field name="searchable" class="org.jdesktop.swingx.JXTable"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$BlendingContext"/>
        <method signature="void dispose()" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingContext"/>
        <field name="blender" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingContext"/>
        <field name="composite" class="org.jdesktop.swingx.graphics.BlendComposite$BlendingContext"/>
        <class name="org.jdesktop.swingx.error.ErrorLevel"/>
        <method signature="void &lt;init&gt;(java.lang.String,int)" class="org.jdesktop.swingx.error.ErrorLevel"/>
        <field name="FATAL" class="org.jdesktop.swingx.error.ErrorLevel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <field name="slider" class="org.jdesktop.swingx.plaf.basic.BasicMultiThumbSliderUI"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException"/>
        <method signature="void &lt;init&gt;(java.lang.String,org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getNode()"
                class="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException"/>
        <class name="org.jdesktop.swingx.calendar.DefaultDateSelectionModel$1"/>
        <class name="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void setOverrulesActionOnClick(boolean)" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)"
                class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void configurePropertiesFromAction(javax.swing.Action)"
                class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="java.awt.Color getClickedColor()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="java.awt.Color getUnclickedColor()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void setUnclickedColor(java.awt.Color)" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="boolean isAutoSetClicked()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="boolean getOverrulesActionOnClick()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void &lt;init&gt;(javax.swing.Action)" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void fireActionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void setClicked(boolean)" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="boolean isClicked()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXHyperlink"/>
        <method signature="void setClickedColor(java.awt.Color)" class="org.jdesktop.swingx.JXHyperlink"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXHyperlink"/>
        <class name="org.jdesktop.swingx.JXImageView$3"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$3"/>
        <class name="org.jdesktop.swingx.JXImageView$4"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$4"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$DeleteThumbAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXGradientChooser)"
                class="org.jdesktop.swingx.JXGradientChooser$DeleteThumbAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXGradientChooser$DeleteThumbAction"/>
        <class name="org.jdesktop.swingx.JXImageView$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$1"/>
        <class name="org.jdesktop.swingx.JXImageView$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXImageView$2"/>
        <class name="org.jdesktop.swingx.JXTable$CellEditorRemover"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTable$CellEditorRemover"/>
        <method signature="void uninstall()" class="org.jdesktop.swingx.JXTable$CellEditorRemover"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.JXTable$CellEditorRemover"/>
        <class name="org.jdesktop.swingx.painter.GlossPainter$GlossPosition"/>
        <method signature="org.jdesktop.swingx.painter.GlossPainter$GlossPosition[] values()"
                class="org.jdesktop.swingx.painter.GlossPainter$GlossPosition"/>
        <method signature="org.jdesktop.swingx.painter.GlossPainter$GlossPosition valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.GlossPainter$GlossPosition"/>
        <field name="BOTTOM" class="org.jdesktop.swingx.painter.GlossPainter$GlossPosition"/>
        <field name="TOP" class="org.jdesktop.swingx.painter.GlossPainter$GlossPosition"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ResizeWindow"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ResizeWindow"/>
        <class name="org.jdesktop.swingx.plaf.ComponentAddon"/>
        <method signature="void initialize(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.ComponentAddon"/>
        <method signature="void uninitialize(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.ComponentAddon"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.plaf.ComponentAddon"/>
        <class name="org.jdesktop.swingx.JXHeader$IconPosition"/>
        <method signature="org.jdesktop.swingx.JXHeader$IconPosition[] values()"
                class="org.jdesktop.swingx.JXHeader$IconPosition"/>
        <method signature="org.jdesktop.swingx.JXHeader$IconPosition valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXHeader$IconPosition"/>
        <field name="RIGHT" class="org.jdesktop.swingx.JXHeader$IconPosition"/>
        <field name="LEFT" class="org.jdesktop.swingx.JXHeader$IconPosition"/>
        <class name="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void bind()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void initComponents()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void setFieldName(java.lang.String)" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void match()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void updateFieldName(org.jdesktop.swingx.decorator.PatternMatcher)"
                class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="java.util.regex.Pattern getPattern()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void initExecutables()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void updateMatchRule()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void addPatternMatcher(org.jdesktop.swingx.decorator.PatternMatcher)"
                class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="java.lang.String getFieldName()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXSearchPanel"/>
        <field name="MATCH_RULE_ACTION_COMMAND" class="org.jdesktop.swingx.JXSearchPanel"/>
        <class name="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,javax.swing.Icon)"
                class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="boolean canHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.IconHighlighter"/>
        <class name="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode valueOf(java.lang.String)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode[] values()"
                class="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <field name="SINGLE_SELECTION" class="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <field name="SINGLE_INTERVAL_SELECTION" class="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <field name="MULTIPLE_INTERVAL_SELECTION"
               class="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode"/>
        <class name="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="java.lang.Object getValue(java.lang.Object)"
                class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="void &lt;init&gt;(java.util.Map)" class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="java.lang.Object getValue(int)" class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <field name="map_data" class="org.jdesktop.swingx.combobox.MapComboBoxModel"/>
        <class name="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="javax.swing.JLabel createRendererComponent()"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="javax.swing.JComponent createRendererComponent()"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void format(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void configureState(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.LabelProvider"/>
        <class name="org.jdesktop.swingx.JXDatePicker$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXDatePicker$1"/>
        <class name="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.util.Properties)"
                class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="boolean authenticate(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void setUrl(java.lang.String)" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void setProperties(java.util.Properties)" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="java.sql.Connection getConnection()" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="java.lang.String getUrl()" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void setConnection(java.sql.Connection)" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="java.util.Properties getProperties()" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.JDBCLoginService"/>
        <class name="org.jdesktop.swingx.JXPanel"/>
        <method signature="int getScrollableUnitIncrement(java.awt.Rectangle,int,int)"
                class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setInheritAlpha(boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setBackground(java.awt.Color)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="boolean getScrollableTracksViewportHeight()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="boolean isPaintBorderInsets()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setScrollableTracksViewportWidth(boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="boolean getScrollableTracksViewportWidth()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setAlpha(float)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getBackgroundPainter()"
                class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setScrollableTracksViewportHeight(boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="float getAlpha()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXPanel"/>
        <method signature="boolean isInheritAlpha()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void paint(java.awt.Graphics)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void &lt;init&gt;(java.awt.LayoutManager)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void &lt;init&gt;(java.awt.LayoutManager,boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="int getScrollableBlockIncrement(java.awt.Rectangle,int,int)"
                class="org.jdesktop.swingx.JXPanel"/>
        <method signature="float getEffectiveAlpha()" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void setPaintBorderInsets(boolean)" class="org.jdesktop.swingx.JXPanel"/>
        <method signature="java.awt.Dimension getPreferredScrollableViewportSize()"
                class="org.jdesktop.swingx.JXPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXPanel"/>
        <class name="org.jdesktop.swingx.JXLabel$BasicDocument"/>
        <class name="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getZoomOutAction()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setExportName(java.lang.String)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImageLocation(java.awt.geom.Point2D)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getRotateClockwiseAction()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getZoomInAction()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.lang.String getExportName()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getRotateCounterClockwiseAction()"
                class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImage(java.io.File)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImage(java.awt.Image)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="double getScale()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getOpenAction()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setScale(double)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="boolean isDragEnabled()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImage(java.net.URL)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.awt.geom.Point2D getImageLocation()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setDragEnabled(boolean)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.awt.Image getImage()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImageURL(java.net.URL)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setExportFormat(java.lang.String)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void removeErrorListener(org.jdesktop.swingx.error.ErrorListener)"
                class="org.jdesktop.swingx.JXImageView"/>
        <method signature="javax.swing.Action getSaveAction()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.lang.String getImageString()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void setImageString(java.lang.String)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void addErrorListener(org.jdesktop.swingx.error.ErrorListener)"
                class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.net.URL getImageURL()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="java.lang.String getExportFormat()" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void fireError(java.lang.Throwable)" class="org.jdesktop.swingx.JXImageView"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXImageView"/>
        <class name="org.jdesktop.swingx.JXEditorPane$Actions"/>
        <method signature="boolean isEnabled(java.lang.Object)" class="org.jdesktop.swingx.JXEditorPane$Actions"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXEditorPane$Actions"/>
        <class name="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <method signature="void &lt;init&gt;(java.lang.Object,org.jdesktop.swingx.event.DateSelectionEvent$EventType,boolean)"
                class="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <method signature="java.util.SortedSet getSelection()" class="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <method signature="org.jdesktop.swingx.event.DateSelectionEvent$EventType getEventType()"
                class="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <method signature="boolean isAdjusting()" class="org.jdesktop.swingx.event.DateSelectionEvent"/>
        <class name="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="boolean authenticate(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void startAuthentication(java.lang.String,char[],java.lang.String)"
                class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void setServer(java.lang.String)" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="java.lang.String getServer()" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="boolean getSynchronous()" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void setSynchronous(boolean)" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void addLoginListener(org.jdesktop.swingx.auth.LoginListener)"
                class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void removeLoginListener(org.jdesktop.swingx.auth.LoginListener)"
                class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="java.lang.String[] getUserRoles()" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void cancelAuthentication()" class="org.jdesktop.swingx.auth.LoginService"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.LoginService"/>
        <class name="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void addSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setFirstDayOfWeek(int)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Date getLastSelectionDate()"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.SortedSet getSelection()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Locale getLocale()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="boolean isSelected(java.util.Date)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setLowerBound(java.util.Date)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setUnselectableDates(java.util.SortedSet)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setUpperBound(java.util.Date)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.SortedSet getUnselectableDates()"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setAdjusting(boolean)" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void removeSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode getSelectionMode()"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Date getUpperBound()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void removeDateSelectionListener(org.jdesktop.swingx.event.DateSelectionListener)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Date getLowerBound()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setTimeZone(java.util.TimeZone)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setSelectionMode(org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.TimeZone getTimeZone()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Date getFirstSelectionDate()"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="int getMinimalDaysInFirstWeek()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="boolean isUnselectableDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void addDateSelectionListener(org.jdesktop.swingx.event.DateSelectionListener)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="boolean isSelectionEmpty()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Calendar getCalendar()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="java.util.Date getNormalizedDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="void setMinimalDaysInFirstWeek(int)"
                class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="int getFirstDayOfWeek()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <method signature="boolean isAdjusting()" class="org.jdesktop.swingx.calendar.DateSelectionModel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintFocus(java.awt.Graphics,java.awt.Color,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintTitleBackground(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintExpandedControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="java.awt.Dimension getPreferredSize(org.jdesktop.swingx.JXTaskPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintChevronControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="boolean isMouseOverBorder()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="java.awt.Insets getBorderInsets(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="java.awt.Color getPaintColor(org.jdesktop.swingx.JXTaskPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintTitle(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,java.awt.Color,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void configureLabel(org.jdesktop.swingx.JXTaskPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintOvalAroundControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="boolean isBorderOpaque()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <method signature="void paintRectAroundControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="specialTitleBackground" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="specialTitleOver" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="borderColor" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="titleOver" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="titleBackgroundGradientStart" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="label" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="specialTitleForeground" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="titleBackgroundGradientEnd" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <field name="titleForeground" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$PaneBorder"/>
        <class name="org.jdesktop.swingx.renderer.MappedValue"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.MappedValue"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.BooleanValue)"
                class="org.jdesktop.swingx.renderer.MappedValue"/>
        <method signature="boolean getBoolean(java.lang.Object)" class="org.jdesktop.swingx.renderer.MappedValue"/>
        <method signature="javax.swing.Icon getIcon(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.MappedValue"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue)"
                class="org.jdesktop.swingx.renderer.MappedValue"/>
        <class name="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="int getIterations()" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="int getRadius()" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="int getEffectiveRadius()" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <method signature="void &lt;init&gt;(int,int)" class="org.jdesktop.swingx.image.StackBlurFilter"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <method signature="void setName(java.lang.String)" class="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$Leaf"/>
        <class name="org.jdesktop.swingx.painter.effects.ShadowPathEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.ShadowPathEffect"/>
        <class name="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="void setEditable(boolean)" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="java.lang.String getUserName()" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="void setEnabled(boolean)" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <method signature="void setUserName(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane$NameComponent"/>
        <class name="org.jdesktop.swingx.JXGradientChooser"/>
        <method signature="java.awt.MultipleGradientPaint showDialog(java.awt.Component,java.lang.String,java.awt.MultipleGradientPaint)"
                class="org.jdesktop.swingx.JXGradientChooser"/>
        <method signature="java.awt.MultipleGradientPaint getGradient()" class="org.jdesktop.swingx.JXGradientChooser"/>
        <method signature="void setGradient(java.awt.MultipleGradientPaint)"
                class="org.jdesktop.swingx.JXGradientChooser"/>
        <method signature="java.lang.String toString(java.awt.MultipleGradientPaint)"
                class="org.jdesktop.swingx.JXGradientChooser"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXGradientChooser"/>
        <class name="org.jdesktop.swingx.JXEditorPane$ParagraphSelector$ParagraphRenderer"/>
        <method signature="java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)"
                class="org.jdesktop.swingx.JXEditorPane$ParagraphSelector$ParagraphRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXEditorPane$ParagraphSelector)"
                class="org.jdesktop.swingx.JXEditorPane$ParagraphSelector$ParagraphRenderer"/>
        <class name="org.jdesktop.swingx.painter.ImagePainter$1"/>
        <class name="org.jdesktop.swingx.image.GaussianBlurFilter"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.image.GaussianBlurFilter"/>
        <method signature="java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.image.GaussianBlurFilter"/>
        <method signature="int getRadius()" class="org.jdesktop.swingx.image.GaussianBlurFilter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.image.GaussianBlurFilter"/>
        <class name="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void removeAll()" class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void addVisibilityActionItems(java.util.List)"
                class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void addAdditionalActionItems(java.util.List)"
                class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void toggleVisibility(javax.swing.JComponent)"
                class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void applyComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.table.ColumnControlPopup"/>
        <class name="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)"
                class="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <method signature="void addColumnModelListener(javax.swing.event.TableColumnModelListener)"
                class="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <method signature="int getColumnCount(boolean)" class="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <method signature="java.util.List getColumns(boolean)" class="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)"
                class="org.jdesktop.swingx.table.TableColumnModelExt"/>
        <class name="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void removeThumbDataListener(org.jdesktop.swingx.multislider.ThumbDataListener)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="int getThumbCount()" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void setMinimumValue(float)" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="float getMinimumValue()" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="org.jdesktop.swingx.multislider.Thumb getThumbAt(int)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void insertThumb(float,java.lang.Object,int)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="java.util.List getSortedThumbs()" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void thumbPositionChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="int addThumb(float,java.lang.Object)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="float getMaximumValue()" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void removeThumb(int)" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void thumbValueChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void addThumbDataListener(org.jdesktop.swingx.multislider.ThumbDataListener)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="void setMaximumValue(float)" class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <method signature="int getThumbIndex(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.MultiThumbModel"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$DepthHighlightPredicate"/>
        <method signature="void &lt;init&gt;(int[])"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$DepthHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$DepthHighlightPredicate"/>
        <method signature="java.lang.Integer[] getDepths()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$DepthHighlightPredicate"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$BlendingRgbContext"/>
        <method signature="void compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)"
                class="org.jdesktop.swingx.graphics.BlendComposite$BlendingRgbContext"/>
        <class name="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="int getNumCoords()" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="int getWindingRule()" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="double[] getTvals()" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="double getCoord(int)" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="void setTvals(double[])" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
        <class name="org.jdesktop.swingx.tree.DefaultXTreeCellEditor$XEditorContainer"/>
        <method signature="void paint(java.awt.Graphics)"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor$XEditorContainer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.tree.DefaultXTreeCellEditor)"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor$XEditorContainer"/>
        <method signature="java.awt.Dimension getPreferredSize()"
                class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor$XEditorContainer"/>
        <method signature="void doLayout()" class="org.jdesktop.swingx.tree.DefaultXTreeCellEditor$XEditorContainer"/>
        <class name="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="int getGap()" class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void setGap(int)" class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.HorizontalLayout"/>
        <method signature="void layoutContainer(java.awt.Container)" class="org.jdesktop.swingx.HorizontalLayout"/>
        <class name="org.jdesktop.swingx.JXTaskPane$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTaskPane$1"/>
        <class name="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void setRoundHeight(int)" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(int,int,int,int,int,int)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="boolean isRounded()" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="java.awt.geom.RectangularShape calculateShape(int,int)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Insets,int,int,int,int,boolean,java.awt.Paint,float,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void setRounded(boolean)" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(int,int,int,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void setRoundWidth(int)" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint,float,org.jdesktop.swingx.painter.AbstractAreaPainter$Style)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(int,int,int,int,int,int,boolean,java.awt.Paint,float,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="int getRoundWidth()" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="int getRoundHeight()" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <method signature="void &lt;init&gt;(int,int,int,int)" class="org.jdesktop.swingx.painter.RectanglePainter"/>
        <class name="org.jdesktop.swingx.renderer.TreeCellContext$TreeFocusBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.renderer.TreeCellContext$TreeFocusBorder"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.TreeCellContext)"
                class="org.jdesktop.swingx.renderer.TreeCellContext$TreeFocusBorder"/>
        <method signature="boolean isBorderOpaque()"
                class="org.jdesktop.swingx.renderer.TreeCellContext$TreeFocusBorder"/>
        <class name="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <method signature="boolean set(java.lang.String,java.lang.String,char[])"
                class="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <method signature="void removeUserPassword(java.lang.String)"
                class="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <method signature="char[] get(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.JXLoginPane$NullPasswordStore"/>
        <class name="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="void setTip(java.lang.Object)" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="void setTipName(java.lang.String)" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.Object)"
                class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="java.lang.Object getTip()" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="java.lang.String getTipName()" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.tips.DefaultTip"/>
        <class name="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.util.regex.Pattern)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.lang.String)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="javax.swing.JComponent getTarget()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean isEqualPattern(java.util.regex.Pattern)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult createSearchResult(java.util.regex.Matcher,int,int)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int adjustStartPosition(int,boolean)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.AbstractHighlighter getMatchHighlighter()"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int convertColumnIndexToModel(int)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean isTrivialNoMatch(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int doSearch(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void findMatchAndUpdateState(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean hasMatch()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findExtendedMatch(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.lang.String,int,boolean)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void moveMatchMarker()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean isEmpty(java.lang.String)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int moveStartPosition(int,boolean)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean isEqualStartIndex(int)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.AbstractHighlighter createMatchHighlighter()"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean isValidIndex(int)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.lang.String,int)" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="boolean markByHighlighter()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void setMatchHighlighter(org.jdesktop.swingx.decorator.AbstractHighlighter)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void updateState(org.jdesktop.swingx.search.AbstractSearchable$SearchResult)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.AbstractHighlighter getConfiguredMatchHighlighter()"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="int search(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void ensureInsertedSearchHighlighters(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.HighlightPredicate createMatchPredicate()"
                class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <field name="MATCH_HIGHLIGHTER" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <field name="lastSearchResult" class="org.jdesktop.swingx.search.AbstractSearchable"/>
        <class name="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void setTarget(java.lang.Object)"
                class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void setStateAction(boolean)" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void uninstallTarget()" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void installTarget()" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="java.lang.Object getTarget()" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="boolean isVisited()" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void setVisited(boolean)" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void &lt;init&gt;(java.lang.Object)"
                class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <field name="VISITED_KEY" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <field name="target" class="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="boolean contains(javax.swing.JComponent,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void paintButtonPressed(java.awt.Graphics,javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void paintText(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.lang.String)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="java.awt.Color getFocusColor()" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void paintFocus(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void installListeners(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="javax.swing.plaf.basic.BasicButtonListener createButtonListener(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void paint(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="java.awt.Rectangle getIconTextRect(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void installDefaults(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void uninstallListeners(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <method signature="void paintHTMLText(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.lang.String,javax.swing.text.View)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <field name="dashedRectGapX" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <field name="dashedRectGapHeight" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <field name="dashedRectGapY" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <field name="dashedRectGapWidth" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$1"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$2"/>
        <method signature="void run()" class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$2"/>
        <class name="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="boolean isToggling(javax.swing.Action,javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="boolean shouldAddListener(javax.swing.Action,javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="javax.swing.AbstractButton checkReferent(javax.swing.Action)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="boolean isToggling(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="void releasePCLs(javax.swing.Action)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <method signature="void &lt;init&gt;(javax.swing.Action,javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.action.ToggleActionPropertyChangeListener"/>
        <class name="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isVerticalAlignmentSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void applyPropertiesTo(javax.swing.AbstractButton)"
                class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isIconTextGapSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isHorizontalAlignmentSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean noPropertiesSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void applyPropertiesTo(org.jdesktop.swingx.table.LabelProperties)"
                class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isBackgroundSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void applyPropertiesTo(javax.swing.JLabel)"
                class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isFontSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isForegroundSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isIconSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isVerticalTextPositionSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color,java.awt.Font,int,int,int,int,javax.swing.Icon,int,java.lang.String)"
                class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void applyPropertiesTo(javax.swing.table.TableCellRenderer)"
                class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isHorizontalTextPositionSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <method signature="boolean isTextSet()" class="org.jdesktop.swingx.table.LabelProperties"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$NonStrictBackspaceAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$NonStrictBackspaceAction"/>
        <method signature="void &lt;init&gt;(javax.swing.Action,javax.swing.Action,org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$NonStrictBackspaceAction"/>
        <class name="org.jdesktop.swingx.renderer.PainterAware"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.renderer.PainterAware"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.renderer.PainterAware"/>
        <class name="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void removeThumbDataListener(org.jdesktop.swingx.multislider.ThumbDataListener)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void thumbPositionChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="float getMaximumValue()" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void thumbValueChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void fireThumbPositionChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void fireThumbValueChanged(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void setMinimumValue(float)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void addThumbDataListener(org.jdesktop.swingx.multislider.ThumbDataListener)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="float getMinimumValue()" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <method signature="void setMaximumValue(float)"
                class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <field name="thumbDataListeners" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <field name="maximumValue" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <field name="minimumValue" class="org.jdesktop.swingx.multislider.AbstractMultiThumbModel"/>
        <class name="org.jdesktop.swingx.plaf.HeaderUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.HeaderUI"/>
        <class name="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="boolean commitChange()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.text.DateFormat[] getFormats()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="int getClickCountToStart()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.util.Date getValueAsDate(java.lang.Object)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.lang.Object getCellEditorValue()"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.awt.event.ActionListener getPickerActionListener()"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.awt.Component getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="boolean stopCellEditing()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="boolean isEmpty(java.lang.Object)" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="void handleParseException(java.text.ParseException)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="boolean isCellEditable(java.util.EventObject)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.util.Date getCellEditorValue()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="java.awt.event.ActionListener createPickerActionListener()"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="void setFormats(java.text.DateFormat[])"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="void setClickCountToStart(int)" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <method signature="void &lt;init&gt;(java.text.DateFormat)"
                class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <field name="datePicker" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <field name="clickCountToStart" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <field name="ignoreAction" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <field name="dateFormat" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <method signature="void setActions(javax.swing.Action,javax.swing.Action,javax.swing.Action)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <field name="zoomOutLink" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <field name="nextButton" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <field name="prevButton" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeader"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void undoableEditHappened(javax.swing.event.UndoableEditEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void insertUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void removeUndoableEditListener(javax.swing.event.UndoableEditListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void removeDocumentListener(javax.swing.event.DocumentListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void addUndoableEditListener(javax.swing.event.UndoableEditListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void changedUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void addDocumentListener(javax.swing.event.DocumentListener)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <method signature="void removeUpdate(javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$Handler"/>
        <class name="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setSortable(boolean)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="boolean isSortable()" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void toggleSortOrder(int)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setStringValueProvider(org.jdesktop.swingx.sort.StringValueProvider)"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="boolean isSortable(int)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="javax.swing.SortOrder getSortOrder(int)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setSortsOnUpdates(boolean)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="java.util.Comparator getComparator(int)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setRowFilter(javax.swing.RowFilter)" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setSortOrderCycle(javax.swing.SortOrder[])"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="org.jdesktop.swingx.sort.StringValueProvider getStringValueProvider()"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="boolean getSortsOnUpdates()" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void resetSortOrders()" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="javax.swing.SortOrder[] getSortOrderCycle()"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setComparator(int,java.util.Comparator)"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="javax.swing.RowFilter getRowFilter()" class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setSortOrder(int,javax.swing.SortOrder)"
                class="org.jdesktop.swingx.sort.SortController"/>
        <method signature="void setSortable(int,boolean)" class="org.jdesktop.swingx.sort.SortController"/>
        <class name="org.jdesktop.swingx.plaf.LookAndFeelAddons$UpdateAddon"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons$UpdateAddon"/>
        <class name="org.jdesktop.swingx.JXDatePicker$TodayPanel"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXDatePicker$TodayPanel"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.JXDatePicker$TodayPanel"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt2"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt2"/>
        <method signature="boolean expandOrCollapseNode(int,java.util.EventObject)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt2"/>
        <method signature="java.awt.Point getTreeMousePoint(int,java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHackerExt2"/>
        <class name="org.jdesktop.swingx.sort.RowFilters"/>
        <method signature="javax.swing.RowFilter regexFilter(int,java.lang.String,int[])"
                class="org.jdesktop.swingx.sort.RowFilters"/>
        <method signature="javax.swing.RowFilter regexFilter(java.util.regex.Pattern,int[])"
                class="org.jdesktop.swingx.sort.RowFilters"/>
        <method signature="javax.swing.RowFilter regexFilter(java.lang.String,int[])"
                class="org.jdesktop.swingx.sort.RowFilters"/>
        <class name="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setMinimumValue(float)" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="int getSelectedIndex()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void addMultiThumbListener(org.jdesktop.swingx.multislider.ThumbListener)"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setModel(org.jdesktop.swingx.multislider.MultiThumbModel)"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setThumbRenderer(org.jdesktop.swingx.multislider.ThumbRenderer)"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setTrackRenderer(org.jdesktop.swingx.multislider.TrackRenderer)"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="org.jdesktop.swingx.multislider.ThumbRenderer getThumbRenderer()"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="org.jdesktop.swingx.multislider.MultiThumbModel getModel()"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setMaximumValue(float)" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="org.jdesktop.swingx.multislider.TrackRenderer getTrackRenderer()"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="org.jdesktop.swingx.plaf.MultiThumbSliderUI getUI()"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="javax.swing.JComponent getSelectedThumb()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.MultiThumbSliderUI)"
                class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="float getMinimumValue()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="float getMaximumValue()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void setBounds(int,int,int,int)" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXMultiThumbSlider"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Element getCharacterElement(int)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="java.awt.Color getForeground(javax.swing.text.AttributeSet)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean,org.jdesktop.swingx.autocomplete.ObjectToStringConverter)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Style getLogicalStyle(int)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="java.awt.Font getFont(javax.swing.text.AttributeSet)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Style getStyle(java.lang.String)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Element getParagraphElement(int)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean,org.jdesktop.swingx.autocomplete.ObjectToStringConverter,javax.swing.text.StyledDocument)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void setParagraphAttributes(int,int,javax.swing.text.AttributeSet,boolean)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void removeStyle(java.lang.String)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor,boolean)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="void setLogicalStyle(int,javax.swing.text.Style)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="javax.swing.text.Document createDefaultDocument()"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <method signature="java.awt.Color getBackground(javax.swing.text.AttributeSet)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteStyledDocument"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame$1"/>
        <class name="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <method signature="org.jdesktop.swingx.event.DateSelectionEvent$EventType[] values()"
                class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <method signature="org.jdesktop.swingx.event.DateSelectionEvent$EventType valueOf(java.lang.String)"
                class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="SELECTABLE_DATES_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="DATES_SET" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="ADJUSTING_STOPPED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="UPPER_BOUND_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="LOWER_BOUND_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="ADJUSTING_STARTED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="SELECTION_CLEARED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="SELECTABLE_RANGE_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="DATES_REMOVED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="CALENDAR_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="UNSELECTED_DATES_CHANGED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <field name="DATES_ADDED" class="org.jdesktop.swingx.event.DateSelectionEvent$EventType"/>
        <class name="org.jdesktop.swingx.util.ShapeUtils"/>
        <method signature="java.awt.Shape generatePolygon(int,int,int,boolean)"
                class="org.jdesktop.swingx.util.ShapeUtils"/>
        <method signature="java.awt.Shape generatePolygon(int,int,boolean)"
                class="org.jdesktop.swingx.util.ShapeUtils"/>
        <method signature="java.awt.Shape generatePolygon(int,int,int)" class="org.jdesktop.swingx.util.ShapeUtils"/>
        <method signature="java.awt.Shape generateShapeFromText(java.awt.Font,java.lang.String)"
                class="org.jdesktop.swingx.util.ShapeUtils"/>
        <method signature="java.awt.Shape generateShapeFromText(java.awt.Font,char)"
                class="org.jdesktop.swingx.util.ShapeUtils"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$TogglePopupAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$TogglePopupAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicDatePickerUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$TogglePopupAction"/>
        <class name="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="void removeResourceBundle(java.lang.String)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Shape getShape(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="boolean getBoolean(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="javax.swing.Icon getSafeIcon(java.lang.Object,javax.swing.Icon)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Color getColor(java.lang.Object)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="void addResourceBundle(java.lang.String)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Insets getSafeInsets(java.lang.Object,java.awt.Insets)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.lang.String getString(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.lang.String getString(java.lang.Object)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Color getSafeColor(java.lang.Object,java.awt.Color)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="int getInt(java.lang.Object)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="javax.swing.border.Border getSafeBorder(java.lang.Object,javax.swing.border.Border)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Color getColor(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="int getInt(java.lang.Object,java.util.Locale)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Shape getShape(java.lang.Object)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="boolean getBoolean(java.lang.Object)" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Font getSafeFont(java.lang.Object,java.awt.Font)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <method signature="java.awt.Dimension getSafeDimension(java.lang.Object,java.awt.Dimension)"
                class="org.jdesktop.swingx.plaf.UIManagerExt"/>
        <class name="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="java.lang.Object stringToValue(java.lang.String)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="java.text.DateFormat[] getFormats()"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="java.text.DateFormat[] createDefaultFormats(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="void &lt;init&gt;(java.text.DateFormat[],java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="void &lt;init&gt;(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="java.lang.String valueToString(java.lang.Object)"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <method signature="void &lt;init&gt;(java.text.DateFormat[])"
                class="org.jdesktop.swingx.calendar.DatePickerFormatter"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$EqualsHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$EqualsHighlightPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.Object)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$EqualsHighlightPredicate"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$EqualsHighlightPredicate"/>
        <method signature="java.lang.Object getCompareValue()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$EqualsHighlightPredicate"/>
        <class name="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void addNimbusDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void addLinuxDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.DatePickerAddon"/>
        <class name="org.jdesktop.swingx.plaf.LoginPaneUI"/>
        <method signature="java.awt.Image getBanner()" class="org.jdesktop.swingx.plaf.LoginPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.LoginPaneUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame$2"/>
        <method signature="void componentHidden(java.awt.event.ComponentEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXInternalErrorFrame$2"/>
        <class name="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="java.awt.geom.Rectangle2D getBounds2D()" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean contains(double,double)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="java.awt.Rectangle getBounds()" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)"
                class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)"
                class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean contains(double,double,double,double)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="double getMorphing()" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="void setMorphing(double)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean contains(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean contains(java.awt.geom.Point2D)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean intersects(double,double,double,double)"
                class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="boolean intersects(java.awt.geom.Rectangle2D)" class="org.jdesktop.swingx.geom.Morphing2D"/>
        <method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Shape)"
                class="org.jdesktop.swingx.geom.Morphing2D"/>
        <class name="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.String,int)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="java.util.regex.Pattern getPattern()" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.String,int,int)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern,int,int)"
                class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="int getHighlightRow()" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <method signature="int getHighlightColumn()" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <field name="MATCH_ALL" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <field name="ALL" class="org.jdesktop.swingx.decorator.SearchPredicate"/>
        <class name="org.jdesktop.swingx.autocomplete.ObjectToStringConverter"/>
        <method signature="java.lang.String[] getPossibleStringsForItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.ObjectToStringConverter"/>
        <method signature="java.lang.String getPreferredStringForItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.ObjectToStringConverter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.autocomplete.ObjectToStringConverter"/>
        <field name="DEFAULT_IMPLEMENTATION" class="org.jdesktop.swingx.autocomplete.ObjectToStringConverter"/>
        <class name="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void setURLString(java.lang.String)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void setURL(java.net.URL)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="java.net.URL getURL()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void setText(java.lang.String)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void setTarget(java.lang.String)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="java.lang.String getText()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.net.URL)"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void setVisited(boolean)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void firePropertyChange(java.lang.String,boolean,boolean)"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="boolean getVisited()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="int hashCode()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="java.lang.String getTarget()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <method signature="int compareTo(java.lang.Object)" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <field name="VISITED_PROPERTY" class="org.jdesktop.swingx.hyperlink.LinkModel"/>
        <class name="org.jdesktop.swingx.error.ErrorListener"/>
        <method signature="void errorOccured(org.jdesktop.swingx.error.ErrorEvent)"
                class="org.jdesktop.swingx.error.ErrorListener"/>
        <class name="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="boolean isValidColumn()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="javax.swing.JTable getComponent()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="java.awt.Color getSelectionForeground()"
                class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="void installContext(javax.swing.JTable,java.lang.Object,int,int,boolean,boolean,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="java.lang.String getUIPrefix()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="boolean isValidRow()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="java.awt.Color getSelectionBackground()"
                class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.TableCellContext"/>
        <class name="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <method signature="void loginCanceled(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <method signature="void loginStarted(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <method signature="void loginSucceeded(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <method signature="void loginFailed(org.jdesktop.swingx.auth.LoginEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginListenerImpl"/>
        <class name="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <method signature="org.jdesktop.swingx.border.DropShadowBorder$Position[] values()"
                class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <method signature="org.jdesktop.swingx.border.DropShadowBorder$Position valueOf(java.lang.String)"
                class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="BOTTOM" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="TOP_RIGHT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="RIGHT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="BOTTOM_LEFT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="TOP" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="LEFT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="TOP_LEFT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <field name="BOTTOM_RIGHT" class="org.jdesktop.swingx.border.DropShadowBorder$Position"/>
        <class name="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider createDefaultComponentProvider()"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.StringValue,boolean)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.DefaultTreeRenderer"/>
        <class name="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void adjustTreeRowHeight(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setTreeCellRenderer(javax.swing.tree.TreeCellRenderer)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="java.lang.String getToolTipText(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setToggleClickCount(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setScrollsOnExpand(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void expandPath(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setTreeTableModel(org.jdesktop.swingx.treetable.TreeTableModel)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setRowSorter(javax.swing.RowSorter)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setClosedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setRowHeight(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setSelectionForeground(java.awt.Color)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void addTreeExpansionListener(javax.swing.event.TreeExpansionListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setEnabled(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setLeafIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.table.TableCellRenderer getCellRenderer(int,int)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setExpandedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setSelectionBackground(java.awt.Color)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.treetable.TreeTableModel)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isExpanded(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setShowsRootHandles(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setRootVisible(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.tree.TreeSelectionModel getTreeSelectionModel()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="int getEditingRow()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setOpenIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="org.jdesktop.swingx.JXTreeTable$TreeTableHacker createTreeTableHacker()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="java.lang.String getStringAt(int,int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void adjustTableRowHeight(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void updateHierarchicalRendererEditor()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isExpanded(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.tree.TreeCellRenderer getTreeCellRenderer()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void expandRow(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void collapseRow(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setAutoCreateRowSorter(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isVisible(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setExpandsSelectedPaths(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setOverwriteRendererIcons(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isRootVisible()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.tree.TreePath getPathForLocation(int,int)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean getShowsRootHandles()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="java.util.Enumeration getExpandedDescendants(javax.swing.tree.TreePath)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="int getToggleClickCount()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void sizeColumnsToFit(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean hackAroundDragEnabled(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isHierarchical(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isLargeModel()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableModel getTreeTableModel()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void removeTreeExpansionListener(javax.swing.event.TreeExpansionListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean editCellAt(int,int,java.util.EventObject)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="int getHierarchicalColumn()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setSortable(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setSelectionMode(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setRowHeight(int,int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="org.jdesktop.swingx.JXTreeTable$TreeTableHacker getTreeTableHacker()"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isOverwriteRendererIcons()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean getExpandsSelectedPaths()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isCollapsed(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean getScrollsOnExpand()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="int getRowForPath(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.tree.TreePath getPathForRow(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void collapseAll()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void tableChanged(javax.swing.event.TableModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="java.awt.Component applyRenderer(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void expandAll()" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="boolean isCollapsed(int)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setCollapsedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="javax.swing.table.TableCellEditor getCellEditor(int,int)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setLargeModel(boolean)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void processMouseEvent(java.awt.event.MouseEvent)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void setModel(javax.swing.table.TableModel)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void collapsePath(javax.swing.tree.TreePath)" class="org.jdesktop.swingx.JXTreeTable"/>
        <method signature="void scrollPathToVisible(javax.swing.tree.TreePath)"
                class="org.jdesktop.swingx.JXTreeTable"/>
        <field name="DROP_HACK_FLAG_KEY" class="org.jdesktop.swingx.JXTreeTable"/>
        <field name="DRAG_HACK_FLAG_KEY" class="org.jdesktop.swingx.JXTreeTable"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="java.awt.Dimension getMinNodeSize(org.jdesktop.swingx.MultiSplitLayout,org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void setContinuousLayout(boolean)" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="boolean isContinuousLayout()" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void setDividerSize(int)" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="javax.accessibility.AccessibleContext getAccessibleContext()"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="org.jdesktop.swingx.JXMultiSplitPane$DividerPainter getDividerPainter()"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Divider activeDivider()"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void setDividerPainter(org.jdesktop.swingx.JXMultiSplitPane$DividerPainter)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="org.jdesktop.swingx.painter.Painter getBackgroundPainter()"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void paintChildren(java.awt.Graphics)" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="java.awt.Dimension getMaxNodeSize(org.jdesktop.swingx.MultiSplitLayout,org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout getMultiSplitLayout()"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.MultiSplitLayout)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void setModel(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="int getDividerSize()" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXMultiSplitPane"/>
        <class name="org.jdesktop.swingx.JXLoginPane$LoginAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$LoginAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.JXLoginPane$LoginAction"/>
        <class name="org.jdesktop.swingx.multislider.ThumbListener"/>
        <method signature="void thumbSelected(int)" class="org.jdesktop.swingx.multislider.ThumbListener"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.multislider.ThumbListener"/>
        <method signature="void thumbMoved(int,float)" class="org.jdesktop.swingx.multislider.ThumbListener"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="void hitHandleDetectionFromEditCell(int,java.util.EventObject)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="void expansionChanged()" class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="boolean mightBeExpansionTrigger(java.util.EventObject)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="boolean expandOrCollapseNode(int,java.util.EventObject)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="boolean hitHandleDetectionFromProcessMouse(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="void completeEditing()" class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <method signature="boolean isHitDetectionFromProcessMouse()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <field name="expansionChangedFlag" class="org.jdesktop.swingx.JXTreeTable$TreeTableHacker"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$2"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$2"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$1"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI$1"/>
        <method signature="void init(java.awt.Shape,java.awt.Shape,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI$1"/>
        <class name="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="FILE_NAME" class="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="FILE_TYPE" class="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="NUMBER_TO_STRING" class="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="DATE_TO_STRING" class="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="TO_STRING" class="org.jdesktop.swingx.renderer.StringValues"/>
        <field name="EMPTY" class="org.jdesktop.swingx.renderer.StringValues"/>
        <class name="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setBackwards(boolean)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setFoundIndex(int)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="java.lang.String getMatchRule()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isCaseSensitive()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setCaseSensitive(boolean)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="java.util.regex.Pattern getPattern()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setMatchRule(java.lang.String)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setWrapping(boolean)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setIncremental(boolean)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isWrapping()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="java.lang.String getRawText()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="java.lang.String getRegexCreatorKey()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isBackwards()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setRegexCreator(org.jdesktop.swingx.search.PatternModel$RegexCreator)"
                class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isEmpty()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setRegexCreatorKey(java.lang.String)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isIncremental()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="boolean isAutoAdjustFoundIndex()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void updateFoundIndex(int)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="int getFoundIndex()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void createRegexCreator(java.lang.String)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="java.util.List getMatchRules()" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void setRawText(java.lang.String)" class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.search.PatternModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="REGEX_WILDCARD" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_RULE_ENDSWITH" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_WRAP_ACTION_COMMAND" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_RULE_CONTAINS" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="REGEX_MATCH_RULES" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="REGEX_UNCHANGED" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_RULE_EQUALS" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_RULE_STARTSWITH" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_BACKWARDS_ACTION_COMMAND" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="SEARCH_PREFIX" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="REGEX_ANCHORED" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_INCREMENTAL_ACTION_COMMAND" class="org.jdesktop.swingx.search.PatternModel"/>
        <field name="MATCH_CASE_ACTION_COMMAND" class="org.jdesktop.swingx.search.PatternModel"/>
        <class name="org.jdesktop.swingx.util.Contract"/>
        <method signature="java.lang.Object asNotNull(java.lang.Object,java.lang.String)"
                class="org.jdesktop.swingx.util.Contract"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$3"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$3"/>
        <class name="org.jdesktop.swingx.JXLoginPane$LoginPaneLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.JXLoginPane$LoginPaneLayout"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$4"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$4"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$5"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$5"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$6"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$6"/>
        <class name="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.util.logging.Level getErrorLevel()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.lang.String getBasicErrorMessage()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.lang.String getTitle()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.lang.Throwable getErrorException()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable,java.util.logging.Level,java.util.Map)"
                class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.lang.String getDetailedErrorMessage()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.lang.String getCategory()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <method signature="java.util.Map getState()" class="org.jdesktop.swingx.error.ErrorInfo"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$7"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$7"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$8"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$8"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$9"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$9"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="void updateAfterExpansionEvent(javax.swing.event.TreeExpansionEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="int getRowCount()" class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="boolean isCellEditable(int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="java.lang.Object nodeForRow(int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="java.lang.Class getColumnClass(int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="void bind(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="void setValueAt(java.lang.Object,int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="java.lang.String getColumnName(int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="org.jdesktop.swingx.JXTreeTable getTreeTable()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="void delayedFireTableDataUpdated(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter"/>
        <class name="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="java.awt.Point getPointForCentering(javax.swing.JInternalFrame)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="java.util.List getAllComponents(java.awt.Container)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="java.awt.Window findWindow(java.awt.Component)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="java.awt.Point getPointForCentering(java.awt.Window)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="void setMinimumSizeManager(java.awt.Window,int,int)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <method signature="java.awt.Point getPointForStaggering(java.awt.Window)"
                class="org.jdesktop.swingx.util.WindowUtils"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorDialog"/>
        <method signature="void init(org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorDialog"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI,java.awt.Dialog,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorDialog"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI,java.awt.Frame,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorDialog"/>
        <class name="org.jdesktop.swingx.border.MatteBorderExt$1"/>
        <method signature="int getIconWidth()" class="org.jdesktop.swingx.border.MatteBorderExt$1"/>
        <method signature="int getIconHeight()" class="org.jdesktop.swingx.border.MatteBorderExt$1"/>
        <method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
                class="org.jdesktop.swingx.border.MatteBorderExt$1"/>
        <class name="org.jdesktop.swingx.RepaintManagerX"/>
        <method signature="void &lt;init&gt;(javax.swing.RepaintManager)" class="org.jdesktop.swingx.RepaintManagerX"/>
        <method signature="void addDirtyRegion(javax.swing.JComponent,int,int,int,int)"
                class="org.jdesktop.swingx.RepaintManagerX"/>
        <class name="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setBannerText(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.plaf.LoginPaneUI getUI()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.lang.String getErrorMessage()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.awt.Image createLoginBanner()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void removeNotify()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$JXLoginFrame showLoginFrame(org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status showLoginDialog(java.awt.Component,org.jdesktop.swingx.auth.LoginService)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void addNotify()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status showLoginDialog(java.awt.Component,org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setErrorMessage(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.lang.String getBannerText()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$JXLoginFrame showLoginFrame(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status getStatus()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void recreateLoginPanel()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.auth.PasswordStore getPasswordStore()"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.lang.String getMessage()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="javax.swing.plaf.PanelUI getUI()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.auth.UserNameStore getUserNameStore()"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setBanner(java.awt.Image)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setServers(java.util.List)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="javax.swing.Action createLoginAction()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="javax.swing.Action createCancelAction()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.util.List getServers()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setPassword(char[])" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setSaveMode(org.jdesktop.swingx.JXLoginPane$SaveMode)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$JXLoginFrame showLoginFrame(org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore,java.util.List)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status showLoginDialog(java.awt.Component,org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore,java.util.List)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void cancelLogin()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="boolean isCapsLockOn()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$SaveMode getSaveMode()"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setUserNameEnabled(boolean)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void savePassword()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="char[] getPassword()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.auth.LoginService)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="boolean isCapsLockDetectionSupported()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.lang.String getUserName()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="boolean isUserNameEnabled()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setUserName(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status showLoginDialog(java.awt.Component,org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setUI(org.jdesktop.swingx.plaf.LoginPaneUI)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setPasswordStore(org.jdesktop.swingx.auth.PasswordStore)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$JXLoginFrame showLoginFrame(org.jdesktop.swingx.auth.LoginService)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore,java.util.List)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setLoginService(org.jdesktop.swingx.auth.LoginService)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="org.jdesktop.swingx.auth.LoginService getLoginService()"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="boolean isRememberPassword()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="java.awt.Image getBanner()" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setMessage(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.auth.LoginService,org.jdesktop.swingx.auth.PasswordStore,org.jdesktop.swingx.auth.UserNameStore)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setUserNameStore(org.jdesktop.swingx.auth.UserNameStore)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void setStatus(org.jdesktop.swingx.JXLoginPane$Status)"
                class="org.jdesktop.swingx.JXLoginPane"/>
        <method signature="void startLogin()" class="org.jdesktop.swingx.JXLoginPane"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXLoginPane"/>
        <field name="LOGIN_ACTION_COMMAND" class="org.jdesktop.swingx.JXLoginPane"/>
        <field name="CANCEL_LOGIN_ACTION_COMMAND" class="org.jdesktop.swingx.JXLoginPane"/>
        <class name="org.jdesktop.swingx.JXErrorPane$3"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXErrorPane$3"/>
        <class name="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void initialize()" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void setAddon(org.jdesktop.swingx.plaf.LookAndFeelAddons)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void contribute(org.jdesktop.swingx.plaf.ComponentAddon)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="org.jdesktop.swingx.plaf.LookAndFeelAddons getAddon()"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void setAddon(java.lang.String)" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void setTrackingLookAndFeelChanges(boolean)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent,java.lang.Class)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void uncontribute(org.jdesktop.swingx.plaf.ComponentAddon)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void unloadDefaults(java.lang.Object[])" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void setAddon(java.lang.Class)" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="boolean isTrackingLookAndFeelChanges()" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void uninitialize()" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="java.lang.String getBestMatchAddonClassName()"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void loadDefaults(java.lang.Object[])" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void installBackgroundPainter(javax.swing.JComponent,java.lang.String)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="java.lang.String getSystemAddonClassName()"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <method signature="void uninstallBackgroundPainter(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.LookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$1"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$1"/>
        <class name="org.jdesktop.swingx.JXErrorPane$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXErrorPane$1"/>
        <class name="org.jdesktop.swingx.JXErrorPane$2"/>
        <method signature="void run()" class="org.jdesktop.swingx.JXErrorPane$2"/>
        <class name="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <method signature="org.jdesktop.swingx.painter.AbstractPainter$Interpolation[] values()"
                class="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <method signature="org.jdesktop.swingx.painter.AbstractPainter$Interpolation valueOf(java.lang.String)"
                class="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <field name="NearestNeighbor" class="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <field name="Bilinear" class="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <field name="Bicubic" class="org.jdesktop.swingx.painter.AbstractPainter$Interpolation"/>
        <class name="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <method signature="org.jdesktop.swingx.renderer.IconValue$IconType[] values()"
                class="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <method signature="org.jdesktop.swingx.renderer.IconValue$IconType valueOf(java.lang.String)"
                class="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <field name="CLOSED_FOLDER" class="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <field name="OPEN_FOLDER" class="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <field name="LEAF" class="org.jdesktop.swingx.renderer.IconValue$IconType"/>
        <class name="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void setSquareSize(double)" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="java.awt.Paint getLightPaint()" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="java.awt.Paint getDarkPaint()" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="double getSquareSize()" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void setLightPaint(java.awt.Paint)" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint,double)"
                class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void setDarkPaint(java.awt.Paint)" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.CheckerboardPainter"/>
        <class name="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="java.lang.String getSelectedItemAsString()"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="java.lang.Object getSelectedItem()"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="void setSelectedItemAsString(java.lang.String)"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="void markEntireText()" class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="int getItemCount()" class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="void markText(int)" class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="boolean listContainsSelectedItem()"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="java.lang.Object getItem(int)"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="javax.swing.text.JTextComponent getTextComponent()"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.autocomplete.AbstractAutoCompleteAdaptor"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$8"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$8"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$9"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$9"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$6"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$6"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$7"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$7"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$4"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$4"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$5"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$5"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$PopupRemover"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$PopupRemover"/>
        <method signature="void load()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$PopupRemover"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicDatePickerUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$PopupRemover"/>
        <method signature="void unload()" class="org.jdesktop.swingx.plaf.basic.BasicDatePickerUI$PopupRemover"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$2"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$2"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$3"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$3"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI$TipAreaBorder"/>
        <method signature="java.awt.Insets getBorderInsets(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI$TipAreaBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI$TipAreaBorder"/>
        <method signature="boolean isBorderOpaque()"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI$TipAreaBorder"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.windows.WindowsTipOfTheDayUI$TipAreaBorder"/>
        <class name="org.jdesktop.swingx.JXColorSelectionButton$ColorChangeListener"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.JXColorSelectionButton$ColorChangeListener"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXColorSelectionButton,org.jdesktop.swingx.JXColorSelectionButton)"
                class="org.jdesktop.swingx.JXColorSelectionButton$ColorChangeListener"/>
        <field name="button" class="org.jdesktop.swingx.JXColorSelectionButton$ColorChangeListener"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$OrHighlightPredicate"/>
        <method signature="org.jdesktop.swingx.decorator.HighlightPredicate[] getHighlightPredicates()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$OrHighlightPredicate"/>
        <method signature="void &lt;init&gt;(java.util.Collection)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$OrHighlightPredicate"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate[])"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$OrHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$OrHighlightPredicate"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction$1"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$ColumnVisibilityAction$1"/>
        <class name="org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice"/>
        <method signature="boolean isShowingOnStartup()" class="org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice"/>
        <method signature="void setShowingOnStartup(boolean)"
                class="org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice"/>
        <class name="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.String getFilteredStringAt(int,int)"
                class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXList)"
                class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.String getString()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.String getStringAt(int,int)" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="int getRowCount()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.Object getValue()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="org.jdesktop.swingx.JXList getList()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="java.lang.Object getFilteredValueAt(int,int)"
                class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <method signature="boolean hasFocus()" class="org.jdesktop.swingx.JXList$ListAdapter"/>
        <class name="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <method signature="int getType()" class="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <method signature="void &lt;init&gt;(java.lang.Object,int,int,org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <method signature="org.jdesktop.swingx.multislider.Thumb getThumb()"
                class="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <method signature="int getIndex()" class="org.jdesktop.swingx.multislider.ThumbDataEvent"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$Divider"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.MultiSplitLayout$Divider"/>
        <method signature="boolean isVertical()" class="org.jdesktop.swingx.MultiSplitLayout$Divider"/>
        <method signature="void setWeight(double)" class="org.jdesktop.swingx.MultiSplitLayout$Divider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$Divider"/>
        <class name="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI"/>
        <method signature="javax.swing.border.Border createPaneBorder()"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI"/>
        <method signature="void update(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.misc.GlossyTaskPaneUI"/>
        <class name="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="int getIndexOfChild(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void setColumnIdentifiers(java.util.List)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void removeNodeFromParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void setValueAt(java.lang.Object,java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="java.lang.Object getChild(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="java.lang.String getColumnName(int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="int getChildCount(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.treetable.TreeTableNode,java.util.List)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="boolean isLeaf(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="java.lang.Object getValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void setRoot(org.jdesktop.swingx.treetable.TreeTableNode)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.treetable.TreeTableNode)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode[] getPathToRoot(org.jdesktop.swingx.treetable.TreeTableNode)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="org.jdesktop.swingx.treetable.TreeTableNode getRoot()"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void setUserObject(org.jdesktop.swingx.treetable.TreeTableNode,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="java.lang.Object getRoot()" class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="boolean isCellEditable(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <method signature="void insertNodeInto(org.jdesktop.swingx.treetable.MutableTreeTableNode,org.jdesktop.swingx.treetable.MutableTreeTableNode,int)"
                class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <field name="columnIdentifiers" class="org.jdesktop.swingx.treetable.DefaultTreeTableModel"/>
        <class name="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void setValueAt(java.lang.Object,java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="java.lang.String getColumnName(int)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void removeTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="boolean isLeaf(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void addTreeModelListener(javax.swing.event.TreeModelListener)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="java.lang.Object getRoot()" class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="boolean isCellEditable(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="java.lang.Class getColumnClass(int)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="javax.swing.event.TreeModelListener[] getTreeModelListeners()"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="void &lt;init&gt;(java.lang.Object)"
                class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <method signature="int getHierarchicalColumn()" class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <field name="root" class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <field name="modelSupport" class="org.jdesktop.swingx.treetable.AbstractTreeTableModel"/>
        <class name="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="java.lang.String getRegEx()"
                class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="void updateFrom(org.jdesktop.swingx.search.AbstractSearchable$SearchResult)"
                class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="java.util.regex.Pattern getPattern()"
                class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="void resetFoundColumn()" class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="void reset()" class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="int getFoundRow()" class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="java.util.regex.MatchResult getMatchResult()"
                class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="void &lt;init&gt;(java.util.regex.Pattern,java.util.regex.MatchResult,int,int)"
                class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <method signature="int getFoundColumn()" class="org.jdesktop.swingx.search.AbstractSearchable$SearchResult"/>
        <class name="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void validateInvalidComponents()" class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void &lt;init&gt;(javax.swing.RepaintManager)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="java.awt.Dimension getDoubleBufferMaximumSize()"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void addInvalidComponent(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="java.awt.Image getVolatileOffscreenBuffer(java.awt.Component,int,int)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="javax.swing.RepaintManager getDelegateManager()"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void addDirtyRegion(javax.swing.JComponent,int,int,int,int)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void paintDirtyRegions()" class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void removeInvalidComponent(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void markCompletelyClean(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void setDoubleBufferingEnabled(boolean)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="java.awt.Rectangle getDirtyRegion(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="boolean isCompletelyDirty(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void markCompletelyDirty(javax.swing.JComponent)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="void setDoubleBufferMaximumSize(java.awt.Dimension)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="java.awt.Image getOffscreenBuffer(java.awt.Component,int,int)"
                class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <method signature="boolean isDoubleBufferingEnabled()" class="org.jdesktop.swingx.ForwardingRepaintManager"/>
        <class name="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="java.awt.Font getFont()" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="java.lang.String getText()" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void setText(java.lang.String)" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.TextPainter"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.awt.Font)"
                class="org.jdesktop.swingx.painter.TextPainter"/>
        <class name="org.jdesktop.swingx.sort.RowFilters$GeneralFilter"/>
        <method signature="boolean include(javax.swing.RowFilter$Entry,int)"
                class="org.jdesktop.swingx.sort.RowFilters$GeneralFilter"/>
        <method signature="void &lt;init&gt;(int[])" class="org.jdesktop.swingx.sort.RowFilters$GeneralFilter"/>
        <method signature="void checkIndices(int[])" class="org.jdesktop.swingx.sort.RowFilters$GeneralFilter"/>
        <method signature="boolean include(javax.swing.RowFilter$Entry)"
                class="org.jdesktop.swingx.sort.RowFilters$GeneralFilter"/>
        <class name="org.jdesktop.swingx.plaf.TaskPaneUI"/>
        <method signature="java.awt.Component createAction(javax.swing.Action)"
                class="org.jdesktop.swingx.plaf.TaskPaneUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.TaskPaneUI"/>
        <class name="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="int getColumnCount()" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="int getIndexOfChild(java.lang.Object,java.lang.Object)"
                class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.lang.Object getChild(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="int getChildCount(java.lang.Object)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.lang.String getColumnName(int)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="boolean isLeaf(java.lang.Object)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.lang.Object getValueAt(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.io.File getChild(java.lang.Object,int)"
                class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.lang.Object getRoot()" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.io.File getRoot()" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="java.lang.Class getColumnClass(int)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="void setRoot(java.io.File)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <method signature="void &lt;init&gt;(java.io.File)" class="org.jdesktop.swingx.treetable.FileSystemModel"/>
        <class name="org.jdesktop.swingx.JXTable$NumberEditor"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXTable$NumberEditor"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI$ClassicPaneBorder"/>
        <method signature="void paintExpandedControls(org.jdesktop.swingx.JXTaskPane,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.plaf.windows.WindowsClassicTaskPaneUI$ClassicPaneBorder"/>
        <class name="org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons"/>
        <field name="HOMESTEAD_VISUAL_STYLE" class="org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons"/>
        <field name="VISTA_VISUAL_STYLE" class="org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons"/>
        <field name="SILVER_VISUAL_STYLE" class="org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.decorator.HighlighterFactory$UIColorHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.HighlighterFactory$UIColorHighlighter"/>
        <method signature="void updateUI()"
                class="org.jdesktop.swingx.decorator.HighlighterFactory$UIColorHighlighter"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.decorator.HighlighterFactory$UIColorHighlighter"/>
        <class name="org.jdesktop.swingx.error.ErrorSupport$1"/>
        <method signature="void run()" class="org.jdesktop.swingx.error.ErrorSupport$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler getCalendarHeaderHandler()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.event.MouseMotionListener createMouseMotionListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paint(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.beans.PropertyChangeListener createPropertyChangeListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintMonth(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installDelegate()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getFirstDisplayedDay()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Dimension getDaySize()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintDays(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintWeekOfYearSeparator(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getDayAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="boolean isZoomable()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void updateLocale(boolean)" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthBounds(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getLastDisplayedDay()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void setUsingKeyboard(boolean)" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintDayOfMonth(java.awt.Graphics,java.awt.Rectangle,java.util.Calendar,org.jdesktop.swingx.plaf.basic.CalendarState)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="int getFirstDisplayedMonth()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Point getMonthGridPositionAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler createRenderingHandler()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getDayBounds(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintDayHeader(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.SortedSet getSelection()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getMonthAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getToday()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.LayoutManager createLayoutManager()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.lang.String[] getDaysOfTheWeek()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintMonthHeader(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void setFirstDisplayedDay(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler getHeaderFromUIManager()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler getRenderingHandler()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.event.MouseListener createMouseListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallRenderingHandler()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void setRenderingHandler(org.jdesktop.swingx.plaf.basic.CalendarRenderingHandler)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Point getMonthGridPosition(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void update(java.awt.Graphics,javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void updateComponentInputMap()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installRenderingHandler()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler createCalendarHeaderHandler()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintWeekHeader(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="boolean isUIInstallable(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void updateZoomable()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getDayInMonth(java.util.Date,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="int getTraversableGridPositionAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getDayBoundsInMonth(java.util.Date,int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Calendar getCalendar(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthBoundsAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthDetailsBoundsAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthHeaderBounds(java.util.Date,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Point getDayGridPosition(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="int getFirstDisplayedYear()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthHeaderBoundsAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getDayBoundsAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="boolean isToday(java.util.Date)" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Point getDayGridPositionAtLocation(int,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="int getWeeks(java.util.Calendar)" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void installComponents()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintDaysOfWeekSeparator(java.awt.Graphics,java.util.Calendar)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="int getMonthHeaderHeight()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="boolean isUsingKeyboard()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void setCalendarHeaderHandler(org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Rectangle getMonthBounds(java.util.Date)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Font createDerivedFont()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void paintBackground(java.awt.Graphics)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.awt.Dimension getMonthSize()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="void uninstallComponents()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Calendar getCalendar()" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="java.util.Date getMonth(int,int)" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="WEEK_HEADER_COLUMN" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="WEEKS_IN_MONTH" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="MONTH_DOWN" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="monthView" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="monthDownImage" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="MONTH_UP" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="LAST_DAY_COLUMN" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="monthUpImage" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="DAY_HEADER_ROW" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="monthsOfTheYear" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="DAYS_IN_WEEK" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="calendarGrid" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="FIRST_WEEK_ROW" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="isLeftToRight" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="LAST_WEEK_ROW" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <field name="FIRST_DAY_COLUMN" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
        <class name="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="java.util.List getListeners()" class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="int getListenerCount()" class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="int getListenerCount(java.lang.Class)" class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="void add(java.lang.Class,java.util.EventListener)"
                class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="void remove(java.lang.Class,java.util.EventListener)"
                class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.event.EventListenerMap"/>
        <method signature="java.util.List getListeners(java.lang.Class)"
                class="org.jdesktop.swingx.event.EventListenerMap"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$2"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$1"/>
        <method signature="void treeCollapsed(javax.swing.event.TreeExpansionEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$1"/>
        <method signature="void treeExpanded(javax.swing.event.TreeExpansionEvent)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableModelAdapter$1"/>
        <class name="org.jdesktop.swingx.plaf.macosx.MacOSXStatusBarUI"/>
        <method signature="void installDefaults(org.jdesktop.swingx.JXStatusBar)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXStatusBarUI"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.macosx.MacOSXStatusBarUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.macosx.MacOSXStatusBarUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$ChangeListener"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$ChangeListener"/>
        <class name="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="boolean isShapeMasked()" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="boolean isRenderInsideShape()"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void paintBorderGlow(java.awt.Graphics2D,java.awt.Shape,int,int)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setShouldFillShape(boolean)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="int getEffectWidth()" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setRenderInsideShape(boolean)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setBrushSteps(int)" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="java.awt.geom.Point2D getOffset()"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setEffectWidth(int)" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="int getBrushSteps()" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setOffset(java.awt.geom.Point2D)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void apply(java.awt.Graphics2D,java.awt.Shape,int,int)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setShapeMasked(boolean)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void setBrushColor(java.awt.Color)"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="java.awt.Color getBrushColor()"
                class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="boolean isShouldFillShape()" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
        <class name="org.jdesktop.swingx.JXGraph$PanMotionHandler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXGraph$PanMotionHandler"/>
        <class name="org.jdesktop.swingx.JXGradientChooser$GradientStyle"/>
        <method signature="org.jdesktop.swingx.JXGradientChooser$GradientStyle valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXGradientChooser$GradientStyle"/>
        <method signature="org.jdesktop.swingx.JXGradientChooser$GradientStyle[] values()"
                class="org.jdesktop.swingx.JXGradientChooser$GradientStyle"/>
        <field name="Linear" class="org.jdesktop.swingx.JXGradientChooser$GradientStyle"/>
        <field name="Radial" class="org.jdesktop.swingx.JXGradientChooser$GradientStyle"/>
        <class name="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue,int)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider createDefaultComponentProvider()"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)"
                class="org.jdesktop.swingx.renderer.DefaultTableRenderer"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChangeListener"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ChangeListener"/>
        <class name="org.jdesktop.swingx.JXLabel$IValue"/>
        <method signature="int getValue()" class="org.jdesktop.swingx.JXLabel$IValue"/>
        <class name="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="javax.swing.RowSorter$SortKey getFirstSortKeyForColumn(java.util.List,int)"
                class="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="boolean isSorted(javax.swing.SortOrder,boolean)" class="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="javax.swing.RowSorter$SortKey removeFirstSortKeyForColumn(java.util.List,int)"
                class="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="boolean isSorted(javax.swing.SortOrder)" class="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="boolean isAscending(javax.swing.SortOrder)" class="org.jdesktop.swingx.sort.SortUtils"/>
        <method signature="javax.swing.RowSorter$SortKey getFirstSortingKey(java.util.List)"
                class="org.jdesktop.swingx.sort.SortUtils"/>
        <class name="org.jdesktop.swingx.event.CompoundFocusListener"/>
        <method signature="void release()" class="org.jdesktop.swingx.event.CompoundFocusListener"/>
        <method signature="void permanentFocusOwnerChanged(java.awt.Component)"
                class="org.jdesktop.swingx.event.CompoundFocusListener"/>
        <method signature="void &lt;init&gt;(javax.swing.JComponent)"
                class="org.jdesktop.swingx.event.CompoundFocusListener"/>
        <method signature="boolean isFocused()" class="org.jdesktop.swingx.event.CompoundFocusListener"/>
        <class name="org.jdesktop.swingx.plaf.basic.TextCrossingPainter"/>
        <method signature="java.awt.Color getForeground()" class="org.jdesktop.swingx.plaf.basic.TextCrossingPainter"/>
        <method signature="void setForeground(java.awt.Color)"
                class="org.jdesktop.swingx.plaf.basic.TextCrossingPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.plaf.basic.TextCrossingPainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,javax.swing.JComponent,int,int)"
                class="org.jdesktop.swingx.plaf.basic.TextCrossingPainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$RenderingHandler"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI$RenderingHandler"/>
        <class name="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
        <method signature="javax.swing.text.View createView(org.jdesktop.swingx.JXLabel)"
                class="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
        <method signature="void updateRenderer(org.jdesktop.swingx.JXLabel)"
                class="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
        <class name="org.jdesktop.swingx.color.GradientPreviewPanel$GradientMouseHandler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.color.GradientPreviewPanel$GradientMouseHandler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.color.GradientPreviewPanel$GradientMouseHandler"/>
        <class name="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setWaitPaneVisible(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="boolean isWaitCursorVisible()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setCursor(java.awt.Cursor)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setStatusBar(org.jdesktop.swingx.JXStatusBar)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setIdleThreshold(long)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setWaitPane(java.awt.Component)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setCancelButton(javax.swing.JButton)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setIdle(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setToolBar(javax.swing.JToolBar)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="boolean isWaiting()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setStartPosition(org.jdesktop.swingx.JXFrame$StartPosition)"
                class="org.jdesktop.swingx.JXFrame"/>
        <method signature="javax.swing.JButton getCancelButton()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setWaitCursorVisible(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="javax.swing.JToolBar getToolBar()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="boolean getKeyPreview()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setRootPane(javax.swing.JRootPane)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="java.awt.Component getWaitPane()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setDefaultButton(javax.swing.JButton)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="boolean isWaitPaneVisible()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="javax.swing.JRootPane createRootPane()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="org.jdesktop.swingx.JXStatusBar getStatusBar()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setKeyPreview(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void setWaiting(boolean)" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="org.jdesktop.swingx.JXRootPane getRootPaneExt()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="org.jdesktop.swingx.JXFrame$StartPosition getStartPosition()"
                class="org.jdesktop.swingx.JXFrame"/>
        <method signature="long getIdleThreshold()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="boolean isIdle()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXFrame"/>
        <method signature="javax.swing.JButton getDefaultButton()" class="org.jdesktop.swingx.JXFrame"/>
        <class name="org.jdesktop.swingx.JXTree$Actions"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.JXTree$Actions"/>
        <class name="org.jdesktop.swingx.JXLabel$1"/>
        <method signature="void doPaint(java.awt.Graphics2D,org.jdesktop.swingx.JXLabel,int,int)"
                class="org.jdesktop.swingx.JXLabel$1"/>
        <method signature="boolean equals(java.lang.Object)" class="org.jdesktop.swingx.JXLabel$1"/>
        <method signature="boolean shouldUseCache()" class="org.jdesktop.swingx.JXLabel$1"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.JXLabel$1"/>
        <class name="org.jdesktop.swingx.JXLabel$2"/>
        <method signature="void ancestorResized(java.awt.event.HierarchyEvent)" class="org.jdesktop.swingx.JXLabel$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXBusyLabel)"
                class="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI"/>
        <method signature="int getDelay()" class="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI"/>
        <method signature="org.jdesktop.swingx.painter.BusyPainter getBusyPainter(java.awt.Dimension)"
                class="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicBusyLabelUI"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$DetailsTransferHandler"/>
        <method signature="java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$DetailsTransferHandler"/>
        <method signature="int getSourceActions(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$DetailsTransferHandler"/>
        <class name="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="javax.swing.JComponent getComponent()" class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="java.awt.Color getSelectionForeground()"
                class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="javax.swing.JList getComponent()" class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="java.lang.String getUIPrefix()" class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="void installContext(javax.swing.JList,java.lang.Object,int,int,boolean,boolean,boolean,boolean)"
                class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="java.awt.Color getSelectionBackground()"
                class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.ListCellContext"/>
        <class name="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="java.lang.String getURL()" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="java.util.Set getHeaderNames()" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void setURL(java.lang.String)" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void addParam(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="java.util.Set getParamNames()" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="java.lang.String getParamValue(java.lang.String)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="java.lang.String getHeaderValue(java.lang.String)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.ServerAction"/>
        <method signature="void addHeader(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.ServerAction"/>
        <class name="org.jdesktop.swingx.auth.LoginEvent"/>
        <method signature="java.lang.Throwable getCause()" class="org.jdesktop.swingx.auth.LoginEvent"/>
        <method signature="void &lt;init&gt;(java.lang.Object,java.lang.Throwable)"
                class="org.jdesktop.swingx.auth.LoginEvent"/>
        <method signature="void &lt;init&gt;(java.lang.Object)" class="org.jdesktop.swingx.auth.LoginEvent"/>
        <class name="org.jdesktop.swingx.plaf.HeaderAddon"/>
        <method signature="void addNimbusDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.HeaderAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.HeaderAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.HeaderAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.HeaderAddon"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$LookupResult"/>
        <method signature="void &lt;init&gt;(java.lang.Object,java.lang.String)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$LookupResult"/>
        <class name="org.jdesktop.swingx.auth.JAASLoginService$JAASCallbackHandler"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.auth.JAASLoginService,java.lang.String,char[])"
                class="org.jdesktop.swingx.auth.JAASLoginService$JAASCallbackHandler"/>
        <method signature="void handle(javax.security.auth.callback.Callback[])"
                class="org.jdesktop.swingx.auth.JAASLoginService$JAASCallbackHandler"/>
        <class name="org.jdesktop.swingx.JXBusyLabel$Direction"/>
        <method signature="org.jdesktop.swingx.JXBusyLabel$Direction valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXBusyLabel$Direction"/>
        <method signature="org.jdesktop.swingx.JXBusyLabel$Direction[] values()"
                class="org.jdesktop.swingx.JXBusyLabel$Direction"/>
        <field name="RIGHT" class="org.jdesktop.swingx.JXBusyLabel$Direction"/>
        <field name="LEFT" class="org.jdesktop.swingx.JXBusyLabel$Direction"/>
        <class name="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="java.awt.Point getFocusedCell()" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void release()" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="boolean hasRollover(java.awt.Point)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void rollover(java.awt.Point,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="boolean isClickable(java.awt.Point)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void registerExecuteButtonAction()" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverRenderer getRolloverRenderer(java.awt.Point,boolean)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void click(java.awt.Point)" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="javax.swing.Action createExecuteButtonAction()"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void install(javax.swing.JComponent)"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <method signature="void unregisterExecuteButtonAction()"
                class="org.jdesktop.swingx.rollover.RolloverController"/>
        <field name="component" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <field name="EXECUTE_BUTTON_ACTIONCOMMAND" class="org.jdesktop.swingx.rollover.RolloverController"/>
        <class name="org.jdesktop.swingx.plaf.ColumnControlButtonAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.ColumnControlButtonAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.ColumnControlButtonAddon"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="org.jdesktop.swingx.JXMonthView getComponent()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.awt.Color getSelectionForeground()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="javax.swing.border.Border getBorder()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.awt.Color getBackground()" class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.awt.Color getFlaggedOrPerDayForeground()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.awt.Color getForeground()" class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="void installContext(org.jdesktop.swingx.JXMonthView,java.util.Calendar,boolean,boolean,org.jdesktop.swingx.plaf.basic.CalendarState)"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarState getCalendarState()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="boolean isToday()" class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.lang.String getUIPrefix()" class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.util.Calendar getCalendar()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <method signature="java.awt.Color getSelectionBackground()"
                class="org.jdesktop.swingx.plaf.basic.CalendarCellContext"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="java.awt.Dimension getPreferredSize(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void uninstallDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="java.beans.PropertyChangeListener createChangeListener()"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void uninstallComponents()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void showCurrentTip()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void uninstallUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void installComponents()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="javax.swing.JDialog createDialog(java.awt.Component,org.jdesktop.swingx.JXTipOfTheDay$ShowOnStartupChoice,boolean)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void installKeyboardActions()" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTipOfTheDay)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <field name="tipArea" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <field name="changeListener" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <field name="currentTipComponent" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <field name="tipFont" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <field name="tipPane" class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI"/>
        <class name="org.jdesktop.swingx.plaf.LoginPaneAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.LoginPaneAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.LoginPaneAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.LoginPaneAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.LoginPaneAddon"/>
        <class name="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <method signature="java.awt.Container getContentPane()" class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status getStatus()"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <method signature="org.jdesktop.swingx.JXPanel getContentPane()"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <method signature="org.jdesktop.swingx.JXLoginPane getPanel()"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
        <class name="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="boolean isRepeated()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setRepeated(boolean)" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="java.awt.MultipleGradientPaint calculateGradient()"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="boolean isReversed()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setGradient(java.awt.MultipleGradientPaint)"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setGradient()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setReversed(boolean)" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setReflected(boolean)" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setMultiThumbModel(org.jdesktop.swingx.multislider.MultiThumbModel)"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="org.jdesktop.swingx.multislider.MultiThumbModel getMultiThumbModel()"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void setRadial(boolean)" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="java.awt.MultipleGradientPaint getGradient()"
                class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="boolean isRadial()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="boolean isReflected()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <field name="picker" class="org.jdesktop.swingx.color.GradientPreviewPanel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneListener"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneListener"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$RepaintOnFocus"/>
        <method signature="void focusLost(java.awt.event.FocusEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$RepaintOnFocus"/>
        <method signature="void focusGained(java.awt.event.FocusEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$RepaintOnFocus"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane$1"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$NotHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$NotHighlightPredicate"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$NotHighlightPredicate"/>
        <method signature="org.jdesktop.swingx.decorator.HighlightPredicate getHighlightPredicate()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$NotHighlightPredicate"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI$VerticalLayoutUIResource"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI$VerticalLayoutUIResource"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI,int)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneContainerUI$VerticalLayoutUIResource"/>
        <class name="org.jdesktop.swingx.renderer.HyperlinkProvider$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider$1"/>
        <class name="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXCollapsiblePane$Direction,java.awt.LayoutManager)"
                class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="org.jdesktop.swingx.JXCollapsiblePane$Direction getDirection()"
                class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setMinimumSize(java.awt.Dimension)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="java.awt.Dimension getPreferredSize()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setAnimated(boolean)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setBorder(javax.swing.border.Border)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setDirection(org.jdesktop.swingx.JXCollapsiblePane$Direction)"
                class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void removeAll()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="java.awt.Container getContentPane()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setPreferredSize(java.awt.Dimension)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void remove(java.awt.Component)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setLayout(java.awt.LayoutManager)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="javax.swing.border.Border getBorder()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void &lt;init&gt;(java.awt.LayoutManager)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="java.awt.Dimension getMinimumSize()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setCollapsed(boolean)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="boolean isCollapsed()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void remove(int)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void addImpl(java.awt.Component,java.lang.Object,int)"
                class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="boolean isAnimated()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXCollapsiblePane$Direction)"
                class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void setContentPane(java.awt.Container)" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <field name="ANIMATION_STATE_KEY" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <field name="COLLAPSE_ICON" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <field name="TOGGLE_ACTION" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <field name="EXPAND_ICON" class="org.jdesktop.swingx.JXCollapsiblePane"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleCollapsedAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleCollapsedAction"/>
        <method signature="boolean isEnabled()"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleCollapsedAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleCollapsedAction"/>
        <class name="org.jdesktop.swingx.rollover.RolloverRenderer"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.rollover.RolloverRenderer"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.rollover.RolloverRenderer"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$IdentifierHighlightPredicate"/>
        <method signature="void &lt;init&gt;(java.lang.Object[])"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$IdentifierHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$IdentifierHighlightPredicate"/>
        <method signature="java.lang.Object[] getIdentifiers()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$IdentifierHighlightPredicate"/>
        <class name="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setFillPaint(java.awt.Paint)" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setBorderPaint(java.awt.Paint)"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setAreaEffects(org.jdesktop.swingx.painter.effects.AreaEffect[])"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="boolean isPaintStretched()" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setStyle(org.jdesktop.swingx.painter.AbstractAreaPainter$Style)"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="float getBorderWidth()" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setBorderWidth(float)" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="java.awt.Paint getBorderPaint()" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="java.awt.Paint getFillPaint()" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()"
                class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <method signature="void setPaintStretched(boolean)" class="org.jdesktop.swingx.painter.AbstractAreaPainter"/>
        <class name="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="java.lang.String getFilteredStringAt(int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="int getDepth()" class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="boolean isExpanded()" class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="boolean isHierarchical()" class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTreeTable)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="java.lang.String getStringAt(int,int)"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="org.jdesktop.swingx.JXTreeTable getTreeTable()"
                class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <method signature="boolean isLeaf()" class="org.jdesktop.swingx.JXTreeTable$TreeTableDataAdapter"/>
        <class name="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isTargetableAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isServerAction(java.lang.Object)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="void setInstance(org.jdesktop.swingx.action.ActionManager)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="java.util.Set getActionIDs()" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="org.jdesktop.swingx.action.CompositeAction getCompositeAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="void setSelected(java.lang.Object,boolean)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isSelected(java.lang.Object)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="javax.swing.Action addAction(java.lang.Object,javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isBoundAction(java.lang.Object)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="org.jdesktop.swingx.action.ActionManager getInstance()"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="void setEnabled(java.lang.Object,boolean)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="org.jdesktop.swingx.action.TargetableAction getTargetableAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isCompositeAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="javax.swing.Action addAction(javax.swing.Action)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isEnabled(java.lang.Object)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="javax.swing.Action getAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="boolean isStateAction(java.lang.Object)" class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="org.jdesktop.swingx.action.BoundAction getBoundAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="org.jdesktop.swingx.action.ServerAction getServerAction(java.lang.Object)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="void registerCallback(java.lang.Object,java.lang.Object,java.lang.String)"
                class="org.jdesktop.swingx.action.ActionManager"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.ActionManager"/>
        <class name="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="javax.swing.Icon getSmallIcon()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setStateAction()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setLargeIcon(javax.swing.Icon)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.String getName()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setMnemonic(int)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setAccelerator(javax.swing.KeyStroke)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setShortDescription(java.lang.String)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.Object getGroup()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void dispose()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setActionCommand(java.lang.Object)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="javax.swing.Icon getLargeIcon()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="int getMnemonic()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.String getShortDescription()"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setName(java.lang.String)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="javax.swing.KeyStroke getAccelerator()"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.String getLongDescription()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setMnemonic(java.lang.String)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setGroup(java.lang.Object)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setSmallIcon(javax.swing.Icon)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="boolean isStateAction()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setStateAction(boolean)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.action.AbstractActionExt)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="java.lang.Object getActionCommand()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setLongDescription(java.lang.String)"
                class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void setSelected(boolean)" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <field name="IS_STATE" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <field name="LARGE_ICON" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <field name="GROUP" class="org.jdesktop.swingx.action.AbstractActionExt"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.beans.PropertyChangeListener[] getPropertyChangeListeners()"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getModel()"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(org.jdesktop.swingx.MultiSplitLayout$Split,java.lang.String)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="int getUserMinSize()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void printModel(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void layoutByWeight(java.awt.Container)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void removeLayoutNode(java.lang.String)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="int getLayoutMode()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.lang.String getNameForComponent(java.awt.Component)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setLayoutByWeight(boolean)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setRemoveDividers(boolean)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="boolean getRemoveDividers()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="boolean getFloatingDividers()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(int,int)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.awt.Component getComponentForNode(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.lang.String)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="int getDividerSize()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.util.List dividersThatOverlap(java.awt.Rectangle)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void layoutContainer(java.awt.Container)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getNodeForComponent(java.awt.Component)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void displayNode(java.lang.String,boolean)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setDividerSize(int)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getNodeForName(java.lang.String)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setUserMinSize(int)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="boolean getLayoutByWeight()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="java.awt.Dimension maximumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node getNodeForComponent(org.jdesktop.swingx.MultiSplitLayout$Split,java.awt.Component)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="boolean hasModel()" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setFloatingDividers(boolean)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setModel(org.jdesktop.swingx.MultiSplitLayout$Node)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void setLayoutMode(int)" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.MultiSplitLayout"/>
        <field name="DEFAULT_LAYOUT" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <field name="NO_MIN_SIZE_LAYOUT" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <field name="USER_MIN_SIZE_LAYOUT" class="org.jdesktop.swingx.MultiSplitLayout"/>
        <class name="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void setUnwrapUserObject(boolean)" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="boolean getUnwrapUserObject()" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void format(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="org.jdesktop.swingx.renderer.WrappingIconPanel getRendererComponent(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.ComponentProvider,boolean)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="org.jdesktop.swingx.renderer.WrappingIconPanel createRendererComponent()"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="org.jdesktop.swingx.renderer.ComponentProvider getWrappee()"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="java.lang.Object adjustContextValue(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="java.lang.Object getUnwrappedValue(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="javax.swing.JComponent createRendererComponent()"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void configureState(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.StringValue,boolean)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider,boolean)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="javax.swing.Icon getValueAsIcon(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void setWrappee(org.jdesktop.swingx.renderer.ComponentProvider)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void restoreContextValue(org.jdesktop.swingx.renderer.CellContext,java.lang.Object)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.IconValue,org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <field name="wrappee" class="org.jdesktop.swingx.renderer.WrappingProvider"/>
        <class name="org.jdesktop.swingx.color.GradientThumbRenderer"/>
        <method signature="javax.swing.JComponent getThumbRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider,int,boolean)"
                class="org.jdesktop.swingx.color.GradientThumbRenderer"/>
        <method signature="void paintComponent(java.awt.Graphics)"
                class="org.jdesktop.swingx.color.GradientThumbRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.color.GradientThumbRenderer"/>
        <class name="org.jdesktop.swingx.JXImagePanel$MouseHandler"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImagePanel$MouseHandler"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImagePanel$MouseHandler"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXImagePanel$MouseHandler"/>
        <class name="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void setShape(java.awt.Shape)" class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Paint)"
                class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="java.awt.Shape getShape()" class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Paint,org.jdesktop.swingx.painter.AbstractAreaPainter$Style)"
                class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.ShapePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.ShapePainter"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicHTMLViewFactory"/>
        <method signature="javax.swing.text.View create(javax.swing.text.Element)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml$BasicHTMLViewFactory"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$3"/>
        <method signature="void windowClosing(java.awt.event.WindowEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$3"/>
        <class name="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="boolean isAddedFromInvisibleEvent(int)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void addColumnModelListener(javax.swing.event.TableColumnModelListener)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void moveToVisible(org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="javax.swing.event.EventListenerList getEventListenerList()"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void addColumn(javax.swing.table.TableColumn)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void moveToInvisible(org.jdesktop.swingx.table.TableColumnExt)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void removeColumn(javax.swing.table.TableColumn)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="boolean isRemovedToInvisibleEvent(int)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void moveColumn(int,int)" class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void fireColumnPropertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void removeColumnModelListener(javax.swing.event.TableColumnModelListener)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="int getColumnCount(boolean)" class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="java.util.List getColumns(boolean)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="org.jdesktop.swingx.event.TableColumnModelExtListener[] getTableColumnModelExtListeners()"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <method signature="org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)"
                class="org.jdesktop.swingx.table.DefaultTableColumnModelExt"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTipOfTheDayUI$1"/>
        <class name="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="org.jdesktop.swingx.renderer.DefaultVisuals getDefaultVisuals()"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void format(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="org.jdesktop.swingx.renderer.DefaultVisuals createDefaultVisuals()"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void configureContent(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="javax.swing.Icon getValueAsIcon(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.renderer.StringValue,int)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void setStringValue(org.jdesktop.swingx.renderer.StringValue)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="javax.swing.JComponent createRendererComponent()"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="int getHorizontalAlignment()" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="java.lang.String getValueAsString(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void configureVisuals(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue getStringValue()"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void configureState(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <method signature="void setHorizontalAlignment(int)" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <field name="formatter" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <field name="alignment" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <field name="rendererComponent" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <field name="defaultVisuals" class="org.jdesktop.swingx.renderer.ComponentProvider"/>
        <class name="org.jdesktop.swingx.JXDialog"/>
        <method signature="org.jdesktop.swingx.JXRootPane createRootPane()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="java.lang.String getUIString(java.lang.String)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void setStatusBar(org.jdesktop.swingx.JXStatusBar)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="org.jdesktop.swingx.JXRootPane getRootPane()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void updateLocaleState(java.util.Locale)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void &lt;init&gt;(java.awt.Dialog,javax.swing.JComponent)"
                class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void setToolBar(javax.swing.JToolBar)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="javax.swing.JToolBar getToolBar()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void doClose()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="javax.swing.JComponent createButtonPanel()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void setTitleFromContent()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="javax.swing.JRootPane createRootPane()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="org.jdesktop.swingx.JXStatusBar getStatusBar()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="java.lang.String getUIString(java.lang.String,java.util.Locale)"
                class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void &lt;init&gt;(java.awt.Frame,javax.swing.JComponent)"
                class="org.jdesktop.swingx.JXDialog"/>
        <method signature="javax.swing.JRootPane getRootPane()" class="org.jdesktop.swingx.JXDialog"/>
        <method signature="void &lt;init&gt;(javax.swing.JComponent)" class="org.jdesktop.swingx.JXDialog"/>
        <field name="content" class="org.jdesktop.swingx.JXDialog"/>
        <field name="UIPREFIX" class="org.jdesktop.swingx.JXDialog"/>
        <field name="CLOSE_ACTION_COMMAND" class="org.jdesktop.swingx.JXDialog"/>
        <field name="EXECUTE_ACTION_COMMAND" class="org.jdesktop.swingx.JXDialog"/>
        <class name="org.jdesktop.swingx.autocomplete.workarounds.MacOSXPopupLocationFix$1"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteFocusAdapter"/>
        <class name="org.jdesktop.swingx.color.GradientPreviewPanel$1"/>
        <class name="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void setLinkAction(org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="org.jdesktop.swingx.JXHyperlink createRendererComponent()"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void format(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void setLinkAction(org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction,java.lang.Class)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="java.lang.String getString(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="boolean isTargetable(java.lang.Object)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="javax.swing.JComponent createRendererComponent()"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void setTargetClass(java.lang.Class)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction createDefaultLinkAction()"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.hyperlink.AbstractHyperlinkAction,java.lang.Class)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void configureState(org.jdesktop.swingx.renderer.CellContext)"
                class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <field name="targetClass" class="org.jdesktop.swingx.renderer.HyperlinkProvider"/>
        <class name="org.jdesktop.swingx.painter.ShapePainter$1"/>
        <class name="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="boolean isDescendingFrom(java.awt.Component,java.awt.Component)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="boolean isUIInstallable(java.lang.Object)" class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setComponentTreeFont(java.awt.Component,java.awt.Font)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void updateAllComponentTreeUIs(java.awt.Window)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setComponentTreeLocale(java.awt.Component,java.util.Locale)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void updateAllComponentTreeUIs()" class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setComponentTreeEnabled(java.awt.Component,boolean)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void updateMnemonicBinding(javax.swing.JComponent,java.lang.String)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setComponentTreeForeground(java.awt.Component,java.awt.Color)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setHtmlFont(javax.swing.text.html.HTMLDocument,java.awt.Font)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void updateMnemonicBinding(javax.swing.JComponent,java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="void setComponentTreeBackground(java.awt.Component,java.awt.Color)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <method signature="java.lang.Object getAncestor(java.lang.Class,java.awt.Component)"
                class="org.jdesktop.swingx.SwingXUtilities"/>
        <class name="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="java.lang.String toString()" class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="org.jdesktop.swingx.action.TargetManager getTargetManager()"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void itemStateChanged(java.awt.event.ItemEvent)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.action.TargetableAction"/>
        <method signature="void setTargetManager(org.jdesktop.swingx.action.TargetManager)"
                class="org.jdesktop.swingx.action.TargetableAction"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <method signature="void removeLayoutComponent(java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <method signature="void layoutContainer(java.awt.Container)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$ErrorPaneLayout"/>
        <class name="org.jdesktop.swingx.JXButton"/>
        <method signature="void setPainting(boolean)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void paintComponent(java.awt.Graphics)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void repaint()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="boolean isPaintBorderInsets()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="boolean isContentAreaFilled()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void &lt;init&gt;(java.lang.String)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setForegroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXButton"/>
        <method signature="boolean isOpaque()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void &lt;init&gt;(javax.swing.Action)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="org.jdesktop.swingx.painter.Painter getBackgroundPainter()"
                class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setText(java.lang.String)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setContentAreaFilled(boolean)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void init(java.lang.String,javax.swing.Icon)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="org.jdesktop.swingx.painter.Painter getForegroundPainter()"
                class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.JXButton"/>
        <method signature="java.lang.String getText()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setPaintBorderInsets(boolean)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="boolean isBorderPainted()" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void setBorderPainted(boolean)" class="org.jdesktop.swingx.JXButton"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXButton"/>
        <class name="org.jdesktop.swingx.util.PaintUtils"/>
        <method signature="void paintGradient(java.awt.Graphics,javax.swing.JComponent,java.awt.Color,java.awt.Color)"
                class="org.jdesktop.swingx.util.PaintUtils"/>
        <method signature="java.awt.Paint resizeGradient(java.awt.Paint,int,int)"
                class="org.jdesktop.swingx.util.PaintUtils"/>
        <method signature="java.awt.Rectangle getTextBounds(java.awt.Graphics,javax.swing.JLabel)"
                class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="AERITH" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="BLUE_EXPERIENCE" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="NIGHT_GRAY_LIGHT" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="MAC_OSX" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="NIGHT_GRAY" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="MAC_OSX_SELECTED" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="RED_XP" class="org.jdesktop.swingx.util.PaintUtils"/>
        <field name="GRAY" class="org.jdesktop.swingx.util.PaintUtils"/>
        <class name="org.jdesktop.swingx.JXGraph$PanHandler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXGraph$PanHandler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXGraph$PanHandler"/>
        <class name="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void &lt;init&gt;(int,float,java.awt.Color)"
                class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void setSize(int)" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="java.awt.Color getColor()" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="java.awt.image.BufferedImage createShadow(java.awt.image.BufferedImage)"
                class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void setOpacity(float)" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)"
                class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="float getOpacity()" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <method signature="void setColor(java.awt.Color)" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <field name="COLOR_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <field name="SIZE_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <field name="OPACITY_CHANGED_PROPERTY" class="org.jdesktop.swingx.graphics.ShadowRenderer"/>
        <class name="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="java.lang.Object getSelectedItem()"
                class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="int getItemCount()" class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="java.lang.Object getItem(int)"
                class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="javax.swing.text.JTextComponent getTextComponent()"
                class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="void setSelectedItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <method signature="void &lt;init&gt;(javax.swing.text.JTextComponent,java.util.List)"
                class="org.jdesktop.swingx.autocomplete.TextComponentAdaptor"/>
        <class name="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="void setWeight(double)" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="void setVisible(boolean)" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="java.awt.Rectangle getBounds()" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Split getParent()"
                class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="void setBounds(java.awt.Rectangle)" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="void setParent(org.jdesktop.swingx.MultiSplitLayout$Split)"
                class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node previousSibling()"
                class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="org.jdesktop.swingx.MultiSplitLayout$Node nextSibling()"
                class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="double getWeight()" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.MultiSplitLayout$Node"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$27"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$27"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$28"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$28"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$29"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$29"/>
        <class name="org.jdesktop.swingx.plaf.metal.MetalLookAndFeelAddons"/>
        <method signature="void initialize()" class="org.jdesktop.swingx.plaf.metal.MetalLookAndFeelAddons"/>
        <method signature="void uninitialize()" class="org.jdesktop.swingx.plaf.metal.MetalLookAndFeelAddons"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.metal.MetalLookAndFeelAddons"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$23"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$23"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$24"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$24"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$25"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$25"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$26"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$26"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$20"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$20"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$21"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$21"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$22"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$22"/>
        <class name="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void install(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void localeChanged()" class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void installListeners()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void updateFormatters()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void uninstall(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void uninstallListeners()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void firstDisplayedDayChanged()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent getHeaderComponent()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent createCalendarHeader()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader getHeaderComponent()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$SpinningCalendarHeader createCalendarHeader()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <field name="ARROWS_SURROUND_MONTH" class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <field name="FOCUSABLE_SPINNER_TEXT" class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler"/>
        <class name="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="boolean isSelectionInInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void addSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="boolean isSelectable(java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="java.util.Date getLastSelectionDate()"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="java.util.SortedSet getSelection()"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="boolean isSelected(java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void clearSelection()" class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void setUnselectableDates(java.util.SortedSet)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="java.util.SortedSet getUnselectableDates()"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void removeSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void &lt;init&gt;(java.util.Locale)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void setSelection(java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode getSelectionMode()"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void setSelectionMode(org.jdesktop.swingx.calendar.DateSelectionModel$SelectionMode)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void setSelectionInterval(java.util.Date,java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="java.util.Date getFirstSelectionDate()"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="boolean isUnselectableDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="boolean isSelectionEmpty()" class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="java.util.Date getNormalizedDate(java.util.Date)"
                class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.calendar.SingleDaySelectionModel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue createDayStringValue(java.util.Locale)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="void setLocale(java.util.Locale)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue createMonthHeaderStringValue(java.util.Locale)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="org.jdesktop.swingx.renderer.StringValue createWeekOfYearStringValue(java.util.Locale)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="javax.swing.JComponent prepareRenderingComponent(org.jdesktop.swingx.JXMonthView,java.util.Calendar,org.jdesktop.swingx.plaf.basic.CalendarState)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicCalendarRenderingHandler"/>
        <class name="org.jdesktop.swingx.plaf.HyperlinkAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.HyperlinkAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.HyperlinkAddon"/>
        <class name="org.jdesktop.swingx.JXGlassBox$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXGlassBox$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <method signature="void setActions(javax.swing.Action,javax.swing.Action,javax.swing.Action)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <method signature="void setFont(java.awt.Font)"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <method signature="void &lt;init&gt;()"
                class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <field name="zoomOutLink"
               class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <field name="nextButton" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <field name="prevButton" class="org.jdesktop.swingx.plaf.basic.BasicCalendarHeaderHandler$BasicCalendarHeader"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <method signature="void columnRemoved(javax.swing.event.TableColumnModelEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <method signature="void columnSelectionChanged(javax.swing.event.ListSelectionEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <method signature="void columnMarginChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <method signature="void columnAdded(javax.swing.event.TableColumnModelEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <method signature="void columnMoved(javax.swing.event.TableColumnModelEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$3"/>
        <class name="org.jdesktop.swingx.JXGlassBox$2"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)" class="org.jdesktop.swingx.JXGlassBox$2"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$1"/>
        <class name="org.jdesktop.swingx.table.ColumnControlButton$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.ColumnControlButton$2"/>
        <class name="org.jdesktop.swingx.error.ErrorSupport"/>
        <method signature="void removeErrorListener(org.jdesktop.swingx.error.ErrorListener)"
                class="org.jdesktop.swingx.error.ErrorSupport"/>
        <method signature="void addErrorListener(org.jdesktop.swingx.error.ErrorListener)"
                class="org.jdesktop.swingx.error.ErrorSupport"/>
        <method signature="void fireErrorEvent(java.lang.Throwable)" class="org.jdesktop.swingx.error.ErrorSupport"/>
        <method signature="void &lt;init&gt;(java.lang.Object)" class="org.jdesktop.swingx.error.ErrorSupport"/>
        <method signature="org.jdesktop.swingx.error.ErrorListener[] getErrorListeners()"
                class="org.jdesktop.swingx.error.ErrorSupport"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorFrame"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI,org.jdesktop.swingx.JXErrorPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicErrorPaneUI$JXErrorFrame"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$18"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$18"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$19"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$19"/>
        <class name="org.jdesktop.swingx.rollover.TreeRolloverController"/>
        <method signature="java.awt.Point getFocusedCell()"
                class="org.jdesktop.swingx.rollover.TreeRolloverController"/>
        <method signature="org.jdesktop.swingx.rollover.RolloverRenderer getRolloverRenderer(java.awt.Point,boolean)"
                class="org.jdesktop.swingx.rollover.TreeRolloverController"/>
        <method signature="void rollover(java.awt.Point,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.TreeRolloverController"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.TreeRolloverController"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$16"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$16"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$17"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$17"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$14"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$14"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$15"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$15"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$12"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$12"/>
        <class name="org.jdesktop.swingx.painter.effects.NeonBorderEffect$1"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$13"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$13"/>
        <class name="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <method signature="void endSearching()" class="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <method signature="void addTarget(java.awt.Container)"
                class="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <method signature="void removeTarget(java.awt.Container)"
                class="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.search.SearchFactory)"
                class="org.jdesktop.swingx.search.SearchFactory$FindRemover"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$10"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$10"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$11"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$11"/>
        <class name="org.jdesktop.swingx.table.NumberEditorExt$3"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.table.NumberEditorExt$3"/>
        <class name="org.jdesktop.swingx.table.NumberEditorExt$2"/>
        <method signature="boolean verify(javax.swing.JComponent)" class="org.jdesktop.swingx.table.NumberEditorExt$2"/>
        <class name="org.jdesktop.swingx.table.NumberEditorExt$1"/>
        <method signature="java.lang.Object getCellEditorValue()" class="org.jdesktop.swingx.table.NumberEditorExt$1"/>
        <method signature="void setValue(java.lang.Object)" class="org.jdesktop.swingx.table.NumberEditorExt$1"/>
        <class name="org.jdesktop.swingx.JXTaskPaneContainer$1"/>
        <method signature="void componentRemoved(java.awt.event.ContainerEvent)"
                class="org.jdesktop.swingx.JXTaskPaneContainer$1"/>
        <class name="org.jdesktop.swingx.error.ErrorEvent"/>
        <method signature="java.lang.Throwable getThrowable()" class="org.jdesktop.swingx.error.ErrorEvent"/>
        <method signature="void &lt;init&gt;(java.lang.Throwable,java.lang.Object)"
                class="org.jdesktop.swingx.error.ErrorEvent"/>
        <class name="org.jdesktop.swingx.plaf.MultiThumbSliderAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.MultiThumbSliderAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.MultiThumbSliderAddon"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$4"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$4"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$BlendingBgrContext"/>
        <method signature="void compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)"
                class="org.jdesktop.swingx.graphics.BlendComposite$BlendingBgrContext"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$3"/>
        <method signature="void focusGained(java.awt.event.FocusEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$3"/>
        <class name="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate,org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="boolean canHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void uninstallPainterListener()" class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="java.beans.PropertyChangeListener createPainterListener()"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="java.awt.Component doHighlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="java.beans.PropertyChangeListener getPainterListener()"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.decorator.HighlightPredicate)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <method signature="void installPainterListener()" class="org.jdesktop.swingx.decorator.PainterHighlighter"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$2"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$2"/>
        <class name="org.jdesktop.swingx.painter.effects.InnerGlowPathEffect"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.effects.InnerGlowPathEffect"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$1"/>
        <method signature="void keyPressed(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.autocomplete.AutoCompleteDecorator$1"/>
        <class name="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="void &lt;init&gt;(javax.swing.text.Document,javax.swing.event.DocumentEvent)"
                class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="javax.swing.text.Document getDocument()"
                class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="int getOffset()" class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="javax.swing.event.DocumentEvent$ElementChange getChange(javax.swing.text.Element)"
                class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="javax.swing.event.DocumentEvent$EventType getType()"
                class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <method signature="int getLength()" class="org.jdesktop.swingx.autocomplete.DelegatingDocumentEvent"/>
        <class name="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="int getIconWidth()" class="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="int getIconHeight()" class="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="void &lt;init&gt;(java.awt.Dimension)" class="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.painter.PainterIcon"/>
        <method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)"
                class="org.jdesktop.swingx.painter.PainterIcon"/>
        <class name="org.jdesktop.swingx.decorator.PatternMatcher"/>
        <method signature="void setPattern(java.util.regex.Pattern)"
                class="org.jdesktop.swingx.decorator.PatternMatcher"/>
        <method signature="java.util.regex.Pattern getPattern()" class="org.jdesktop.swingx.decorator.PatternMatcher"/>
        <class name="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
        <method signature="java.lang.String getUserName()" class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
        <method signature="void setUserName(java.lang.String)" class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml"/>
        <method signature="javax.swing.text.View createHTMLView(javax.swing.JComponent,java.lang.String)"
                class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml"/>
        <class name="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="int getIconPosition()" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void setPadding(int)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon,int,int)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void setIconPosition(int)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon,int)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="java.awt.Insets getBorderInsets(java.awt.Component)"
                class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="int getPadding()" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)"
                class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="boolean isBorderOpaque()" class="org.jdesktop.swingx.border.IconBorder"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.border.IconBorder"/>
        <field name="EMPTY_ICON" class="org.jdesktop.swingx.border.IconBorder"/>
        <class name="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="org.jdesktop.swingx.multislider.Thumb getThumbAt(int)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="java.util.List getSortedThumbs()"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="int getThumbCount()" class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="void insertThumb(float,java.lang.Object,int)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="int addThumb(float,java.lang.Object)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="void removeThumb(int)" class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="java.util.Iterator iterator()"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <method signature="int getThumbIndex(org.jdesktop.swingx.multislider.Thumb)"
                class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <field name="thumbs" class="org.jdesktop.swingx.multislider.DefaultMultiThumbModel"/>
        <class name="org.jdesktop.swingx.StackLayout"/>
        <method signature="float getLayoutAlignmentX(java.awt.Container)" class="org.jdesktop.swingx.StackLayout"/>
        <method signature="float getLayoutAlignmentY(java.awt.Container)" class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void addLayoutComponent(java.awt.Component,java.lang.Object)"
                class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void removeLayoutComponent(java.awt.Component)" class="org.jdesktop.swingx.StackLayout"/>
        <method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.StackLayout"/>
        <method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.StackLayout"/>
        <method signature="java.awt.Dimension maximumLayoutSize(java.awt.Container)"
                class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void addLayoutComponent(java.lang.String,java.awt.Component)"
                class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void invalidateLayout(java.awt.Container)" class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.StackLayout"/>
        <method signature="void layoutContainer(java.awt.Container)" class="org.jdesktop.swingx.StackLayout"/>
        <field name="BOTTOM" class="org.jdesktop.swingx.StackLayout"/>
        <field name="TOP" class="org.jdesktop.swingx.StackLayout"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$30"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$30"/>
        <class name="org.jdesktop.swingx.graphics.BlendComposite$Blender$31"/>
        <method signature="void blend(int[],int[],int[])"
                class="org.jdesktop.swingx.graphics.BlendComposite$Blender$31"/>
        <class name="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="int getDelay()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void &lt;init&gt;(java.awt.Dimension)" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="org.jdesktop.swingx.painter.BusyPainter createBusyPainter(java.awt.Dimension)"
                class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void removeNotify()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void setDirection(org.jdesktop.swingx.JXBusyLabel$Direction)"
                class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void initPainter(java.awt.Dimension)" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="java.lang.String getUIClassID()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void updateUI()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void addNotify()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="boolean isBusy()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void setDelay(int)" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void setBusyPainter(org.jdesktop.swingx.painter.BusyPainter)"
                class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void frameChanged()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="org.jdesktop.swingx.painter.BusyPainter getBusyPainter()"
                class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void setBusy(boolean)" class="org.jdesktop.swingx.JXBusyLabel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXBusyLabel"/>
        <field name="uiClassID" class="org.jdesktop.swingx.JXBusyLabel"/>
        <class name="org.jdesktop.swingx.autocomplete.AutoCompleteDocument$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleListener"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleListener"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleListener"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleListener"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleListener"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void install(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void installListeners()" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void componentOrientationChanged()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void installNavigationActions()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void monthStringBackgroundChanged()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void uninstall(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void uninstallListeners()" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void fontChanged()" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="java.awt.Font createDerivedFont()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent getHeaderComponent()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="javax.swing.JComponent createCalendarHeader()"
                class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <field name="monthUpImage" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <field name="monthView" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <field name="monthDownImage" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <field name="uiControllerID" class="org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler"/>
        <class name="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseClicked(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXTableHeader$HeaderListener"/>
        <class name="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mouseMoved(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mouseExited(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void keyPressed(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mouseEntered(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mousePressed(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void keyReleased(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mouseDragged(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void keyTyped(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <method signature="void mouseReleased(java.awt.event.MouseEvent)"
                class="org.jdesktop.swingx.JXMultiSplitPane$InputHandler"/>
        <class name="org.jdesktop.swingx.autocomplete.ObjectToStringConverter$DefaultObjectToStringConverter"/>
        <method signature="java.lang.String getPreferredStringForItem(java.lang.Object)"
                class="org.jdesktop.swingx.autocomplete.ObjectToStringConverter$DefaultObjectToStringConverter"/>
        <class name="org.jdesktop.swingx.JXMonthView$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXMonthView$2"/>
        <class name="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="org.jdesktop.swingx.JXMonthView getComponent()"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarAdapter install(java.util.Calendar,org.jdesktop.swingx.plaf.basic.CalendarState)"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXMonthView)"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean isFlagged()" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean isUnselectable()" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean isEditable()" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean isSelected()" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="java.lang.Object getValueAt(int,int)"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean isCellEditable(int,int)" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="java.lang.Object getFilteredValueAt(int,int)"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="org.jdesktop.swingx.plaf.basic.CalendarState getCalendarState()"
                class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <method signature="boolean hasFocus()" class="org.jdesktop.swingx.plaf.basic.CalendarAdapter"/>
        <class name="org.jdesktop.swingx.JXMonthView$1"/>
        <method signature="void valueChanged(org.jdesktop.swingx.event.DateSelectionEvent)"
                class="org.jdesktop.swingx.JXMonthView$1"/>
        <class name="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="void exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="void exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,int)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="boolean canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXImageView)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="boolean importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <method signature="int getSourceActions(javax.swing.JComponent)"
                class="org.jdesktop.swingx.JXImageView$DnDHandler"/>
        <class name="org.jdesktop.swingx.multislider.Thumb"/>
        <method signature="java.lang.Object getObject()" class="org.jdesktop.swingx.multislider.Thumb"/>
        <method signature="void setPosition(float)" class="org.jdesktop.swingx.multislider.Thumb"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.multislider.MultiThumbModel)"
                class="org.jdesktop.swingx.multislider.Thumb"/>
        <method signature="void setObject(java.lang.Object)" class="org.jdesktop.swingx.multislider.Thumb"/>
        <method signature="float getPosition()" class="org.jdesktop.swingx.multislider.Thumb"/>
        <class name="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <method signature="void fireStateChanged()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <method signature="java.lang.Object getPreviousValue()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <method signature="java.lang.Object getNextValue()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <method signature="void setValue(java.lang.Object)"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <method signature="java.lang.Object getValue()"
                class="org.jdesktop.swingx.plaf.basic.SpinningCalendarHeaderHandler$YearSpinnerModel"/>
        <class name="org.jdesktop.swingx.table.TableColumnExt$1"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)"
                class="org.jdesktop.swingx.table.TableColumnExt$1"/>
        <class name="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;(int,java.awt.Insets)" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;(int)" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="int getFixedWidth()" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="java.awt.Insets getInsets()" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior,java.awt.Insets)"
                class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior getResizeBehavior()"
                class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void setFixedWidth(int)" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXStatusBar$Constraint$ResizeBehavior)"
                class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;(java.awt.Insets)" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXStatusBar$Constraint"/>
        <class name="org.jdesktop.swingx.JXLoginPane$6"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXLoginPane$6"/>
        <class name="org.jdesktop.swingx.JXLoginPane$7"/>
        <class name="org.jdesktop.swingx.rollover.TableRolloverProducer"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.rollover.TableRolloverProducer"/>
        <method signature="void updateRolloverPoint(javax.swing.JComponent,java.awt.Point)"
                class="org.jdesktop.swingx.rollover.TableRolloverProducer"/>
        <class name="org.jdesktop.swingx.JXLoginPane$4"/>
        <method signature="void windowClosing(java.awt.event.WindowEvent)" class="org.jdesktop.swingx.JXLoginPane$4"/>
        <class name="org.jdesktop.swingx.JXLoginPane$5"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXLoginPane$5"/>
        <class name="org.jdesktop.swingx.JXButton$1"/>
        <class name="org.jdesktop.swingx.plaf.BusyLabelUI"/>
        <method signature="int getDelay()" class="org.jdesktop.swingx.plaf.BusyLabelUI"/>
        <method signature="org.jdesktop.swingx.painter.BusyPainter getBusyPainter(java.awt.Dimension)"
                class="org.jdesktop.swingx.plaf.BusyLabelUI"/>
        <class name="org.jdesktop.swingx.rollover.RolloverController$1"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.rollover.RolloverController$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.rollover.RolloverController$1"/>
        <class name="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <method signature="java.awt.Image getBanner()" class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <method signature="void installDefaults()" class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <method signature="void installUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <method signature="javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)"
                class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI"/>
        <class name="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void setPreferences(java.util.prefs.Preferences)"
                class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="java.lang.String[] getUserNames()" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void saveUserNames()" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void removeUserName(java.lang.String)"
                class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="boolean containsUserName(java.lang.String)"
                class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="java.util.prefs.Preferences getPreferences()"
                class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void loadUserNames()" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void setUserNames(java.lang.String[])"
                class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <method signature="void addUserName(java.lang.String)" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
        <class name="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="java.awt.Color HSLtoRGB(float,float,float)"
                class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="float[] RGBtoHSL(java.awt.Color,float[])"
                class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="float[] RGBtoHSL(int,int,int,float[])" class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="float[] RGBtoHSL(int,int,int)" class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="int[] HSLtoRGB(float,float,float,int[])"
                class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <method signature="float[] RGBtoHSL(java.awt.Color)" class="org.jdesktop.swingx.graphics.ColorUtilities"/>
        <class name="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="java.lang.String getUIString(java.lang.String)"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="java.beans.PropertyChangeListener getPatternModelListener()"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void bind()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void match()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void bindSearchLabel(java.util.Locale)" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.search.PatternModel createPatternModel()"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void setLocale(java.util.Locale)" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void initActions()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.action.AbstractActionExt createBoundAction(java.lang.String,java.lang.String)"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void initExecutables()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void updateLocaleState(java.util.Locale)" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void refreshEmptyFromModel()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void refreshModelFromDocument()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="javax.swing.event.DocumentListener getSearchFieldListener()"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.action.AbstractActionExt createModelStateAction(java.lang.String,java.lang.String,boolean)"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void initComponents()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void initPatternActions()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="java.lang.String getUIString(java.lang.String,java.util.Locale)"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.search.PatternModel getPatternModel()"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.action.ActionContainerFactory getActionContainerFactory()"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void refreshDocumentFromModel()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="int getSearchFieldWidth()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="org.jdesktop.swingx.action.AbstractActionExt getAction(java.lang.String)"
                class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void refreshPatternFromModel()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="MATCH_ACTION_COMMAND" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="SEARCH_FIELD_MNEMONIC" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="patternModel" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="matchCheck" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="searchField" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="searchLabel" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="SEARCH_TITLE" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <field name="SEARCH_FIELD_LABEL" class="org.jdesktop.swingx.AbstractPatternPanel"/>
        <class name="org.jdesktop.swingx.JXList$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXList$1"/>
        <class name="org.jdesktop.swingx.JXList$2"/>
        <method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="org.jdesktop.swingx.JXList$2"/>
        <class name="org.jdesktop.swingx.JXLoginPane$3"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXLoginPane$3"/>
        <class name="org.jdesktop.swingx.JXLoginPane$2"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXLoginPane$2"/>
        <class name="org.jdesktop.swingx.JXLoginPane$1"/>
        <method signature="boolean dispatchKeyEvent(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXLoginPane$1"/>
        <class name="org.jdesktop.swingx.JXBusyLabel$1"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jdesktop.swingx.JXBusyLabel$1"/>
        <class name="org.jdesktop.swingx.JXEditorPane$PropertyHandler"/>
        <method signature="void propertyChange(java.beans.PropertyChangeEvent)"
                class="org.jdesktop.swingx.JXEditorPane$PropertyHandler"/>
        <class name="org.jdesktop.swingx.JXImagePanel$Style"/>
        <method signature="org.jdesktop.swingx.JXImagePanel$Style[] values()"
                class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <method signature="org.jdesktop.swingx.JXImagePanel$Style valueOf(java.lang.String)"
                class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <field name="CENTERED" class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <field name="TILED" class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <field name="SCALED_KEEP_ASPECT_RATIO" class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <field name="SCALED" class="org.jdesktop.swingx.JXImagePanel$Style"/>
        <class name="org.jdesktop.swingx.table.NumberEditorNumberFormat"/>
        <method signature="java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)"
                class="org.jdesktop.swingx.table.NumberEditorNumberFormat"/>
        <method signature="java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)"
                class="org.jdesktop.swingx.table.NumberEditorNumberFormat"/>
        <method signature="void &lt;init&gt;(java.text.NumberFormat)"
                class="org.jdesktop.swingx.table.NumberEditorNumberFormat"/>
        <method signature="java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)"
                class="org.jdesktop.swingx.table.NumberEditorNumberFormat"/>
        <class name="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.hyperlink.LinkModel,java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void uninstallTarget()" class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void installTarget()" class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void updateFromTarget()" class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void actionPerformed(java.awt.event.ActionEvent)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void &lt;init&gt;(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.hyperlink.LinkModel)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <method signature="void setVisitingDelegate(java.awt.event.ActionListener)"
                class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <field name="VISIT_ACTION" class="org.jdesktop.swingx.hyperlink.LinkModelAction"/>
        <class name="org.jdesktop.swingx.JXLoginPane$RemovableKeyEventDispatcher"/>
        <method signature="boolean dispatchKeyEvent(java.awt.event.KeyEvent)"
                class="org.jdesktop.swingx.JXLoginPane$RemovableKeyEventDispatcher"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXLoginPane,org.jdesktop.swingx.JXLoginPane$CapsOnTest)"
                class="org.jdesktop.swingx.JXLoginPane$RemovableKeyEventDispatcher"/>
        <class name="org.jdesktop.swingx.JXGraph$Plot"/>
        <method signature="double compute(double)" class="org.jdesktop.swingx.JXGraph$Plot"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.JXGraph$Plot"/>
        <class name="org.jdesktop.swingx.calendar.DaySelectionModel$1"/>
        <class name="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="void setPortion(org.jdesktop.swingx.painter.CapsulePainter$Portion)"
                class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="org.jdesktop.swingx.painter.CapsulePainter$Portion getPortion()"
                class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="void doPaint(java.awt.Graphics2D,java.lang.Object,int,int)"
                class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.painter.CapsulePainter$Portion)"
                class="org.jdesktop.swingx.painter.CapsulePainter"/>
        <class name="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void setTips(org.jdesktop.swingx.tips.TipOfTheDayModel$Tip[])"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip getTipAt(int)"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void remove(org.jdesktop.swingx.tips.TipOfTheDayModel$Tip)"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="int getTipCount()" class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void &lt;init&gt;(java.util.Collection)"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="org.jdesktop.swingx.tips.TipOfTheDayModel$Tip[] getTips()"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.tips.TipOfTheDayModel$Tip[])"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void add(org.jdesktop.swingx.tips.TipOfTheDayModel$Tip)"
                class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.tips.DefaultTipOfTheDayModel"/>
        <class name="org.jdesktop.swingx.multislider.ThumbRenderer"/>
        <method signature="javax.swing.JComponent getThumbRendererComponent(org.jdesktop.swingx.JXMultiThumbSlider,int,boolean)"
                class="org.jdesktop.swingx.multislider.ThumbRenderer"/>
        <class name="org.jdesktop.swingx.JXTree$XTreeModelHandler"/>
        <method signature="void treeNodesInserted(javax.swing.event.TreeModelEvent)"
                class="org.jdesktop.swingx.JXTree$XTreeModelHandler"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree)"
                class="org.jdesktop.swingx.JXTree$XTreeModelHandler"/>
        <class name="org.jdesktop.swingx.JXLoginPane$JXBtnPanel"/>
        <method signature="void &lt;init&gt;(javax.swing.JButton,javax.swing.JButton)"
                class="org.jdesktop.swingx.JXLoginPane$JXBtnPanel"/>
        <method signature="javax.swing.JButton getCancel()" class="org.jdesktop.swingx.JXLoginPane$JXBtnPanel"/>
        <method signature="javax.swing.JButton getOk()" class="org.jdesktop.swingx.JXLoginPane$JXBtnPanel"/>
        <class name="org.jdesktop.swingx.event.DateSelectionListener"/>
        <method signature="void valueChanged(org.jdesktop.swingx.event.DateSelectionEvent)"
                class="org.jdesktop.swingx.event.DateSelectionListener"/>
        <class name="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void &lt;init&gt;(boolean)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setComponent(javax.swing.JComponent)"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setDropHackEnabled(boolean)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setBackground(java.awt.Color)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setIcon(javax.swing.Icon)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="javax.swing.Icon getIcon()" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="boolean isVisible()" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="java.awt.Rectangle getDelegateBounds()"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="javax.swing.JComponent getComponent()"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setPainter(org.jdesktop.swingx.painter.Painter)"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setComponentOrientation(java.awt.ComponentOrientation)"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setForeground(java.awt.Color)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void setFont(java.awt.Font)" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="org.jdesktop.swingx.painter.Painter getPainter()"
                class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <field name="delegate" class="org.jdesktop.swingx.renderer.WrappingIconPanel"/>
        <class name="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findExtendedMatch(java.util.regex.Pattern,int)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void moveMatchMarker()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="javax.swing.JComponent getTarget()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="int moveStartPosition(int,boolean)" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="boolean isEqualStartIndex(int)" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void moveMatchByHighlighter()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="int getSize()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="int adjustStartPosition(int,boolean)" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void moveMatchBySelection()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="org.jdesktop.swingx.JXTable getTarget()" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="int convertColumnIndexToModel(int)" class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="org.jdesktop.swingx.search.AbstractSearchable$SearchResult findMatchAt(java.util.regex.Pattern,int,int)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTable)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <method signature="void findMatchAndUpdateState(java.util.regex.Pattern,int,boolean)"
                class="org.jdesktop.swingx.search.TableSearchable"/>
        <field name="table" class="org.jdesktop.swingx.search.TableSearchable"/>
        <class name="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="javax.swing.tree.TreeCellRenderer getDelegateRenderer()"
                class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)"
                class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void doClick()" class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree,javax.swing.tree.TreeCellRenderer)"
                class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void setOpenIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void setDelegateRenderer(javax.swing.tree.TreeCellRenderer)"
                class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void setClosedIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void &lt;init&gt;(org.jdesktop.swingx.JXTree)"
                class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="boolean isEnabled()" class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <method signature="void setLeafIcon(javax.swing.Icon)" class="org.jdesktop.swingx.JXTree$DelegatingRenderer"/>
        <class name="org.jdesktop.swingx.decorator.HighlightPredicate$ColumnHighlightPredicate"/>
        <method signature="void &lt;init&gt;(int[])"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$ColumnHighlightPredicate"/>
        <method signature="boolean isHighlighted(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$ColumnHighlightPredicate"/>
        <method signature="java.lang.Integer[] getColumns()"
                class="org.jdesktop.swingx.decorator.HighlightPredicate$ColumnHighlightPredicate"/>
        <class name="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
        <method signature="org.jdesktop.swingx.JXLoginPane$Status getStatus()"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
        <method signature="void &lt;init&gt;(java.awt.Dialog,org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
        <method signature="void &lt;init&gt;(java.awt.Frame,org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
        <method signature="void init(org.jdesktop.swingx.JXLoginPane)"
                class="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
        <class name="org.jdesktop.swingx.plaf.DefaultsList"/>
        <method signature="void add(java.lang.Object,java.lang.Object,boolean)"
                class="org.jdesktop.swingx.plaf.DefaultsList"/>
        <method signature="java.lang.Object[] toArray()" class="org.jdesktop.swingx.plaf.DefaultsList"/>
        <method signature="void add(java.lang.Object,java.lang.Object)" class="org.jdesktop.swingx.plaf.DefaultsList"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.DefaultsList"/>
        <class name="org.jdesktop.swingx.plaf.StatusBarAddon"/>
        <method signature="void addMetalDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.StatusBarAddon"/>
        <method signature="void addWindowsDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.StatusBarAddon"/>
        <method signature="void addBasicDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.StatusBarAddon"/>
        <method signature="void addMacDefaults(org.jdesktop.swingx.plaf.LookAndFeelAddons,org.jdesktop.swingx.plaf.DefaultsList)"
                class="org.jdesktop.swingx.plaf.StatusBarAddon"/>
        <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.StatusBarAddon"/>
    </entrypoints>

    <!-- writing shrinked C:\develope\freerapid\dev\swingx.jar to C:\develope\freerapid\dev\swingx-ob.jar. -->
    <inOutPair in="C:\develope\freerapid\dev\swingx.jar" out="C:\develope\freerapid\dev\swingx-ob.jar">
        <removed-code>
            <method signature="void writeObject(java.io.ObjectOutputStream)"
                    class="org.jdesktop.beans.AbstractSerializableBean"/>
            <method signature="void readObject(java.io.ObjectInputStream)"
                    class="org.jdesktop.beans.AbstractSerializableBean"/>
            <method signature="void printAction(java.io.PrintStream,javax.swing.Action)"
                    class="org.jdesktop.swingx.action.ActionManager"/>
            <field name="LIST_IDS" class="org.jdesktop.swingx.action.CompositeAction"/>
            <field name="PARAMS" class="org.jdesktop.swingx.action.ServerAction"/>
            <field name="HEADERS" class="org.jdesktop.swingx.action.ServerAction"/>
            <field name="URL" class="org.jdesktop.swingx.action.ServerAction"/>
            <field name="URL_CACHE" class="org.jdesktop.swingx.action.ServerAction"/>
            <method signature="java.lang.String createMessage(int,java.lang.String)"
                    class="org.jdesktop.swingx.action.ServerAction"/>
            <method signature="void reset()" class="org.jdesktop.swingx.action.TargetManager"/>
            <field name="USER_KEY" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
            <field name="NUM_KEY" class="org.jdesktop.swingx.auth.DefaultUserNameStore"/>
            <method signature="void setRoles(java.lang.String[])" class="org.jdesktop.swingx.auth.UserPermissions"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.border.DropShadowBorder"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.combobox.EnumComboBoxModel"/>
            <field name="THIRD" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
            <field name="MIN_LEN" class="org.jdesktop.swingx.geom.Morphing2D$Geometry"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.graphics.ColorUtilities"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.graphics.GraphicsUtilities"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXBusyLabel"/>
            <field name="ACTION_FIND" class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="ACTION_UNDO" class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="ACTION_REDO" class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="ACTION_CUT" class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="ACTION_COPY" class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="ACTION_PASTE" class="org.jdesktop.swingx.JXEditorPane"/>
            <method signature="javax.swing.event.CaretListener getCaretListener()"
                    class="org.jdesktop.swingx.JXEditorPane"/>
            <field name="SHOW_DELAY" class="org.jdesktop.swingx.JXGlassBox"/>
            <field name="TIMER_INCREMENT" class="org.jdesktop.swingx.JXGlassBox"/>
            <field name="STROKE_AXIS" class="org.jdesktop.swingx.JXGraph"/>
            <field name="STROKE_GRID" class="org.jdesktop.swingx.JXGraph"/>
            <field name="ZOOM_MULTIPLIER" class="org.jdesktop.swingx.JXGraph"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXHeader"/>
            <field name="TEXT" class="org.jdesktop.swingx.JXImagePanel"/>
            <field name="HTML" class="org.jdesktop.swingx.JXLabel$MultiLineSupport"/>
            <field name="oldRendererKey" class="org.jdesktop.swingx.JXLabel"/>
            <method signature="java.awt.Container getViewport()" class="org.jdesktop.swingx.JXLabel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$CancelAction"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel$NameComboBoxModel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$ComboNamePanel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$JXBtnPanel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$JXLoginDialog"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$JXLoginFrame"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$LoginAction"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane$SimpleNamePanel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXLoginPane"/>
            <method signature="boolean canInstallBackgroundUIResourceAsPainter(java.awt.Color)"
                    class="org.jdesktop.swingx.JXPanel"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.JXRadioGroup"/>
            <method signature="void hackLeadAnchor(javax.swing.event.TableModelEvent)"
                    class="org.jdesktop.swingx.JXTable"/>
            <field name="rolloverListener" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
            <method signature="void bindRollover()" class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
            <method signature="java.beans.PropertyChangeListener getRolloverListener()"
                    class="org.jdesktop.swingx.JXTreeTable$TreeTableCellRenderer"/>
            <method signature="java.awt.Dimension minimumComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)"
                    class="org.jdesktop.swingx.MultiSplitLayout"/>
            <method signature="boolean isCacheCleared()" class="org.jdesktop.swingx.painter.AbstractPainter"/>
            <field name="debug" class="org.jdesktop.swingx.painter.effects.AbstractAreaEffect"/>
            <field name="styleChanges" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.basic.BasicHyperlinkUI$ULHtml"/>
            <field name="this$0" class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI$LocaleHandler"/>
            <method signature="void &lt;init&gt;(org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI)"
                    class="org.jdesktop.swingx.plaf.basic.BasicLoginPaneUI$LocaleHandler"/>
            <field name="CALENDAR_SPACING" class="org.jdesktop.swingx.plaf.basic.BasicMonthViewUI"/>
            <field name="serialVersionUID"
                   class="org.jdesktop.swingx.plaf.basic.BasicTaskPaneUI$ToggleCollapsedAction"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.plaf.UIManagerExt"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.IconValues"/>
            <field name="strict" class="org.jdesktop.swingx.renderer.JRendererLabel"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.renderer.StringValues"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.sort.RowFilters"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.sort.SortUtils"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.SwingXUtilities"/>
            <field name="serialVersionUID" class="org.jdesktop.swingx.table.DatePickerCellEditor"/>
            <field name="BACKGROUND_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="FOREGROUND_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="FONT_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="HORIZONTAL_ALIGNMENT_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="HORIZONTAL_TEXT_POSITION_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="ICON_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="ICON_TEXT_GAP_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="TEXT_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="VERTICAL_ALIGNMENT_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <field name="VERTICAL_TEXT_POSITION_SET" class="org.jdesktop.swingx.table.LabelProperties"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.tips.TipLoader"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.Contract"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.PaintUtils"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.ShapeUtils"/>
            <field name="CTRL_WILDCARD_MASK" class="org.jdesktop.swingx.util.Utilities"/>
            <field name="ALT_WILDCARD_MASK" class="org.jdesktop.swingx.util.Utilities"/>
            <field name="TYPICAL_MACOSX_MENU_HEIGHT" class="org.jdesktop.swingx.util.Utilities"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.Utilities"/>
            <method signature="void &lt;init&gt;()" class="org.jdesktop.swingx.util.WindowUtils"/>
        </removed-code>
        <removed-resources>
        </removed-resources>
        <!-- 	shrinked C:\develope\freerapid\dev\swingx.jar BY 16,06%. -->
        <!-- 	size before: 1182 KB, size after: 992 KB. -->
        <!-- 	removed 0 classes, 30 methods, 58 fields, 0 resources. -->
        <!-- 	790 classes remaining of 790 total. -->
    </inOutPair>
</yshrink>

